name: Aider Auto-fix PR Review Change Requests

on:
  pull_request_review:
    types: [submitted]

jobs:
  auto-fix-review:
    if: github.event.review.state == 'changes_requested' && contains(github.event.pull_request.title, '[Aider PR]')
    runs-on: ubicloud-standard-8
    permissions:
      contents: write
      pull-requests: write
    env:
      GEMINI_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      WINDMILL_TOKEN: ${{ secrets.WINDMILL_TOKEN }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Checkout PR Branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "PR review trigger: Checking out PR branch..."
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_HEAD_REF=$(gh pr view $PR_NUMBER --json headRefName -q .headRefName --repo $GITHUB_REPOSITORY)
          if [[ -z "$PR_HEAD_REF" || "$PR_HEAD_REF" == "null" ]]; then
             echo "::error::Could not determine PR head branch for PR #$PR_NUMBER via gh CLI."
             exit 1
          fi
          echo "Checking out PR head branch: $PR_HEAD_REF for PR #$PR_NUMBER"
          git fetch origin "refs/heads/${PR_HEAD_REF}:refs/remotes/origin/${PR_HEAD_REF}" --no-tags
          git checkout "$PR_HEAD_REF"
          echo "Successfully checked out branch $(git rev-parse --abbrev-ref HEAD)"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Aider and Dependencies
        run: |
          python -m pip install aider-install; aider-install
          pip install -U google-generativeai
          sudo apt-get update && sudo apt-get install -y jq

      - name: Generate Prompt from Review
        id: generate_prompt
        shell: bash
        run: |
          mkdir -p .github/aider
          PROMPT_FILE_PATH=".github/aider/review-prompt.txt"

          # Get PR review body
          REVIEW_BODY="${{ github.event.review.body }}"
          REVIEW_BODY_Q=$(printf '%q' "$REVIEW_BODY")

          PR_NUMBER="${{ github.event.pull_request.number }}"

          # Get PR description for context NOT USED FOR NOW
          # PR_DETAILS=$(gh pr view $PR_NUMBER --json title,body --repo $GITHUB_REPOSITORY)
          # PR_TITLE=$(echo "$PR_DETAILS" | jq -r .title)
          # PR_BODY=$(echo "$PR_DETAILS" | jq -r .body)

          # Get all PR review comments
          ALL_REVIEW_COMMENTS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER/comments \
            | jq '[.[] | {diff_hunk: .diff_hunk, path: .path, body: .body}]')

          BASE_PROMPT="Fix the following issues in the PR based on the review feedback. The review body is prepended with REVIEW. The review comments are prepended with REVIEW_COMMENTS. The review body and comments are separated by a blank line."
          COMPLETE_PROMPT=$(printf "%s\nREVIEW:\n%s\nREVIEW_COMMENTS:\n%s" \
            "$BASE_PROMPT" "$REVIEW_BODY_Q" "$ALL_REVIEW_COMMENTS")
          echo "$COMPLETE_PROMPT" > "$PROMPT_FILE_PATH"
          echo "PROMPT_FILE_PATH=$PROMPT_FILE_PATH" >> $GITHUB_OUTPUT

      - name: Probe Chat for Relevant Files
        id: probe_files
        env:
          PROMPT_CONTENT_FILE: ${{ steps.generate_prompt.outputs.PROMPT_FILE_PATH }}
        run: |
          echo "Running probe-chat to find relevant files..."
          if [[ ! -f "$PROMPT_CONTENT_FILE" ]]; then
            echo "::error::Prompt file $PROMPT_CONTENT_FILE not found!"
            exit 1
          fi
          PROMPT_CONTENT=$(cat "$PROMPT_CONTENT_FILE")
          if [ -z "$PROMPT_CONTENT" ]; then
             echo "::error::Prompt content is empty!"
             exit 1
          fi

          PROMPT_ESCAPED=$(jq -Rs . <<< "$PROMPT_CONTENT")

  run-aider:
    needs: [check-membership, check-and-prepare]
    if: github.event.review.state == 'changes_requested' && contains(github.event.pull_request.title, '[Aider PR]') && needs.check-membership.outputs.is_member == 'true'
    uses: ./.github/workflows/aider-common.yml
    with:
      needs_processing: false
      base_prompt: ${{ needs.check-and-prepare.outputs.prompt_content }}
      rules_files: "CLAUDE.md backend/CLAUDE.md frontend/CLAUDE.md"
    secrets: inherit
