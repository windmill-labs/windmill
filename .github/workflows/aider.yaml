name: Aider Auto-fix issues and PR comments via external prompt

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    if: |
      (
        github.event_name == 'issues' &&
        (github.event.action == 'opened' || github.event.action == 'edited')
      ) || (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
        contains(github.event.comment.body, '/aider') &&
        !contains(github.event.comment.user.login, '[bot]')
      )
    permissions:
      contents: write
      pull-requests: write
      issues: write
    env:
      GEMINI_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Checkout PR Branch (if issue_comment)
        if: github.event_name == 'issue_comment'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Issue comment trigger: Checking out PR branch..."
          PR_NUMBER=${{ github.event.issue.number }}
          PR_HEAD_REF=$(gh pr view $PR_NUMBER --json headRefName -q .headRefName --repo $GITHUB_REPOSITORY)
          if [[ -z "$PR_HEAD_REF" || "$PR_HEAD_REF" == "null" ]]; then
             echo "::error::Could not determine PR head branch for PR #$PR_NUMBER via gh CLI."
             exit 1
          fi
          echo "Checking out PR head branch: $PR_HEAD_REF for PR #$PR_NUMBER"
          git fetch origin "refs/heads/${PR_HEAD_REF}:refs/remotes/origin/${PR_HEAD_REF}" --no-tags
          git checkout "$PR_HEAD_REF"
          echo "Successfully checked out branch $(git rev-parse --abbrev-ref HEAD)"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Aider and Dependencies
        run: |
          python -m pip install aider-install; aider-install
          pip install -U google-generativeai
          sudo apt-get update && sudo apt-get install -y jq

      - name: Determine Prompt for Aider
        id: determine_prompt
        shell: bash
        run: |
          PROMPT_FILE_PATH=".github/aider/issue-prompt.txt"
          mkdir -p .github/aider

          if [[ "${{ github.event_name }}" == "issues" ]]; then
            echo "Event Type: Issues. Using existing logic to build prompt."
            ISSUE_TITLE_Q=$(printf '%q' "${{ github.event.issue.title }}")
            ISSUE_BODY_Q=$(printf '%q' "${{ github.event.issue.body }}")

            echo "Sending issue content to external APIâ€¦"

            JSON_PAYLOAD=$(jq -n \
              --arg title "$ISSUE_TITLE_Q" \
              --arg body "$ISSUE_BODY_Q" \
              '{"body":{"issue_title":$title,"issue_body":$body}}')

            API_RESULT=$(curl -s -w "\n%{http_code}" \
              -X POST "https://app.windmill.dev/api/r/test1245/issue-trigger" \
              -H "Content-Type: application/json" \
              --data-binary "$JSON_PAYLOAD" \
              --max-time 90)

            HTTP_CODE=$(echo "$API_RESULT" | tail -n1)
            BODY=$(echo "$API_RESULT" | sed '$d')

            echo "$BODY" > /tmp/api_response.txt

            if [[ "$HTTP_CODE" -eq 200 ]]; then
              PROMPT=$(jq -r '.processed_prompt // .effective_body // .message // empty' /tmp/api_response.txt)
              if [[ -z "$PROMPT" || "$PROMPT" == "null" ]]; then
                echo "::warning::API returned 200 but no prompt; falling back to raw issue."
                printf "Please fix the issue described below:\n\nTitle: %s\n\nBody:\n%s" \
                  "${{ github.event.issue.title }}" \
                  "${{ github.event.issue.body }}" > "$PROMPT_FILE_PATH"
              else
                echo "$PROMPT" > "$PROMPT_FILE_PATH"
              fi
            else
              echo "::warning::API call failed (HTTP $HTTP_CODE). Falling back to raw issue."
              printf "Please fix the issue described below:\n\nTitle: %s\n\nBody:\n%s" \
                "${{ github.event.issue.title }}" \
                "${{ github.event.issue.body }}" > "$PROMPT_FILE_PATH"
            fi
            rm -f /tmp/api_response.txt

          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "Event Type: Issue Comment on PR #${{ github.event.issue.number }}"
            # Store raw comment body in a file first to avoid shell interpretation issues
            echo '${{ github.event.comment.body }}' > /tmp/raw_comment.txt
            # Extract the command part safely
            RAW_COMMENT_BODY=$(cat /tmp/raw_comment.txt)
            # Remove the /aider prefix and trim whitespace
            COMMENT_CONTENT=$(echo "$RAW_COMMENT_BODY" | sed 's|^/aider||' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

            if [[ -z "$COMMENT_CONTENT" ]]; then
              echo "::error::Comment with /aider provided, but no instruction found after it. Cannot proceed."
              printf "Error: /aider command found but no instruction followed." > "$PROMPT_FILE_PATH"
              exit 1
            else
              echo "Using comment content as prompt."
              # Write directly to file without shell interpretation
              printf '%s' "$COMMENT_CONTENT" > "$PROMPT_FILE_PATH"
            fi
          else
            echo "::error::Unhandled event type: ${{ github.event_name }}"
            exit 1
          fi
          echo "Prompt determined and written to $PROMPT_FILE_PATH"
          echo "PROMPT_FILE_PATH=$PROMPT_FILE_PATH" >> $GITHUB_OUTPUT

      - name: Probe Chat for Relevant Files
        id: probe_files
        env:
          PROMPT_CONTENT_FILE: ${{ steps.determine_prompt.outputs.PROMPT_FILE_PATH }}
        run: |
          echo "Running probe-chat to find relevant files..."
          if [[ ! -f "$PROMPT_CONTENT_FILE" ]]; then
            echo "::error::Prompt file $PROMPT_CONTENT_FILE not found!"
            exit 1
          fi
          PROMPT_CONTENT=$(cat "$PROMPT_CONTENT_FILE")
          if [ -z "$PROMPT_CONTENT" ]; then
             echo "::error::Prompt content is empty!"
             exit 1
          fi

          PROMPT_ESCAPED=$(jq -Rs . <<< "$PROMPT_CONTENT")

          MESSAGE_FOR_PROBE=$(jq -n --arg prompt_escaped "$PROMPT_ESCAPED" \
            '{ "message": "I'\''m giving you a request that needs to be implemented. Your role is to give me the files that are relevant to the request. The request is prepended with the word REQUEST.\\nREQUEST: \($prompt_escaped). Give me all the files relevant to this request. Your output MUST be a single json array that can be parsed with programatic json parsing, with the relevant files. Files can be rust or typescript or javascript files. DO NOT INCLUDE ANY OTHER TEXT IN YOUR OUTPUT. ONLY THE JSON ARRAY. Example of output: [\"file1.py\", \"file2.py\"]" }' | jq -r .message)

          set -o pipefail
          PROBE_OUTPUT=$(npx --yes @buger/probe-chat@latest --model-name gemini-2.5-pro-preview-05-06 --message "$MESSAGE_FOR_PROBE" 2>&1) || {
            echo "::error::probe-chat command failed. Output:"
            echo "$PROBE_OUTPUT"
            exit 1
          }
          set +o pipefail
          echo "Probe-chat raw output:"
          echo "$PROBE_OUTPUT"

          JSON_FILES=$(echo "$PROBE_OUTPUT" | sed -n '/^\s*\[/,$p' | sed '/^\s*\]/q')
          echo "Extracted JSON block:"
          echo "$JSON_FILES"

          FILES_LIST=$(echo "$JSON_FILES" | jq -e -r '[.[] | select(type == "string" and . != "" and . != null and (endswith("/") | not))] | map(@sh) | join(" ")' || echo "")

          if [[ -z "$FILES_LIST" ]]; then
             echo "::warning::probe-chat did not identify any relevant files."
             exit 1
          fi

          echo "Formatted files list for aider: $FILES_LIST"
          echo "FILES_TO_EDIT=$FILES_LIST" >> $GITHUB_ENV

      - name: Run Aider with external prompt
        run: |
          echo "Files identified by probe-chat: ${{ env.FILES_TO_EDIT }}"
          aider \
            ${{ env.FILES_TO_EDIT }} \
            --model gemini/gemini-2.5-pro-preview-05-06 \
            --message-file .github/aider/issue-prompt.txt \
            --yes \
            --no-check-update \
            --auto-commits \
            --no-analytics \
            --no-stream > .github/aider/aider-output.txt 2>&1 || true
          echo "Aider command completed. Output saved to .github/aider/aider-output.txt"

      - name: Clean up prompt file
        if: always()
        run: rm -f .github/aider/issue-prompt.txt

      - name: Commit and Push Changes
        id: commit_and_push
        if: ${{ success() }}
        run: |
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            BRANCH_NAME="aider-fix-issue-${{ github.event.issue.number }}"
            git checkout -b $BRANCH_NAME
            echo "Created branch $BRANCH_NAME for issue #${{ github.event.issue.number }}"
            git push origin $BRANCH_NAME
            echo "Pushed to new branch $BRANCH_NAME"
            echo "PR_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
            echo "CHANGES_APPLIED_MESSAGE=Aider changes pushed to new branch $BRANCH_NAME." >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            CURRENT_BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            echo "Attempting to push changes to PR branch $CURRENT_BRANCH_NAME for PR #${{ github.event.issue.number }}"
            if git push origin $CURRENT_BRANCH_NAME; then
              echo "Push to $CURRENT_BRANCH_NAME successful (or no new changes to push)."
              echo "CHANGES_APPLIED_MESSAGE=Aider changes (if any) pushed to PR branch $CURRENT_BRANCH_NAME." >> $GITHUB_OUTPUT
            else
              echo "::warning::Push to PR branch $CURRENT_BRANCH_NAME failed."
              echo "CHANGES_APPLIED_MESSAGE=Aider ran, but failed to push changes to PR branch $CURRENT_BRANCH_NAME." >> $GITHUB_OUTPUT
            fi
          fi

      - name: Prepare Aider Output for PR Body
        id: prepare_aider_output
        if: success() && github.event_name == 'issues'
        run: |
          if [ -f ".github/aider/aider-output.txt" ]; then
            echo "AIDER_OUTPUT<<EOF" >> $GITHUB_OUTPUT
            cat .github/aider/aider-output.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "AIDER_OUTPUT=No Aider output available" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: success() && github.event_name == 'issues' && steps.commit_and_push.outputs.PR_BRANCH_NAME != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_BRANCH: ${{ steps.commit_and_push.outputs.PR_BRANCH_NAME }}
          ISSUE_NUM: ${{ github.event.issue.number }}
        run: |
          gh pr create \
            --title "[Aider PR] Add fixes for issue #${ISSUE_NUM}" \
            --body "This PR was created automatically by Aider to fix issue #${ISSUE_NUM}.

            ## Aider Output
            \`\`\`
            $(cat .github/aider/aider-output.txt || echo "No output available")
            \`\`\`" \
            --head "$PR_BRANCH" \
            --base main
