// Auto-generated MCP tools from OpenAPI specification
// This file is generated by generate_mcp_tools.py - DO NOT EDIT MANUALLY

use std::borrow::Cow;

#[derive(Debug, Clone)]
pub struct EndpointTool {
    pub name: Cow<'static, str>,
    pub description: Cow<'static, str>,
    pub instructions: Cow<'static, str>,
    pub path: Cow<'static, str>,
    pub method: http::Method,
    pub path_params_schema: Option<serde_json::Value>,
    pub query_params_schema: Option<serde_json::Value>,
    pub body_schema: Option<serde_json::Value>,
}

pub fn all_tools() -> Vec<EndpointTool> {
    vec![
    EndpointTool {
        name: Cow::Borrowed("createVariable"),
        description: Cow::Borrowed("create variable"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/variables/create"),
        method: http::Method::POST,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "already_encrypted": {
                        "type": "boolean",
                        "description": "whether the variable is already encrypted (default false)"
                }
        },
        "required": []
})),
        body_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string",
                        "description": "The path to the variable"
                },
                "value": {
                        "type": "string",
                        "description": "The value of the variable"
                },
                "is_secret": {
                        "type": "boolean",
                        "description": "Whether the variable is a secret"
                },
                "description": {
                        "type": "string",
                        "description": "The description of the variable"
                },
                "account": {
                        "type": "integer",
                        "description": "The account identifier"
                },
                "is_oauth": {
                        "type": "boolean",
                        "description": "Whether the variable is an OAuth variable"
                },
                "expires_at": {
                        "type": "string",
                        "description": "The expiration date of the variable",
                        "format": "date-time"
                }
        },
        "required": [
                "path",
                "value",
                "is_secret",
                "description"
        ]
})),
    },
    EndpointTool {
        name: Cow::Borrowed("deleteVariable"),
        description: Cow::Borrowed("delete variable"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/variables/delete/{path}"),
        method: http::Method::DELETE,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: None,
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("updateVariable"),
        description: Cow::Borrowed("update variable"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/variables/update/{path}"),
        method: http::Method::POST,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "already_encrypted": {
                        "type": "boolean",
                        "description": "whether the variable is already encrypted (default false)"
                }
        },
        "required": []
})),
        body_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string",
                        "description": "The path to the variable"
                },
                "value": {
                        "type": "string",
                        "description": "The new value of the variable"
                },
                "is_secret": {
                        "type": "boolean",
                        "description": "Whether the variable is a secret"
                },
                "description": {
                        "type": "string",
                        "description": "The new description of the variable"
                }
        }
})),
    },
    EndpointTool {
        name: Cow::Borrowed("getVariable"),
        description: Cow::Borrowed("get variable"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/variables/get/{path}"),
        method: http::Method::GET,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "decrypt_secret": {
                        "type": "boolean",
                        "description": "ask to decrypt secret if this variable is secret\n(if not secret no effect, default: true)\n"
                },
                "include_encrypted": {
                        "type": "boolean",
                        "description": "ask to include the encrypted value if secret and decrypt secret is not true (default: false)\n"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("listVariable"),
        description: Cow::Borrowed("list variables"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/variables/list"),
        method: http::Method::GET,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path_start": {
                        "type": "string",
                        "description": "filter variables by path prefix"
                },
                "page": {
                        "type": "integer",
                        "description": "which page to return (start at 1, default 1)"
                },
                "per_page": {
                        "type": "integer",
                        "description": "number of items to return for a given page (default 30, max 100)"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("createResource"),
        description: Cow::Borrowed("create resource"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/resources/create"),
        method: http::Method::POST,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "update_if_exists": {
                        "type": "boolean",
                        "description": "update the resource if it already exists (default false)"
                }
        },
        "required": []
})),
        body_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string",
                        "description": "The path to the resource"
                },
                "value": {},
                "description": {
                        "type": "string",
                        "description": "The description of the resource"
                },
                "resource_type": {
                        "type": "string",
                        "description": "The resource_type associated with the resource"
                }
        },
        "required": [
                "path",
                "value",
                "resource_type"
        ]
})),
    },
    EndpointTool {
        name: Cow::Borrowed("deleteResource"),
        description: Cow::Borrowed("delete resource"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/resources/delete/{path}"),
        method: http::Method::DELETE,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: None,
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("updateResource"),
        description: Cow::Borrowed("update resource"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/resources/update/{path}"),
        method: http::Method::POST,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: None,
        body_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string",
                        "description": "The path to the resource"
                },
                "description": {
                        "type": "string",
                        "description": "The new description of the resource"
                },
                "value": {},
                "resource_type": {
                        "type": "string",
                        "description": "The new resource_type to be associated with the resource"
                }
        }
})),
    },
    EndpointTool {
        name: Cow::Borrowed("getResource"),
        description: Cow::Borrowed("get resource"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/resources/get/{path}"),
        method: http::Method::GET,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: None,
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("listResource"),
        description: Cow::Borrowed("list resources"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/resources/list"),
        method: http::Method::GET,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "page": {
                        "type": "integer",
                        "description": "which page to return (start at 1, default 1)"
                },
                "per_page": {
                        "type": "integer",
                        "description": "number of items to return for a given page (default 30, max 100)"
                },
                "resource_type": {
                        "type": "string",
                        "description": "resource_types to list from, separated by ',',"
                },
                "resource_type_exclude": {
                        "type": "string",
                        "description": "resource_types to not list from, separated by ',',"
                },
                "path_start": {
                        "type": "string",
                        "description": "filter resources by path prefix"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("listScripts"),
        description: Cow::Borrowed("list all scripts"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/scripts/list"),
        method: http::Method::GET,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "page": {
                        "type": "integer",
                        "description": "which page to return (start at 1, default 1)"
                },
                "per_page": {
                        "type": "integer",
                        "description": "number of items to return for a given page (default 30, max 100)"
                },
                "order_desc": {
                        "type": "boolean",
                        "description": "order by desc order (default true)"
                },
                "created_by": {
                        "type": "string",
                        "description": "mask to filter exact matching user creator"
                },
                "path_start": {
                        "type": "string",
                        "description": "mask to filter matching starting path"
                },
                "path_exact": {
                        "type": "string",
                        "description": "mask to filter exact matching path"
                },
                "first_parent_hash": {
                        "type": "string",
                        "description": "mask to filter scripts whom first direct parent has exact hash"
                },
                "last_parent_hash": {
                        "type": "string",
                        "description": "mask to filter scripts whom last parent in the chain has exact hash.\nBeware that each script stores only a limited number of parents. Hence\nthe last parent hash for a script is not necessarily its top-most parent.\nTo find the top-most parent you will have to jump from last to last hash\n until finding the parent\n"
                },
                "parent_hash": {
                        "type": "string",
                        "description": "is the hash present in the array of stored parent hashes for this script.\nThe same warning applies than for last_parent_hash. A script only store a\nlimited number of direct parent\n"
                },
                "show_archived": {
                        "type": "boolean",
                        "description": "(default false)\nshow only the archived files.\nwhen multiple archived hash share the same path, only the ones with the latest create_at\nare\ned.\n"
                },
                "include_without_main": {
                        "type": "boolean",
                        "description": "(default false)\ninclude scripts without an exported main function\n"
                },
                "include_draft_only": {
                        "type": "boolean",
                        "description": "(default false)\ninclude scripts that have no deployed version\n"
                },
                "is_template": {
                        "type": "boolean",
                        "description": "(default regardless)\nif true show only the templates\nif false show only the non templates\nif not defined, show all regardless of if the script is a template\n"
                },
                "kinds": {
                        "type": "string",
                        "description": "(default regardless)\nscript kinds to filter, split by comma\n"
                },
                "starred_only": {
                        "type": "boolean",
                        "description": "(default false)\nshow only the starred items\n"
                },
                "with_deployment_msg": {
                        "type": "boolean",
                        "description": "(default false)\ninclude deployment message\n"
                },
                "languages": {
                        "type": "string",
                        "description": "Filter to only include scripts written in the given languages.\nAccepts multiple values as a comma-separated list.\n"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("getScriptByPath"),
        description: Cow::Borrowed("get script by path"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/scripts/get/p/{path}"),
        method: http::Method::GET,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "with_starred_info": {
                        "type": "boolean"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("listFlows"),
        description: Cow::Borrowed("list all flows"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/flows/list"),
        method: http::Method::GET,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "page": {
                        "type": "integer",
                        "description": "which page to return (start at 1, default 1)"
                },
                "per_page": {
                        "type": "integer",
                        "description": "number of items to return for a given page (default 30, max 100)"
                },
                "order_desc": {
                        "type": "boolean",
                        "description": "order by desc order (default true)"
                },
                "created_by": {
                        "type": "string",
                        "description": "mask to filter exact matching user creator"
                },
                "path_start": {
                        "type": "string",
                        "description": "mask to filter matching starting path"
                },
                "path_exact": {
                        "type": "string",
                        "description": "mask to filter exact matching path"
                },
                "show_archived": {
                        "type": "boolean",
                        "description": "(default false)\nshow only the archived files.\nwhen multiple archived hash share the same path, only the ones with the latest create_at\nare displayed.\n"
                },
                "starred_only": {
                        "type": "boolean",
                        "description": "(default false)\nshow only the starred items\n"
                },
                "include_draft_only": {
                        "type": "boolean",
                        "description": "(default false)\ninclude items that have no deployed version\n"
                },
                "with_deployment_msg": {
                        "type": "boolean",
                        "description": "(default false)\ninclude deployment message\n"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("getFlowByPath"),
        description: Cow::Borrowed("get flow by path"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/flows/get/{path}"),
        method: http::Method::GET,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "with_starred_info": {
                        "type": "boolean"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("listQueue"),
        description: Cow::Borrowed("list all queued jobs"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/jobs/queue/list"),
        method: http::Method::GET,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "order_desc": {
                        "type": "boolean",
                        "description": "order by desc order (default true)"
                },
                "created_by": {
                        "type": "string",
                        "description": "mask to filter exact matching user creator"
                },
                "parent_job": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The parent job that is at the origin and responsible for the execution of this script if any"
                },
                "worker": {
                        "type": "string",
                        "description": "worker this job was ran on"
                },
                "script_path_exact": {
                        "type": "string",
                        "description": "mask to filter exact matching path"
                },
                "script_path_start": {
                        "type": "string",
                        "description": "mask to filter matching starting path"
                },
                "schedule_path": {
                        "type": "string",
                        "description": "mask to filter by schedule path"
                },
                "script_hash": {
                        "type": "string",
                        "description": "mask to filter exact matching path"
                },
                "started_before": {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter on started before (inclusive) timestamp"
                },
                "started_after": {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter on started after (exclusive) timestamp"
                },
                "success": {
                        "type": "boolean",
                        "description": "filter on successful jobs"
                },
                "scheduled_for_before_now": {
                        "type": "boolean",
                        "description": "filter on jobs scheduled_for before now (hence waitinf for a worker)"
                },
                "job_kinds": {
                        "type": "string",
                        "description": "filter on job kind (values 'preview', 'script', 'dependencies', 'flow') separated by,"
                },
                "suspended": {
                        "type": "boolean",
                        "description": "filter on suspended jobs"
                },
                "running": {
                        "type": "boolean",
                        "description": "filter on running jobs"
                },
                "args": {
                        "type": "string",
                        "description": "filter on jobs containing those args as a json subset (@> in postgres)"
                },
                "result": {
                        "type": "string",
                        "description": "filter on jobs containing those result as a json subset (@> in postgres)"
                },
                "allow_wildcards": {
                        "type": "boolean",
                        "description": "allow wildcards (*) in the filter of label, tag, worker"
                },
                "tag": {
                        "type": "string",
                        "description": "filter on jobs with a given tag/worker group"
                },
                "page": {
                        "type": "integer",
                        "description": "which page to return (start at 1, default 1)"
                },
                "per_page": {
                        "type": "integer",
                        "description": "number of items to return for a given page (default 30, max 100)"
                },
                "all_workspaces": {
                        "type": "boolean",
                        "description": "get jobs from all workspaces (only valid if request come from the `admins` workspace)"
                },
                "is_not_schedule": {
                        "type": "boolean",
                        "description": "is not a scheduled job"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("listJobs"),
        description: Cow::Borrowed("list all jobs"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/jobs/list"),
        method: http::Method::GET,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "created_by": {
                        "type": "string",
                        "description": "mask to filter exact matching user creator"
                },
                "label": {
                        "type": "string",
                        "description": "mask to filter exact matching job's label (job labels are completed jobs with as a result an object containing a string in the array at key 'wm_labels')"
                },
                "worker": {
                        "type": "string",
                        "description": "worker this job was ran on"
                },
                "parent_job": {
                        "type": "string",
                        "format": "uuid",
                        "description": "The parent job that is at the origin and responsible for the execution of this script if any"
                },
                "script_path_exact": {
                        "type": "string",
                        "description": "mask to filter exact matching path"
                },
                "script_path_start": {
                        "type": "string",
                        "description": "mask to filter matching starting path"
                },
                "schedule_path": {
                        "type": "string",
                        "description": "mask to filter by schedule path"
                },
                "script_hash": {
                        "type": "string",
                        "description": "mask to filter exact matching path"
                },
                "started_before": {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter on started before (inclusive) timestamp"
                },
                "started_after": {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter on started after (exclusive) timestamp"
                },
                "created_before": {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter on created before (inclusive) timestamp"
                },
                "created_after": {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter on created after (exclusive) timestamp"
                },
                "created_or_started_before": {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter on created_at for non non started job and started_at otherwise before (inclusive) timestamp"
                },
                "running": {
                        "type": "boolean",
                        "description": "filter on running jobs"
                },
                "scheduled_for_before_now": {
                        "type": "boolean",
                        "description": "filter on jobs scheduled_for before now (hence waitinf for a worker)"
                },
                "created_or_started_after": {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter on created_at for non non started job and started_at otherwise after (exclusive) timestamp"
                },
                "created_or_started_after_completed_jobs": {
                        "type": "string",
                        "format": "date-time",
                        "description": "filter on created_at for non non started job and started_at otherwise after (exclusive) timestamp but only for the completed jobs"
                },
                "job_kinds": {
                        "type": "string",
                        "description": "filter on job kind (values 'preview', 'script', 'dependencies', 'flow') separated by,"
                },
                "suspended": {
                        "type": "boolean",
                        "description": "filter on suspended jobs"
                },
                "args": {
                        "type": "string",
                        "description": "filter on jobs containing those args as a json subset (@> in postgres)"
                },
                "tag": {
                        "type": "string",
                        "description": "filter on jobs with a given tag/worker group"
                },
                "result": {
                        "type": "string",
                        "description": "filter on jobs containing those result as a json subset (@> in postgres)"
                },
                "allow_wildcards": {
                        "type": "boolean",
                        "description": "allow wildcards (*) in the filter of label, tag, worker"
                },
                "page": {
                        "type": "integer",
                        "description": "which page to return (start at 1, default 1)"
                },
                "per_page": {
                        "type": "integer",
                        "description": "number of items to return for a given page (default 30, max 100)"
                },
                "is_skipped": {
                        "type": "boolean",
                        "description": "is the job skipped"
                },
                "is_flow_step": {
                        "type": "boolean",
                        "description": "is the job a flow step"
                },
                "has_null_parent": {
                        "type": "boolean",
                        "description": "has null parent"
                },
                "success": {
                        "type": "boolean",
                        "description": "filter on successful jobs"
                },
                "all_workspaces": {
                        "type": "boolean",
                        "description": "get jobs from all workspaces (only valid if request come from the `admins` workspace)"
                },
                "is_not_schedule": {
                        "type": "boolean",
                        "description": "is not a scheduled job"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("createSchedule"),
        description: Cow::Borrowed("create schedule"),
        instructions: Cow::Borrowed("Creates a new schedule.
The schedule should include seconds.
You should get the schema of the script or flow before creating the schedule to correctly specify the arguments needed.
"),
        path: Cow::Borrowed("/w/{workspace}/schedules/create"),
        method: http::Method::POST,
        path_params_schema: None,
        query_params_schema: None,
        body_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string",
                        "description": "The path where the schedule will be created"
                },
                "schedule": {
                        "type": "string",
                        "description": "The cron schedule to trigger the script or flow. Should include seconds."
                },
                "timezone": {
                        "type": "string",
                        "description": "The timezone to use for the cron schedule"
                },
                "script_path": {
                        "type": "string",
                        "description": "The path to the script or flow to trigger"
                },
                "is_flow": {
                        "type": "boolean",
                        "description": "Whether the schedule is for a flow"
                },
                "args": {
                        "type": "object",
                        "description": "The arguments to pass to the script or flow",
                        "additionalProperties": {}
                },
                "enabled": {
                        "type": "boolean",
                        "description": "Whether the schedule is enabled"
                },
                "on_failure": {
                        "type": "string",
                        "description": "The path to the script or flow to trigger on failure"
                },
                "on_failure_times": {
                        "type": "number",
                        "description": "The number of times to retry on failure"
                },
                "on_failure_exact": {
                        "type": "boolean",
                        "description": "Whether the schedule should only run on the exact time"
                },
                "on_failure_extra_args": {
                        "type": "object",
                        "description": "The arguments to pass to the script or flow",
                        "additionalProperties": {}
                },
                "on_recovery": {
                        "type": "string",
                        "description": "The path to the script or flow to trigger on recovery"
                },
                "on_recovery_times": {
                        "type": "number",
                        "description": "The number of times to retry on recovery"
                },
                "on_recovery_extra_args": {
                        "type": "object",
                        "description": "The arguments to pass to the script or flow",
                        "additionalProperties": {}
                },
                "on_success": {
                        "type": "string",
                        "description": "The path to the script or flow to trigger on success"
                },
                "on_success_extra_args": {
                        "type": "object",
                        "description": "The arguments to pass to the script or flow",
                        "additionalProperties": {}
                },
                "ws_error_handler_muted": {
                        "type": "boolean",
                        "description": "Whether the WebSocket error handler is muted"
                },
                "retry": {
                        "$ref": "../../openflow.openapi.yaml#/components/schemas/Retry",
                        "description": "The retry configuration for the schedule"
                },
                "no_flow_overlap": {
                        "type": "boolean",
                        "description": "Whether the schedule should not run if a flow is already running"
                },
                "summary": {
                        "type": "string",
                        "description": "The summary of the schedule"
                },
                "description": {
                        "type": "string",
                        "description": "The description of the schedule"
                },
                "tag": {
                        "type": "string",
                        "description": "The tag of the schedule"
                },
                "paused_until": {
                        "type": "string",
                        "description": "The date and time the schedule will be paused until",
                        "format": "date-time"
                },
                "cron_version": {
                        "type": "string",
                        "description": "The version of the cron schedule to use (last is v2)"
                }
        },
        "required": [
                "path",
                "schedule",
                "timezone",
                "script_path",
                "is_flow",
                "args"
        ]
})),
    },
    EndpointTool {
        name: Cow::Borrowed("updateSchedule"),
        description: Cow::Borrowed("update schedule"),
        instructions: Cow::Borrowed("Updates a schedule.
The schedule should include seconds.
You should get the schema of the script or flow before updating the schedule to correctly specify the arguments needed.
"),
        path: Cow::Borrowed("/w/{workspace}/schedules/update/{path}"),
        method: http::Method::POST,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: None,
        body_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "schedule": {
                        "type": "string",
                        "description": "The cron schedule to trigger the script or flow. Should include seconds."
                },
                "timezone": {
                        "type": "string",
                        "description": "The timezone to use for the cron schedule"
                },
                "args": {
                        "type": "object",
                        "description": "The arguments to pass to the script or flow",
                        "additionalProperties": {}
                },
                "on_failure": {
                        "type": "string",
                        "description": "The path to the script or flow to trigger on failure"
                },
                "on_failure_times": {
                        "type": "number",
                        "description": "The number of times to retry on failure"
                },
                "on_failure_exact": {
                        "type": "boolean",
                        "description": "Whether the schedule should only run on the exact time"
                },
                "on_failure_extra_args": {
                        "type": "object",
                        "description": "The arguments to pass to the script or flow",
                        "additionalProperties": {}
                },
                "on_recovery": {
                        "type": "string",
                        "description": "The path to the script or flow to trigger on recovery"
                },
                "on_recovery_times": {
                        "type": "number",
                        "description": "The number of times to retry on recovery"
                },
                "on_recovery_extra_args": {
                        "type": "object",
                        "description": "The arguments to pass to the script or flow",
                        "additionalProperties": {}
                },
                "on_success": {
                        "type": "string",
                        "description": "The path to the script or flow to trigger on success"
                },
                "on_success_extra_args": {
                        "type": "object",
                        "description": "The arguments to pass to the script or flow",
                        "additionalProperties": {}
                },
                "ws_error_handler_muted": {
                        "type": "boolean",
                        "description": "Whether the WebSocket error handler is muted"
                },
                "retry": {
                        "$ref": "../../openflow.openapi.yaml#/components/schemas/Retry",
                        "description": "The retry configuration for the schedule"
                },
                "no_flow_overlap": {
                        "type": "boolean",
                        "description": "Whether the schedule should not run if a flow is already running"
                },
                "summary": {
                        "type": "string",
                        "description": "The summary of the schedule"
                },
                "description": {
                        "type": "string",
                        "description": "The description of the schedule"
                },
                "tag": {
                        "type": "string",
                        "description": "The tag of the schedule"
                },
                "paused_until": {
                        "type": "string",
                        "description": "The date and time the schedule will be paused until",
                        "format": "date-time"
                },
                "cron_version": {
                        "type": "string",
                        "description": "The version of the cron schedule to use (last is v2)"
                }
        },
        "required": [
                "schedule",
                "timezone",
                "args"
        ]
})),
    },
    EndpointTool {
        name: Cow::Borrowed("deleteSchedule"),
        description: Cow::Borrowed("delete schedule"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/schedules/delete/{path}"),
        method: http::Method::DELETE,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: None,
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("getSchedule"),
        description: Cow::Borrowed("get schedule"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/schedules/get/{path}"),
        method: http::Method::GET,
        path_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "path": {
                        "type": "string"
                }
        },
        "required": [
                "path"
        ]
})),
        query_params_schema: None,
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("listSchedules"),
        description: Cow::Borrowed("list schedules"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/w/{workspace}/schedules/list"),
        method: http::Method::GET,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "page": {
                        "type": "integer",
                        "description": "which page to return (start at 1, default 1)"
                },
                "per_page": {
                        "type": "integer",
                        "description": "number of items to return for a given page (default 30, max 100)"
                },
                "args": {
                        "type": "string",
                        "description": "filter on jobs containing those args as a json subset (@> in postgres)"
                },
                "path": {
                        "type": "string",
                        "description": "filter by path"
                },
                "is_flow": {
                        "type": "boolean",
                        "description": "filter schedules by whether they target a flow"
                },
                "path_start": {
                        "type": "string",
                        "description": "filter schedules by path prefix"
                }
        },
        "required": []
})),
        body_schema: None,
    },
    EndpointTool {
        name: Cow::Borrowed("listWorkers"),
        description: Cow::Borrowed("list workers"),
        instructions: Cow::Borrowed(""),
        path: Cow::Borrowed("/workers/list"),
        method: http::Method::GET,
        path_params_schema: None,
        query_params_schema: Some(serde_json::json!({
        "type": "object",
        "properties": {
                "page": {
                        "type": "integer",
                        "description": "which page to return (start at 1, default 1)"
                },
                "per_page": {
                        "type": "integer",
                        "description": "number of items to return for a given page (default 30, max 100)"
                },
                "ping_since": {
                        "type": "integer",
                        "description": "number of seconds the worker must have had a last ping more recent of (default to 300)"
                }
        },
        "required": []
})),
        body_schema: None,
    }
    ]
}
