{
  "db_name": "PostgreSQL",
  "query": "WITH inserted_job AS (\n            INSERT INTO v2_job (id, workspace_id, raw_code, raw_lock, raw_flow, tag, parent_job,\n                created_by, permissioned_as, runnable_id, runnable_path, args, kind, trigger,\n            script_lang, same_worker, pre_run_error, permissioned_as_email, visible_to_owner,\n            flow_innermost_root_job, concurrent_limit, concurrency_time_window_s, timeout, flow_step_id,\n            cache_ttl, priority, trigger_kind, script_entrypoint_override, preprocessed)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18,\n            $19, $20, $21, $22, $23, $24, $25, $26,\n            CASE WHEN $14::VARCHAR IS NOT NULL THEN 'schedule'::job_trigger_kind END,\n            ($12::JSONB)->>'_ENTRYPOINT_OVERRIDE', $27)\n        ),\n        inserted_runtime AS (\n            INSERT INTO v2_job_runtime (id, ping) VALUES ($1, null)\n        ),\n        inserted_job_perms AS (\n            INSERT INTO job_perms (job_id, email, username, is_admin, is_operator, folders, groups, workspace_id) \n            values ($1, $32, $33, $34, $35, $36, $37, $2) \n            ON CONFLICT (job_id) DO UPDATE SET email = $32, username = $33, is_admin = $34, is_operator = $35, folders = $36, groups = $37, workspace_id = $2\n        )\n        INSERT INTO v2_job_queue\n            (workspace_id, id, running, scheduled_for, started_at, tag, priority)\n            VALUES ($2, $1, $28, COALESCE($29, now()), CASE WHEN $27 THEN now() END, $30, $31)",
  "describe": {
    "columns": [],
    "parameters": {
      "Left": [
        "Uuid",
        "Varchar",
        "Text",
        "Text",
        "Jsonb",
        "Varchar",
        "Uuid",
        "Varchar",
        "Varchar",
        "Int8",
        "Varchar",
        "Jsonb",
        {
          "Custom": {
            "name": "job_kind",
            "kind": {
              "Enum": [
                "script",
                "preview",
                "flow",
                "dependencies",
                "flowpreview",
                "script_hub",
                "identity",
                "flowdependencies",
                "http",
                "graphql",
                "postgresql",
                "noop",
                "appdependencies",
                "deploymentcallback",
                "singlescriptflow",
                "flowscript",
                "flownode",
                "appscript"
              ]
            }
          }
        },
        "Varchar",
        {
          "Custom": {
            "name": "script_lang",
            "kind": {
              "Enum": [
                "python3",
                "deno",
                "go",
                "bash",
                "postgresql",
                "nativets",
                "bun",
                "mysql",
                "bigquery",
                "snowflake",
                "graphql",
                "powershell",
                "mssql",
                "php",
                "bunnative",
                "rust",
                "ansible",
                "csharp",
                "oracledb",
                "nu",
                "java",
                "duckdb"
              ]
            }
          }
        },
        "Bool",
        "Text",
        "Varchar",
        "Bool",
        "Uuid",
        "Int4",
        "Int4",
        "Int4",
        "Varchar",
        "Int4",
        "Int2",
        "Bool",
        "Bool",
        "Timestamptz",
        "Varchar",
        "Int2",
        "Varchar",
        "Varchar",
        "Bool",
        "Bool",
        "JsonbArray",
        "TextArray"
      ]
    },
    "nullable": []
  },
  "hash": "cccdcb7fe7968eadfc04d8957a8e98b2f2d92a6d7f687a9dd5a70edb3d5a63e6"
}
