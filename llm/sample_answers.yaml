- answer: |-
    ```python
    import psycopg2
    from typing import TypedDict

    class postgresql(TypedDict):
        host: str
        port: int
        user: str
        dbname: str
        sslmode: str
        password: str

    def main(postgres_config: postgresql):
        # Connect to the PostgreSQL server
        conn = psycopg2.connect(
            host=postgres_config['host'],
            port=postgres_config['port'],
            user=postgres_config['user'],
            password=postgres_config['password'],
            dbname=postgres_config['dbname'],
            sslmode=postgres_config['sslmode']
        )

        # Create a cursor object
        cur = conn.cursor()

        # Execute a query
        cur.execute("SELECT * FROM orders")

        # Fetch all the rows
        rows = cur.fetchall()

        # Print all the rows
        for row in rows:
            print(row)

        # Close the cursor and connection
        cur.close()
        conn.close()
    ```
  description: Connect to postgres and list the rows in the orders table
  lang: python3
  type: gen
- answer: |-
    Sure, here's the corrected code. I've added a check to ensure that the number passed to the function is not zero to prevent a division by zero error.

    ```python
    def main(num: int) -> int:
      if num == 0:
        raise ValueError("The input number should not be zero")  # raise an error if num is zero
      return 3 / num
    ```
    This code will raise a ValueError if the input number is zero.
  code: |-
    def main(num: int) -> int:
      return 3 / num
  error: division by zero
  lang: python3
  type: fix
- answer: |-
    Sure, here's your code with comments:

    ```python
    # This is a Python function that takes an integer as input.
    def main(num: int) -> int:
        # The function divides the input number by 16.
        # The result of this division is then returned by the function.
        return num / 16
    ```
  code: |-
    def main(num: int) -> int:
      return num / 16
  description: Comment my code
  lang: python3
  type: edit
- answer: |-
    ```go
    package inner

    import (
        "errors"
        "fmt"
    )

    // Function to divide a number by 16
    func main(num float64) (float64, error) {
        if num == 0 {
            return 0, errors.New("Division by zero is not allowed")
        }

        result := num / 16
        return result, nil
    }
    ```
    In this code, we define a function called `main` that takes a float64 number as an input. It then divides the number by 16 and returns the result. If the number is 0, it returns an error.
  description: Divide a number by 16
  lang: go
  type: gen
- answer: |-
    ```typescript
    import { toWords } from "npm:number-to-words"; // Importing the "number-to-words" npm package.

    export async function main(number: number): Promise<string> {
      // Convert the number to words.
      const words = toWords(number);

      // Return the words.
      return words;
    }
    ```
    In this function, we are using the "number-to-words" npm package to convert a number to words. The function takes a number as an argument and returns a Promise that resolves to a string. The string is the word representation of the number.
  description: Convert a number to a word
  lang: deno
  type: gen
- answer: |-
    ```typescript
    // Importing the required libraries
    import { Client } from "npm:https://deno.land/x/postgres@v0.13.0/mod.ts";

    type Postgresql = {
      host: string,
      port: number,
      user: string,
      dbname: string,
      sslmode: string,
      password: string
    }

    // Exporting the main function
    export async function main(postgres: Postgresql) {
      // Creating a new client with the provided configuration
      const client = new Client({
        hostname: postgres.host,
        port: postgres.port,
        user: postgres.user,
        password: postgres.password,
        database: postgres.dbname,
        tls: {
          enforce: postgres.sslmode === "require",
        },
      });

      // Connecting to the database
      await client.connect();

      // Querying the "orders" table
      const result = await client.queryArray("SELECT * FROM orders;");

      // Closing the connection
      await client.end();

      // Returning the rows of the "orders" table
      return result.rows;
    }
    ```
    In this function, we first import the `Client` class from the `postgres` library. We then define a function `main` that takes a `Postgresql` object as argument. This object contains the information needed to connect to the PostgreSQL database.

    In the function, we first create a new `Client` instance with the provided configuration. We then connect to the database, query the "orders" table, and close the connection. Finally, we return the rows of the "orders" table.
  description: Connect to postgres and list the rows in the orders table
  lang: deno
  type: gen
- answer: |-
    ```typescript
    // Importing the npm library "number-to-words" to convert numbers to words
    import * as numberToWords from 'number-to-words';

    type Airtable = {
      apiKey: string
    }

    type AirtableTable = {
      baseId: string,
      tableName: string
    }

    // ... all the other types here ...

    type Toggl = {
      token: string
    }

    // Defining the main function
    export async function main(number: number): Promise<string> {
      // Converting the number to a word using the numberToWords library
      const word = numberToWords.toWords(number);

      // Returning the word
      return word;
    }
    ```
    Note: This code assumes that you have installed the `number-to-words` npm package in your project. If not, you can install it by running `npm install --save number-to-words` in your project directory.
  description: Convert a number to a word
  lang: bun
  type: gen
- answer: |-
    ```sql
    -- $1::text as name
    -- $2::text as email
    INSERT INTO users (name, email)
    VALUES ($1::text, $2::text);
    ```
  description: Insert an email and a name in the users table
  lang: postgresql
  type: gen
- answer: |-
    ```sql
    -- ? email (VARCHAR)
    -- ? name (VARCHAR)
    INSERT INTO users (email, name) VALUES (?, ?)
    ```
  description: Insert an email and a name in the users table
  lang: mysql
  type: gen
- answer: |-
    ```bash
    var1="$1"  # Get the first argument

    result=$(echo "scale=2; $var1 / 16" | bc)  # Divide the number by 16 using bc command. Scale is used to get the decimal values up to 2 places

    echo $result  # Print the result
    ```
  description: Divide a number by 16
  lang: bash
  type: gen
- answer: |-
    Here is a simple Dockerfile for a Python application. It assumes that your application is using Flask and Gunicorn, but you can replace these with your actual dependencies.

    ```dockerfile
    # Use an official Python runtime as a parent image
    FROM python:3.7-slim

    # Set the working directory in the container to /app
    WORKDIR /app

    # Add the current directory contents into the container at /app
    ADD . /app

    # Install any needed packages specified in requirements.txt
    RUN pip install --trusted-host pypi.python.org -r requirements.txt

    # Make port 80 available to the world outside this container
    EXPOSE 80

    # Define environment variable
    ENV NAME World

    # Run app.py when the container launches
    CMD ["gunicorn", "app:app"]
    ```

    This Dockerfile does the following:

    - `FROM python:3.7-slim` starts with the 3.7-slim Python image.
    - `WORKDIR /app` sets the working directory inside the container to /app.
    - `ADD . /app` copies the current directory (i.e., the directory containing the Dockerfile) into the container at /app.
    - `RUN pip install --trusted-host pypi.python.org -r requirements.txt` installs the Python dependencies.
    - `EXPOSE 80` makes port 80 available outside the container.
    - `ENV NAME World` sets an environment variable.
    - `CMD ["gunicorn", "app:app"]` runs your application with Gunicorn when the container starts.
  description: Write a docker image for a python app
  lang: bash
  type: gen
- answer: |-
    ```typescript
    // Define the Github type
    type Github = {
      token: string
    }

    // Define the main function
    export async function main(github: Github, owner: string, repo: string): Promise<number> {
      // Define the url for the Github API
      const url = `https://api.github.com/repos/${owner}/${repo}`;

      // Define the headers for the request
      const headers = {
        'Authorization': `token ${github.token}`,
        'Accept': 'application/vnd.github.v3+json'
      };

      // Fetch the data from the Github API
      const response = await fetch(url, { headers });

      // Check if the response is ok
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Parse the response as JSON
      const data = await response.json();

      // Return the number of stars
      return data.stargazers_count;
    }
    ```
    This function takes a Github object and the owner and repo as strings. It constructs the URL for the Github API and defines the headers for the request. It then fetches the data from the Github API and checks if the response is ok. If it is, it parses the response as JSON and returns the number of stars. If the response is not ok, it throws an error.
  description: Query the github api and return the number of stars of a repo
  lang: nativets
  type: gen
- answer: |-
    ```javascript
    // Access the email from the context object
    let email = ctx.email;

    // Set the value of the input with id 'my_field' to the email
    setValue('my_field', email);
    ```
  description: set the value of the input with id 'my_field' to the context variable
    email
  lang: frontend
  type: gen
