- answer: |-
    ```python
    import psycopg2
    from typing import TypedDict

    class postgresql(TypedDict):
        host: str
        port: int
        user: str
        dbname: str
        sslmode: str
        password: str

    def main(config: postgresql):
        # Create a connection to the database
        conn = psycopg2.connect(
            host=config['host'],
            port=config['port'],
            user=config['user'],
            password=config['password'],
            dbname=config['dbname'],
            sslmode=config['sslmode']
        )

        # Create a cursor object
        cur = conn.cursor()

        # Execute the SQL query to fetch all rows from the orders table
        cur.execute("SELECT * FROM orders")

        # Fetch all rows from the last executed SQL query
        rows = cur.fetchall()

        # Print the rows
        for row in rows:
            print(row)

        # Close the cursor and connection
        cur.close()
        conn.close()
    ```
  description: Connect to postgres and list the rows in the orders table
  lang: python3
  type: gen
- answer: |-
    ```python
    def main(num: int) -> int:
      # Add a condition to check if num is zero.
      # If num is zero, return a message to avoid division by zero error.
      if num == 0:
        return "Error: Division by zero is not allowed."
      else:
        return 3 / num
    ```
  code: |-
    def main(num: int) -> int:
      return 3 / num
  error: division by zero
  lang: python3
  type: fix
- answer: |-
    ```python
    # This is a Python function named main. It takes an integer as input.
    def main(num: int) -> int:
      # The function returns the input number divided by 16.
      return num / 16
    ```
  code: |-
    def main(num: int) -> int:
      return num / 16
  description: Comment my code
  lang: python3
  type: edit
- answer: |-
    ```go
    package inner

    import (
        "errors"
        "fmt"
    )

    // main function which accepts a float64 number and divides it by 16
    // returns the result and an error if the input number is 0
    func main(num float64) (float64, error) {
        // check if the number is 0, as division by 0 is not allowed
        if num == 0 {
            return 0, errors.New("Division by 0 is not allowed")
        }

        // divide the number by 16
        result := num / 16

        // return the result and nil as error
        return result, nil
    }
    ```
    In this code, we first check if the input number is 0. If it is, we return an error because division by zero is not allowed. If the number is not 0, we divide it by 16 and return the result and nil (indicating no error).
  description: Divide a number by 16
  lang: go
  type: gen
- answer: |-
    ```typescript
    // Importing the library for number to word conversion
    import { toWords } from "npm:number-to-words";

    // Define the main function
    export async function main(number: number): Promise<string> {
      // Convert the number to words
      const words = toWords(number);

      // Return the result
      return words;
    }
    ```
  description: Convert a number to a word
  lang: deno
  type: gen
- answer: |-
    ```typescript
    // Importing the required PostgreSQL library from npm
    import { Client } from "npm:pg";

    // Defining the Postgresql type
    type Postgresql = {
      host: string,
      port: number,
      user: string,
      dbname: string,
      sslmode: string,
      password: string
    }

    // Exporting the main function
    export async function main(postgres: Postgresql) {
      // Creating a new PostgreSQL client with the provided configuration
      const client = new Client({
        host: postgres.host,
        port: postgres.port,
        user: postgres.user,
        password: postgres.password,
        database: postgres.dbname,
        ssl: {
          rejectUnauthorized: postgres.sslmode === 'require' ? true : false,
        },
      });

      // Connecting to the PostgreSQL server
      await client.connect();

      // Querying the orders table
      const res = await client.query('SELECT * FROM orders');

      // Logging the rows from the orders table
      console.log(res.rows);

      // Closing the connection to the PostgreSQL server
      await client.end();
    }
    ```
    This function, when called, will connect to a PostgreSQL server using the provided configuration, query the "orders" table, log the rows from the table, and then close the connection. The function is asynchronous because it needs to wait for the connection, query, and disconnection operations to complete.
  description: Connect to postgres and list the rows in the orders table
  lang: deno
  type: gen
- answer: |-
    Here's a simple TypeScript function called "main" that converts a number to a word using the npm library "number-to-words". I've added the library import at the top of the file. The function takes a number as an argument and returns the word representation of that number.

    ```typescript
    import * as numberToWords from 'number-to-words';

    export async function main(num: number): Promise<string> {
      // Convert the number to words using the number-to-words library
      const word = numberToWords.toWords(num);

      // Return the word
      return word;
    }
    ```
    The function is asynchronous and returns a Promise that resolves to a string. This is because in a real-world scenario, the conversion process might involve some asynchronous operations (like fetching data from a database or making a request to an API), and we want to be able to handle that. In this simple example, the conversion is done synchronously, but the function is still declared as async for consistency and future-proofing.
  description: Convert a number to a word
  lang: bun
  type: gen
- answer: |-
    ```sql
    -- $1::text name
    -- $2::text email
    INSERT INTO users (name, email) VALUES ($1::text, $2::text);
    ```
  description: Insert an email and a name in the users table
  lang: postgresql
  type: gen
- answer: |-
    ```sql
    -- ? email (VARCHAR)
    -- ? name (VARCHAR)
    INSERT INTO users (email, name)
    VALUES (?, ?)
    ```
  description: Insert an email and a name in the users table
  lang: mysql
  type: gen
- answer: |-
    ```bash
    var1="$1"

    # Bash only supports integer division natively.
    # So we use bc, a command line calculator, to perform floating point division.
    result=$(echo "scale=2; $var1 / 16" | bc)

    echo $result
    ```
  description: Divide a number by 16
  lang: bash
  type: gen
- answer: |-
    ```bash
    # Get the arguments
    app_name="$1"
    python_version="$2"

    # Create a Dockerfile
    cat > Dockerfile << EOF
    # Use an official Python runtime as a parent image
    FROM python:${python_version}

    # Set the working directory in the container to /app
    WORKDIR /app

    # Add the current directory contents into the container at /app
    ADD . /app

    # Install any needed packages specified in requirements.txt
    RUN pip install --no-cache-dir -r requirements.txt

    # Make port 80 available to the world outside this container
    EXPOSE 80

    # Define environment variable
    ENV NAME ${app_name}

    # Run app.py when the container launches
    CMD ["python", "app.py"]
    EOF
    ```
    This bash script creates a Dockerfile for a Python application. The Dockerfile uses the official Python image from Docker Hub as its base. It then sets the working directory in the container to /app and copies the current directory (i.e., the directory where the Dockerfile is located) into the /app directory in the container. It installs any Python packages listed in requirements.txt, exposes port 80 for the app to communicate with the outside world, sets an environment variable with the name of the app, and finally, specifies that Docker should execute python app.py when the container is launched.
  description: Write a docker image for a python app
  lang: bash
  type: gen
- answer: |-
    ```typescript
    // Define Github type
    type Github = {
      token: string
    }

    // Define main function
    export async function main(owner: string, repo: string, github: Github): Promise<number> {
      // Set up the request headers
      const headers = {
        "Authorization": `token ${github.token}`,
        "Accept": "application/vnd.github.v3+json"
      };

      // Fetch data from Github API
      const response = await fetch(`https://api.github.com/repos/${owner}/${repo}`, { headers });

      // Check if response is ok
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // Parse the response to JSON
      const data = await response.json();

      // Return the number of stars
      return data.stargazers_count;
    }
    ```
    This function uses the fetch API to make a GET request to the GitHub API. The owner and repo parameters are the username and repository name, respectively. The github parameter is an object that contains the GitHub personal access token. The function returns a promise that resolves to the number of stars of the repository. If the request fails, it throws an error.
  description: Query the github api and return the number of stars of a repo
  lang: nativets
  type: gen
- answer: |-
    ```javascript
    // Access the 'email' property from the global 'ctx' object
    let email = ctx.email;

    // Use the 'setValue' function to set the value of the input with id 'my_field' to the 'email' variable
    setValue('my_field', email);
    ```
  description:
    set the value of the input with id 'my_field' to the context variable
    email
  lang: frontend
  type: gen
- answer: |-
    ```sql
    -- $1 username
    SELECT
        DATE_TRUNC('month', completed_job.created_at) AS month,
        COUNT(completed_job.id) AS job_count
    FROM
        completed_job
    WHERE
        completed_job.created_by = $1::varchar
    GROUP BY
        month
    ORDER BY
        month;
    ```
    In this SQL query, we are querying the `completed_job` table where the `created_by` column matches the provided username. We then group the result by month (truncated from the `created_at` timestamp), and count the number of jobs in each month. The result is ordered by month.
  description:
    compute the average number of completed jobs per month for the given
    username
  lang: postgresql
  type: gen
