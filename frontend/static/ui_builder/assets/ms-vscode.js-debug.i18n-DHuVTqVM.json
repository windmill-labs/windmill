{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"add.eventListener.breakpoint": "イベント リスナーのブレークポイントを切り替える",
			"add.xhr.breakpoint": "XHR/fetch ブレークポイントの追加",
			"attach.node.process": "Node のプロセスにアタッチ",
			"base.cascadeTerminateToConfigurations.label": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
			"base.enableDWARF.label": "デバッガーが WebAssembly から DWARF デバッグ シンボルの読み取りを試みるかどうかを切り替えます。これはリソースを集中的に消費する可能性があります。`ms-vscode.wasm-dwarf-debugging` 拡張機能が機能する必要があります。",
			"breakpoint.xhr.any": "任意の XHR/fetch",
			"breakpoint.xhr.contains": "URL に次が含まれている場合に中断します:",
			"browser.address.description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
			"browser.attach.port.description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
			"browser.baseUrl.description": "パス baseUrl を解決するためのベース URL。URL をディスク上のファイルにマップする場合、baseURL はトリミングされます。既定では、起動 URL ドメインに設定されます。",
			"browser.browserAttachLocation.description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
			"browser.browserLaunchLocation.description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
			"browser.cleanUp.description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
			"browser.cwd.description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
			"browser.disableNetworkCache.description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
			"browser.env.description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
			"browser.file.description": "ブラウザーで開くローカル HTML ファイル",
			"browser.includeDefaultArgs.description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
			"browser.includeLaunchArgs.description": "詳細設定: ブラウザーで既定の起動/デバッグ引数を設定するかどうかを指定します。デバッガーでは、ブラウザーが '--remote-debugging-pipe' で提供されているようなパイプ デバッグを使用することを前提としています。",
			"browser.inspectUri.description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
			"browser.launch.port.description": "ブラウザーがリッスンするポート。既定値は \"0\" で、パイプを介してブラウザーをデバッグするようになります。一般にこれはセキュリティに優れているため、別のツールからブラウザーに接続する必要がなければ、これを選択してください。",
			"browser.pathMapping.description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
			"browser.perScriptSourcemaps.description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
			"browser.profileStartup.description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
			"browser.restart": "ブラウザー接続が閉じたときに再接続するかどうか",
			"browser.revealPage": "タブにフォーカスする",
			"browser.runtimeArgs.description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
			"browser.runtimeExecutable.description": "'カナリア'、'安定'、'カスタム'、ブラウザー実行可能ファイルのパスのいずれか。[カスタム] は、カスタム ラッパー、カスタム ビルド、または CHROME_PATH 環境変数を意味します。",
			"browser.runtimeExecutable.edge.description": "'canary'、'stable'、'dev'、'custom'、ブラウザーの実行可能ファイルへのパスのいずれかです。custom は、カスタム ラッパー、カスタム ビルド、または EDGE_PATH 環境変数を指します。",
			"browser.server.description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
			"browser.skipFiles.description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
			"browser.smartStep.description": "ソースマップ化されたファイル内のマッピングされていない行を自動的にステップ実行します。たとえば、async/await または他の機能をダウンコンパイルする際に TypeScript が自動的に生成するコードです。",
			"browser.sourceMapPathOverrides.description": "ソース ファイルの場所をソースマップに指定されている内容からディスク上の場所へ書き換えるための一連のマッピング。詳しくは Readme をご覧ください。",
			"browser.sourceMapRenames.description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
			"browser.sourceMaps.description": "JavaScript ソース マップを使用します (存在する場合)。",
			"browser.targetSelection": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
			"browser.timeout.description": "ブラウザーに接続するには、このミリ秒の間再試行してください。既定値は、10000 ミリ秒です。",
			"browser.url.description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
			"browser.urlFilter.description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
			"browser.userDataDir.description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
			"browser.vueComponentPaths": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
			"browser.webRoot.description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
			"chrome.attach.description": "既にデバッグ モードになっている Chrome のインスタンスにアタッチする",
			"chrome.attach.label": "Chrome: アタッチ",
			"chrome.label": "Web アプリ (Chrome)",
			"chrome.launch.description": "Chrome を起動して URL をデバッグする",
			"chrome.launch.label": "Chrome: 起動",
			"commands.callersAdd.label": "呼び出し元を除外する",
			"commands.callersAdd.paletteLabel": "現在の場所での呼び出し元が一時停止するのを除外する",
			"commands.callersGoToCaller.label": "呼び出し元の場所に移動",
			"commands.callersGoToTarget.label": "対象の場所に移動する",
			"commands.callersRemove.label": "除外された呼び出し元を削除する",
			"commands.callersRemoveAll.label": "除外されたすべての呼び出し元を削除する",
			"commands.disableSourceMapStepping.label": "ソース マップ ステッピングを無効にする",
			"commands.enableSourceMapStepping.label": "ソース マップ ステッピングを有効にする",
			"commands.networkClear.label": "ネットワーク ログをクリアします",
			"commands.networkCopyURI.label": "要求 ID をコピーします",
			"commands.networkOpenBody.label": "応答本文を開きます",
			"commands.networkOpenBodyInHexEditor.label": "応答本文を 16 進数エディターで開きます",
			"commands.networkReplayXHR.label": "要求を再生します",
			"commands.networkViewRequest.label": "要求を cURL として表示します",
			"configuration.autoAttachMode": "'#debug.node.autoAttach#' がオンの場合に、自動的にアタッチしてデバッグするプロセスを構成します。'--inspect' フラグで起動されるノード プロセスは、この設定に関係なく、常にアタッチされます。",
			"configuration.autoAttachMode.always": "ターミナルで起動されるすべての Node.js プロセスに自動アタッチします。",
			"configuration.autoAttachMode.disabled": "オート アタッチが無効で、ステータス バーに表示されません。",
			"configuration.autoAttachMode.explicit": "`--inspect` が指定されている場合にのみ自動アタッチします。",
			"configuration.autoAttachMode.smart": "node_modules フォルダーにないスクリプトを実行しているときに自動アタッチします。",
			"configuration.autoAttachSmartPatterns": "\"スマート\" `#debug.javascript.autoAttachFilter#` モードでアタッチするタイミングを決定するために glob パターンを構成します。`$KNOWN_TOOLS$` は、共通テストとコード ランナーの名前の一覧で置き換えられます。[VS Code ドキュメントで詳細をご確認ください](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns)。",
			"configuration.automaticallyTunnelRemoteServer": "リモート Web アプリをデバッグするときに、リモート サーバーを自動的にローカル マシンにトンネルするかどうかを構成します。",
			"configuration.breakOnConditionalError": "条件付きブレークポイントでエラーが発生したときに停止するかどうかを指定します。",
			"configuration.debugByLinkOptions": "デバッグ時に使用したオプションによって、デバッグ ターミナル内からクリックしたリンクが開きます。\"false\" に設定にすると、この動作を無効にできます。",
			"configuration.defaultRuntimeExecutables": "指定されていない場合に起動構成に使用される、既定の 'runtimeExecutable'。これは、Node.js またはブラウザーのインストールのカスタム パスを構成するために使用できます。",
			"configuration.enableNetworkView": "それをサポートするターゲットの試験的なネットワーク ビューを有効にします。",
			"configuration.npmScriptLensLocation": "npm スクリプトで \"実行\" と \"デバッグ\" のコード レンズが表示される場所。\"すべて\" のスクリプトまたはスクリプト セクションの \"上\" に表示するか、\"表示しない\" を指定できます。",
			"configuration.pickAndAttachOptions": "'デバッグ: Node.js のプロセスにアタッチ' コマンドでプロセスをデバッグするときに使用する既定のオプション",
			"configuration.resourceRequestOptions": "デバッガーでソース マップなどのリソースを読み込むときに使用する要求オプションです。ソースマップで認証が必要な場合または自己署名証明書を使用する場合などに、これを構成する必要がある可能性があります。オプションは、[`got`](https://github.com/sindresorhus/got) ライブラリを使用して要求を作成するために使用されます。\r\n\r\n通常、証明書の検証を無効にするためには、`{ \"https\": { \"rejectUnauthorized\": false } }` をパスします。",
			"configuration.terminalOptions": "JavaScript デバッグ ターミナルおよび npm スクリプトの既定の起動オプション。",
			"configuration.unmapMissingSources": "元のファイルを読み取ることができない sourcemapped ファイルが自動的にマップ解除されるかどうかを構成します。これが False (既定) の場合は、プロンプトが表示されます。",
			"createDiagnostics.label": "ブレークポイントの問題を診断する",
			"customDescriptionGenerator.description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
			"customPropertiesGenerator.description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
			"debug.npm.edit": "package.json を編集",
			"debug.npm.noScripts": "package.json に npm スクリプトがありません",
			"debug.npm.noWorkspaceFolder": "npm スクリプトをデバッグするには、ワークスペース フォルダーを開く必要があります。",
			"debug.npm.parseError": "{0} を読み取ることができませんでした: {1}",
			"debug.npm.script": "npm スクリプトのデバッグ",
			"debug.terminal.attach": "Node.js ターミナル プロセスにアタッチする",
			"debug.terminal.label": "JavaScript デバッグ ターミナル",
			"debug.terminal.program.description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
			"debug.terminal.snippet.label": "デバッグ ターミナルで \"npm start\" を実行する",
			"debug.terminal.toggleAuto": "ターミナル Node.js の自動アタッチの切り替え",
			"debug.terminal.welcome": "[JavaScript デバッグ ターミナル](command:extension.js-debug.createDebuggerTerminal)\r\n\r\nJavaScript デバッグ ターミナルを使用して、コマンド ラインで実行される Node.js プロセスをデバッグできます。",
			"debug.terminal.welcomeWithLink": "[JavaScript デバッグ ターミナル](command:extension.js-debug.createDebuggerTerminal)\r\n\r\nJavaScript デバッグ ターミナルを使用して、コマンド ラインで実行される Node.js プロセスをデバッグできます。\r\n\r\n[デバッグ URL](command:extension.js-debug.debugLink)",
			"debug.unverifiedBreakpoints": "ブレークポイントの一部を設定できませんでした。問題が発生している場合は、[起動構成のトラブルシューング](command:extension.js-debug.createDiagnostics) できます。",
			"debugLink.label": "リンクを開く",
			"edge.address.description": "Web ビューのデバッグ時に、Web ビューがリッスンしている IP アドレスまたはホスト名。設定しない場合、自動的に検出されます。",
			"edge.attach.description": "Microsoft Edge のインスタンスへのアタッチは既にデバッグ モードです",
			"edge.attach.label": "Microsoft Edge: アタッチ",
			"edge.label": "Web アプリ (Edge)",
			"edge.launch.description": "Microsoft Edge を起動して URL をデバッグする",
			"edge.launch.label": "Microsoft Edge: 起動",
			"edge.port.description": "Web ビューのデバッグ時に、Web ビュー デバッガーがリッスンしているポート。設定しない場合、自動的に検出されます。",
			"edge.useWebView.attach.description": "UWP でホストされている Webview2 向けデバッグ パイプの 'pipeName' を含むオブジェクト。これはパイプ \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\" 作成時の \"MyTestSharedMemory\" です",
			"edge.useWebView.launch.description": "'true' の場合、デバッガーはランタイム実行可能ファイルを WebView を含むホスト アプリケーションとして処理するため、ユーザーは WebView スクリプトの内容をデバッグできます。",
			"edit.xhr.breakpoint": "XHR/fetch ブレークポイントの編集",
			"enableContentValidation.description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
			"errors.timeout": "{0}: {1} ミリ秒後にタイムアウト",
			"extension.description": "Node.js プログラムと Chrome をデバッグするための拡張機能。",
			"extensionHost.label": "VS Code 拡張機能の開発",
			"extensionHost.launch.config.name": "拡張機能の起動",
			"extensionHost.launch.debugWebWorkerHost": "Web ワーカー拡張機能ホストにアタッチする必要があるかどうかを構成します。",
			"extensionHost.launch.debugWebviews": "起動した VS Code インスタンスで Web ビューへのアタッチを試行するかどうかを構成します。これはデスクトップの VS Code でのみ機能します。",
			"extensionHost.launch.env.description": "拡張機能ホストに渡される環境変数。",
			"extensionHost.launch.rendererDebugOptions": "レンダラー プロセスにアタッチするときに使用される Chrome の起動オプション ('debugWebviews' または 'debugWebWorkerHost' を使用)。",
			"extensionHost.launch.runtimeExecutable.description": "VS Code への絶対パス。",
			"extensionHost.launch.stopOnEntry.description": "起動後に拡張機能ホストを自動的に停止します。",
			"extensionHost.launch.testConfiguration": "[テスト CLI](https://code.visualstudio.com/api/working-with-extensions/testing-extension#quick-setup-the-test-cli) のテスト構成ファイルへのパス。",
			"extensionHost.launch.testConfigurationLabel": "ファイルから実行する単一の構成。指定しない場合は、選択するように求められる場合があります。",
			"extensionHost.snippet.launch.description": "デバッグ モードで VS Code 拡張機能を起動します",
			"extensionHost.snippet.launch.label": "VS Code 拡張機能の開発",
			"getDiagnosticLogs.label": "診断 JS デバッグ ログの保存",
			"longPredictionWarning.disable": "今後は表示しない",
			"longPredictionWarning.message": "ブレークポイントの構成に時間がかかっています。launch.json で 'outFiles' を更新することによって、スピードアップさせることができます。",
			"longPredictionWarning.noFolder": "開いているワークスペース フォルダーがありません。",
			"longPredictionWarning.open": "launch.json を開く",
			"node.address.description": "デバッグするプロセスの TCP/IP アドレス。既定値は 'localhost' です。",
			"node.attach.attachExistingChildren.description": "生成済みの子プロセスにアタッチを試行するかどうか。",
			"node.attach.attachSpawnedProcesses.description": "生成された子を追跡するために、アタッチされたプロセスで環境変数を設定するかどうか。",
			"node.attach.config.name": "アタッチ",
			"node.attach.continueOnAttach": "true の場合、`--inspect-brk`を待機中の起動済みのプログラムを自動的に再開します",
			"node.attach.processId.description": "アタッチするプロセスの ID。",
			"node.attach.restart.description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
			"node.attachSimplePort.description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
			"node.console.title": "Node デバッグ コンソール",
			"node.disableOptimisticBPs.description": "どのファイルについても、そのファイルのソースマップが読み込まれるまではブレークポイントを設定しないでください。",
			"node.enableTurboSourcemaps.description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
			"node.experimentalNetworking.description": "Node.js で試験的な検査を有効にします。`自動` に設定すると、これをサポートするバージョンの Node.js に対して有効になります。明示的に有効または無効にするには、`オン` または `オフ` に設定できます。",
			"node.killBehavior.description": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
			"node.label": "Node.js",
			"node.launch.args.description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
			"node.launch.autoAttachChildProcesses.description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
			"node.launch.config.name": "起動",
			"node.launch.console.description": "デバッグ ターゲットの起動場所です。",
			"node.launch.console.externalTerminal.description": "ユーザー設定を介して構成できる外部ターミナルです",
			"node.launch.console.integratedTerminal.description": "VS Code の統合ターミナルです",
			"node.launch.console.internalConsole.description": "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
			"node.launch.cwd.description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
			"node.launch.env.description": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
			"node.launch.envFile.description": "環境変数定義が含まれているファイルへの絶対パス。",
			"node.launch.logging": "ログ構成",
			"node.launch.logging.cdp": "Chrome DevTools Protocol メッセージのログ ファイルへのパス",
			"node.launch.logging.dap": "デバッグ アダプター プロトコル メッセージのログ ファイルへのパス",
			"node.launch.outputCapture.description": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
			"node.launch.program.description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
			"node.launch.restart.description": "ゼロ以外の終了コードでプログラムが終了した場合は、プログラムを再起動してみてください。",
			"node.launch.runtimeArgs.description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
			"node.launch.runtimeExecutable.description": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
			"node.launch.runtimeSourcemapPausePatterns": "エントリポイント ブレークポイントを手動で挿入するパターンの一覧。これは、[Serverless Framework を使用する場合](https://github.com/microsoft/vscode-js-debug/issues/492) のように、存在しない、または起動前には検出できないソースマップを使用している場合に、デバッガーでブレークポイントを設定できるようにするために役立ちます。",
			"node.launch.runtimeVersion.description": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
			"node.launch.useWSL.deprecation": "'useWSL' は廃止され、サポートが終了されます。代わりに 'Remote - WSL' 拡張機能を使用します。",
			"node.launch.useWSL.description": "Windows Subsystem for Linux を使用します。",
			"node.localRoot.description": "プログラムの入ったローカル ディレクトリへのパス。",
			"node.pauseForSourceMap.description": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
			"node.port.description": "アタッチ先のデバッグ ポート。既定値は 9229 です。",
			"node.processattach.config.name": "プロセスにアタッチ",
			"node.profileStartup.description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
			"node.remote.host.header.description": "インスペクターの websocket に接続するときに使用する明示的な Host ヘッダー。指定しない場合、ホスト ヘッダーは 'localhost' に設定されます。これは、特定の Host ヘッダーのみを受け入れるプロキシの背後でインスペクターが実行されている場合に便利です。",
			"node.remoteRoot.description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
			"node.resolveSourceMapLocations.description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
			"node.showAsyncStacks.description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
			"node.snippet.attach.description": "実行中のノード プログラムにアタッチします",
			"node.snippet.attach.label": "Node.js: アタッチ",
			"node.snippet.attachProcess.description": "プロセス ピッカーを開いて、アタッチ先の node プロセスを選択します",
			"node.snippet.attachProcess.label": "Node.js: プロセスへのアタッチ",
			"node.snippet.electron.description": "Electron のメイン プロセスをデバッグします",
			"node.snippet.electron.label": "Node.js: Electron (メイン)",
			"node.snippet.gulp.description": "gulp タスクをデバッグします (プロジェクトにローカルの gulp がインストールされていることを確認します)",
			"node.snippet.gulp.label": "Node.js: Gulp タスク",
			"node.snippet.launch.description": "ノード プログラムをデバッグ モードで起動します",
			"node.snippet.launch.label": "Node.js: プログラムの起動",
			"node.snippet.mocha.description": "Mocha テストをデバッグします",
			"node.snippet.mocha.label": "Node.js: Mocha テスト",
			"node.snippet.nodemon.description": "nodemon を使用してソース変更時にデバッグ セッションを再起動します",
			"node.snippet.nodemon.label": "Node.js: nodemon のセットアップ",
			"node.snippet.npm.description": "npm の `debug` スクリプトにより Node プログラムを起動します",
			"node.snippet.npm.label": "Node.js: npm による起動",
			"node.snippet.remoteattach.description": "リモート ノード プログラムのデバッグ ポートにアタッチします",
			"node.snippet.remoteattach.label": "Node.js: リモート プログラムにアタッチする",
			"node.snippet.yo.description": "yeoman ジェネレーターをデバッグします (プロジェクト フォルダーで `npm link` を実行してインストールします)",
			"node.snippet.yo.label": "Node.js: Yeoman ジェネレーター",
			"node.sourceMapPathOverrides.description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
			"node.sourceMaps.description": "JavaScript ソース マップを使用します (存在する場合)。",
			"node.stopOnEntry.description": "起動後、プログラムを自動的に停止します。",
			"node.timeout.description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
			"node.versionHint.description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
			"node.websocket.address.description": "アタッチ先の正確な WebSocket アドレスです。指定しない場合は、アドレスとポートから探索されます。",
			"openEdgeDevTools.label": "ブラウザー Devtools を開く",
			"outFiles.description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
			"pretty.print.script": "デバッグ用の整形出力",
			"profile.start": "パフォーマンス プロファイルの取得",
			"profile.stop": "パフォーマンス プロファイルの停止",
			"remove.eventListener.breakpoint.all": "すべてのイベント リスナー ブレークポイントの削除",
			"remove.xhr.breakpoint": "XHR/fetch ブレークポイントの削除",
			"remove.xhr.breakpoint.all": "すべての XHR/フェッチ ブレークポイントの削除",
			"requestCDPProxy.label": "デバッグ セッションの CDP プロキシを要求する",
			"skipFiles.description": "デバッグ時にスキップするファイルの glob パターンの配列。パターン `<node_internals>/**` はすべての内部 Node.js モジュールに一致します。",
			"smartStep.description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
			"start.with.stop.on.entry": "デバッグを開始して、エントリで停止する",
			"startWithStopOnEntry.label": "デバッグを開始して、エントリで停止する",
			"timeouts.generalDescription": "いくつかのデバッガー操作のタイムアウト。",
			"timeouts.generalDescription.markdown": "いくつかのデバッガー操作のタイムアウト。",
			"timeouts.hoverEvaluation.description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
			"timeouts.sourceMaps.description": "ソース マップ操作に関連するタイムアウト。",
			"timeouts.sourceMaps.sourceMapCumulativePause.description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
			"timeouts.sourceMaps.sourceMapMinPause.description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
			"toggle.skipping.this.file": "このファイルのスキップを切り替え",
			"trace.boolean.description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
			"trace.description": "生成される診断出力を構成します。",
			"trace.logFile.description": "ディスク上のログが書き込まれる場所を構成します。",
			"trace.stdio.description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
			"workspaceTrust.description": "このワークスペースでコードをデバッグするには、信頼が必要です。"
		},
		"bundle": {
			"A profiling session is already running, would you like to stop it and start a new session?": "プロファイル セッションは既に実行中です。これを停止して、新しいセッションを開始しますか?",
			"Add XHR Breakpoint": "XHR ブレークポイントの追加",
			"Add new URL...": "新しい URL を追加...",
			"Adjust glob pattern(s) in the 'outFiles' attribute so that they cover the generated JavaScript.": "生成された JavaScript をカバーするように、 'outFiles' 属性で glob パターンを調整します。",
			"Always": "常に",
			"Always in this Workspace": "常にこのワークスペースに",
			"An error occurred taking a profile from the target.": "ターゲットからのプロファイルの取得でエラーが発生しました。",
			"Animation Frame Fired": "アニメーション フレームの発生",
			"Any XHR or fetch": "任意の XHR またはフェッチ",
			"Assertion failed": "アサーションに失敗しました",
			"Attach to process: '{0}' doesn't look like a process id.": "プロセスにアタッチ: '{0}' はプロセス ID ではないようです。",
			"Attach to process: cannot enable debug mode for process '{0}' ({1}).": "プロセスに添付: プロセス '{0}' ({1}) に対してデバッグ モードを有効にできません。",
			"Attribute 'runtimeVersion' requires Node.js version manager 'nvm-windows' or 'nvs'.": "'runtimeVersion' 属性には Node.js バージョン マネージャー 'nvm-windows' または 'nvs' が必要です。",
			"Attribute 'runtimeVersion' requires Node.js version manager 'nvs', 'nvm' or 'fnm' to be installed.": "属性 'runtimeVersion' を使用するには、Node.js バージョン マネージャー 'nvs'、'nvm' または 'fnm' をインストールする必要があります。",
			"Attribute 'runtimeVersion' with a flavor/architecture requires 'nvs' to be installed.": "フレーバー/アーキテクチャを持つ属性 'runtimeVersion' には、'nvs' をインストールする必要があります。",
			"Bidder Bidding Phase Start": "Bidder の入札フェーズの開始",
			"Bidder Reporting Phase Start": "Bidder レポート フェーズの開始",
			"Block": "ブロック",
			"Break when URL Contains": "URL に含まれている場合に中断する",
			"Breaks on all throw errors, even if they're caught later.": "後でキャッチされた場合でも、すべてのスロー エラーで中断します。",
			"Breaks only on errors or promise rejections that are not handled.": "処理されないエラーまたは promise 拒否の場合にのみ中断します。",
			"Browser connection failed, will retry: {0}": "ブラウザーの接続に失敗しました。再試行します: {0}",
			"CPU Profile": "CPU プロファイル",
			"CPU profile saved as \"{0}\" in your workspace folder": "ワークスペース フォルダーに \"{0}\" として保存された CPU プロファイル",
			"CSP violation \"{0}\"": "CSP 違反 \"{0}\"",
			"Can't find Node.js binary \"{0}\": {1}. Make sure Node.js is installed and in your PATH, or set the \"runtimeExecutable\" in your launch.json": "Node.js バイナリ \"{0}\" が見つかりません: {1}。Node.js がインストールされていて PATH に含まれていることを確認するか、launch.json で \"runtimeExecutable\" を設定してください",
			"Can't load environment variables from file ({0}).": "ファイル ({0}) から環境変数を読み込めません。",
			"Cancel Animation Frame": "アニメーション フレームの取り消し",
			"Cannot connect to the target at {0}: {1}": "{0} でターゲットに接続できません: {1}",
			"Cannot find `{0}` installed in {1}": "{1} にインストールされている '{0}' が見つかりません",
			"Cannot find a program to debug": "デバッグするプログラムが見つかりません",
			"Cannot find test configuration with label `{0}`, got: {1}": "ラベル '{0}' のテスト構成が見つかりません。取得: {1}",
			"Cannot launch debug target in terminal ({0}).": "ターミナル ({0}) でデバッグ ターゲットを起動できません。",
			"Cannot restart asynchronous frame": "非同期フレームを再起動できません",
			"Cannot set an empty value": "空の値は設定できません",
			"Catch Block": "Catch ブロック",
			"Caught Exceptions": "キャッチされた例外",
			"Close AudioContext": "AudioContext を閉じる",
			"Closure": "クロージャ",
			"Closure ({0})": "クロージャ ({0})",
			"Console profile started": "コンソール プロファイルが開始されました",
			"Could not connect to any UWP Webview pipe. Make sure your webview is hosted in debug mode, and that the `pipeName` in your `launch.json` is correct.": "UWP Web ビュー パイプに接続できませんでした。Web ビューがデバッグ モードでホストされていること、および 'launch.json' の 'pipeName' が正しいことを確認してください。",
			"Could not find a location for the variable": "変数の場所が見つかりませんでした",
			"Could not query the provided object": "指定されたオブジェクトを照会できませんでした",
			"Could not read source map for {0}: {1}": "{0} のソース マップを読み取れませんでした: {1}",
			"Could not read {0}: {1}": "{0} を読み取ることができませんでした: {1}",
			"Create AudioContext": "AudioContext の作成",
			"Create canvas context": "キャンバス コンテキストの作成",
			"Debug Anyway": "このままデバッグする",
			"Debug URL": "URL のデバッグ",
			"Details": "詳細",
			"Don't show again": "今後は表示しない",
			"Duration": "期間",
			"Duration of Profile": "プロファイルの期間",
			"Edit XHR Breakpoint": "XHR ブレークポイントの編集",
			"Edit package.json": "package.json を編集",
			"Enables Node.js [auto attach]({0}) debugging in \"{1}\" mode/{Locked='[auto attach]({0})'}the 2nd placeholder is the setting value": "\"{1}\" モードで Node.js [auto attach]({0}) のデバッグを有効にします",
			"Enter a URL or a pattern to match": "照合する URL またはパターンを入力してください",
			"Eval": "Eval",
			"Frame could not be restarted": "フレームを再起動できませんでした",
			"Generates a .cpuprofile file you can open in VS Code or the Edge/Chrome devtools": "VS Code または Edge/Chrome devtools で開くことができる .cpuprofile ファイルを生成します",
			"Generates a .heapprofile file you can open in VS Code or the Edge/Chrome devtools": "VS Code または Edge/Chrome devtools で開くことができる .heapprofile ファイルを生成します",
			"Generates a .heapsnapshot file you can open in VS Code or the Edge/Chrome devtools": "VS Code または Edge/Chrome devtools で開くことができる .heapsnapshot ファイルを生成します",
			"Global": "グローバル",
			"Globals": "グローバル",
			"Got it!": "了解",
			"Heap Profile": "ヒープ プロファイル",
			"Heap Snapshot": "ヒープのスナップショット",
			"How long to run the profile": "プロファイルの実行期間",
			"Ignore": "無視",
			"Installation complete! The extension will be used after you restart your debug session.": "インストールが完了しました。拡張機能は、デバッグ セッションを再起動した後に使用されます。",
			"Installing the DWARF debugger...": "DWARF デバッガーをインストールしています...",
			"Invalid expression": "無効な式",
			"Invalid hit condition \"{0}\". Expected an expression like \"> 42\" or \"== 2\".": "ヒット条件 \"{0}\" が無効です。\"> 42\" または \"== 2\" のような式が必要です。",
			"It looks like a browser is already running from {0}. Please close it before trying to debug, otherwise VS Code may not be able to connect to it.": "ブラウザーは既に {0} から実行されているようです。それを閉じてからデバッグしてみてください。それ以外の場合は、VS Code がそれに接続できない可能性があります。",
			"It looks like your debug session has already ended. Try debugging again, then run the \"Debug: Diagnose Breakpoint Problems\" command.": "デバッグ セッションは既に終了しているようです。もう一度デバッグを試してから、[デバッグ: ブレークポイントの問題の診断] コマンドを実行します。",
			"It's taking a while to configure your breakpoints. You can speed this up by updating the 'outFiles' in your launch.json.": "ブレークポイントの構成に時間がかかっています。launch.json で 'outFiles' を更新することによって、スピードアップさせることができます。",
			"JavaScript Debug Terminal": "JavaScript デバッグ ターミナル",
			"JavaScript debug adapter": "JavaScript デバッグ アダプター",
			"Launch Chrome against localhost": "localhost に対して Chrome を起動する",
			"Launch Edge against localhost": "localhost に対して Edge を起動する",
			"Launch Program": "プログラムの起動",
			"Launch configuration created based on 'package.json'.": "'package.json' を基に起動構成を生成しました。",
			"Launch configuration for '{0}' project created.": "'{0}' プロジェクトのための起動構成を生成しました。",
			"Local": "ローカル",
			"Locals": "ローカル",
			"Lost connection to debugee, reconnecting in {0}ms\r\n": "デバッグ対象への接続が失われました。{0} ミリ秒以内に再接続します\r\n",
			"Manual": "手動",
			"Module": "モジュール",
			"Networking not available.": "ネットワークを利用できません。",
			"Never": "なし",
			"No": "いいえ",
			"No npm scripts found in the workspace folder.": "ワークスペース フォルダーに npm スクリプトが見つかりません。",
			"No npm scripts found in your package.json": "package.json に npm スクリプトがありません",
			"No package.json files found in your workspace.": "ワークスペースに package.json ファイルが見つかりません。",
			"No workspace folder open.": "開いているワークスペース フォルダーがありません。",
			"Node Attributes": "ノード属性",
			"Node.js version '{0}' not installed using version manager {1}.": "Node.js バージョン '{0}' は、バージョン マネージャー {1} を使用してインストールされていません。",
			"Not Now": "今はしない",
			"Only objects can be queried": "照会できるのはオブジェクトのみです",
			"Open launch.json": "launch.json を開く",
			"Output has been truncated to the first {0} characters. Run `{1}` to copy the full output.": "出力は最初の {0} 文字に切り詰められました。'{1}' を実行して完全な出力をコピーします。",
			"Parameters": "パラメーター",
			"Paused": "一時停止",
			"Paused before Out Of Memory exception": "メモリ不足の例外の前に一時停止しました",
			"Paused on Content Security Policy violation instrumentation breakpoint, directive \"{0}\"": "コンテンツ セキュリティ ポリシー違反のインストルメンテーション ブレークポイントで一時停止しました (ディレクティブ \"{0}\")",
			"Paused on DOM breakpoint": "DOM ブレークポイントで一時停止しました",
			"Paused on WebGL Error instrumentation breakpoint, error \"{0}\"": "WebGL エラー インストルメンテーション ブレークポイントで一時停止 (エラー \"{0}\")",
			"Paused on XMLHttpRequest or fetch": "XMLHttpRequest またはフェッチで一時停止しました",
			"Paused on assert": "アサートで一時停止しました",
			"Paused on breakpoint": "ブレークポイントで一時停止しました",
			"Paused on debug() call": "debug() 呼び出しで一時停止しました",
			"Paused on debugger statement": "デバッガー ステートメントで一時停止しました",
			"Paused on event listener": "イベント リスナーで一時停止しました",
			"Paused on event listener breakpoint \"{0}\", triggered on \"{1}\"": "\"{1}\" でトリガーされたイベント リスナー ブレークポイント \"{0}\" で一時停止",
			"Paused on exception": "例外で一時停止しました",
			"Paused on frame entry": "フレーム エントリで一時停止しました",
			"Paused on instrumentation breakpoint": "インストルメンテーション ブレークポイントで一時停止しました",
			"Paused on instrumentation breakpoint \"{0}\"": "インストルメンテーション ブレークポイント \"{0}\" で一時停止",
			"Paused on {0}": "{0} で一時停止",
			"Pick Breakpoint": "ブレークポイントの選択",
			"Pick the node.js process to attach to": "アタッチする node.js プロセスを選択してください",
			"Please enter a number": "数を入力してください",
			"Please enter a number greater than 1": "1 より大きい数値を入力してください",
			"Please stop the running profile before starting a new one.": "新しいプロファイルを開始するのは、実行中のものを停止した後にしてください。",
			"Process picker failed ({0})": "プロセス ピッカーが失敗しました ({0})",
			"Profile duration in seconds, e.g \"5\"": "プロファイルの期間 (秒) (例: \"5\")",
			"Profiling": "プロファイル",
			"Profiling with breakpoints enabled can change the performance of your code. It can be useful to validate your findings with the \"duration\" or \"manual\" termination conditions.": "ブレークポイントを有効にしてプロファイルを実行すると、コードのパフォーマンスが変化することがあります。\"期間\" または \"手動\" の終了条件で結果を検証するとよい場合があります。",
			"Read More": "続きを読む",
			"Request Animation Frame": "アニメーション フレームの要求",
			"Resume AudioContext": "AudioContext の再開",
			"Return value": "戻り値",
			"Run Current File": "現在のファイルの実行",
			"Run Node.js tool": "Node.js ツールの実行",
			"Run Script: {0}": "スクリプトの実行: {0}",
			"Run for a specific amount of time": "特定の期間にわたって実行します",
			"Run until a specific breakpoint is hit": "特定のブレークポイントにヒットするまで実行します",
			"Run until manually stopped": "手動で停止されるまで実行します",
			"Runs a Node.js command-line installed in the workspace node_modules.": "ワークスペース node_modules にインストールされている Node.js コマンドラインを実行します。",
			"Saving": "保存中",
			"Script": "スクリプト",
			"Script Blocked by Content Security Policy": "コンテンツ セキュリティ ポリシーによってスクリプトがブロックされた",
			"Script First Statement": "スクリプトの最初のステートメント",
			"Select a tab": "タブを選択してください",
			"Select a tool to run": "実行するツールの選択",
			"Select current working directory for new terminal": "新しいターミナルの作業ディレクトリを選択してください",
			"Select test configuration to run": "実行するテスト構成を選択する",
			"Select the page where you want to open the devtools": "devtools を開くページを選択します",
			"Select the session you want to inspect:": "検査するセッションを選択します。",
			"Seller Reporting Phase Start": "販売者レポート フェーズの開始",
			"Seller Scoring Phase Start": "販売者スコアリング フェーズの開始",
			"Set innerHTML": "innerHTML の設定",
			"Skipped by skipFiles": "skipFiles によってスキップされました",
			"Skipped by smartStep": "smartStep によりスキップされました",
			"Some breakpoints might not work in your version of Node.js. We recommend upgrading for the latest bug, performance, and security fixes. Details: https://aka.ms/AAcsvqm": "一部のブレークポイントは、お使いのバージョンの Node.js では動作しない可能性があります。最新のバグ、パフォーマンス、セキュリティの修正プログラムのためにアップグレードすることをお勧めします。詳細情報: https://aka.ms/AAcsvqm",
			"Source not a source map": "ソースがソース マップではありません",
			"Source not found": "ソースが見つかりません",
			"Stack frame not found": "スタック フレームが見つかりません",
			"Starting profile...": "プロファイルを開始しています...",
			"Stopping profile...": "プロファイルを停止しています...",
			"Suspend AudioContext": "AudioContext の中断",
			"Syntax error setting breakpoint with condition {0} on line {1}: {2}": "行 {1} での条件 {0} のブレークポイントの設定で構文エラーが発生しました: {2}",
			"Target page not found. You may need to update your \"urlFilter\" to match the page you want to debug.": "ターゲット ページが見つかりません。デバッグするページと一致するように \"urlFilter\" を更新する必要がある場合があります。",
			"The Node version in \"{0}\" is outdated (version {1}), we require at least Node 8.x.": "\"{0}\" にある Node のバージョンが古くなっています (バージョン {1})。少なくとも Node 8.x が必要です。",
			"The URL provided is invalid": "指定された URL が無効です",
			"The browser process exited with code {0} before connecting to the debug server. Make sure the `runtimeExecutable` is configured correctly and that it can run without errors.": "デバッグ サーバーに接続する前に、ブラウザーの処理がコード {0} により終了しました。'runtimeExecutable' が正しく構成されていて、エラーなしで実行できることを確認してください。",
			"The configured `cwd` {0} does not exist.": "構成された 'cwd' {0} が存在しません。",
			"The configured `cwd` {0} is not a folder.": "構成された 'cwd' {0} はフォルダーではありません。",
			"This is a missing file path referenced by a sourcemap. Would you like to debug the compiled version instead?": "これはソースマップで参照されている、不足しているファイル パスです。代わりにコンパイル済みのバージョンをデバッグしますか?",
			"Thread is not paused": "スレッドが一時停止されていません",
			"Thread is not paused on exception": "スレッドが例外で一時停止されていません",
			"Thread not found": "スレッドが見つかりません",
			"Type of profile": "プロファイルの種類",
			"URL contains \"{0}\"": "URL に \"{0}\" が含まれています",
			"UWP webview debugging is not available on your platform.": "UWP WebView デバッグは、お使いのプラットフォームでは使用できません。",
			"Unable to attach to browser": "ブラウザーにアタッチできません",
			"Unable to evaluate": "評価できません",
			"Unable to evaluate on async stack frame": "非同期スタック フレームで評価できません",
			"Unable to find an installation of the browser on your system. Try installing it, or providing an absolute path to the browser in the \"runtimeExecutable\" in your launch.json.": "システムにブラウザーのインストールが見つかりません。インストールするか、launch.json の \"runtimeExecutable\" でブラウザーへの絶対パスを指定してみてください。",
			"Unable to find {0} version {1}. Available auto-discovered versions are: {2}. You can set the \"runtimeExecutable\" in your launch.json to one of these, or provide an absolute path to the browser executable.": "{0} バージョン {1} が見つかりません。自動検出された使用可能なバージョン: {2}。launch.json で \"runtimeExecutable\" をそれらのうちの 1 つに設定するか、またはブラウザーの実行可能ファイルへの絶対パスを指定することができます。",
			"Unable to launch browser: \"{0}\"": "ブラウザーを起動できません: \"{0}\"",
			"Unable to pause": "一時停止できません",
			"Unable to pretty print": "再フォーマットできません",
			"Unable to resume": "再開できません",
			"Unable to retrieve source content": "ソース コンテンツを取得できません",
			"Unable to set variable value": "変数値を設定できません",
			"Unable to step in": "ステップ インできません",
			"Unable to step next": "次のステップに進むことができません",
			"Unable to step out": "ステップ アウトできません",
			"Unbound breakpoint": "バインドされていないブレークポイント",
			"Uncaught Exceptions": "キャッチされない例外",
			"Unknown error": "不明なエラー",
			"VS Code can provide better debugging experience for WebAssembly via \"DWARF Debugging\" extension. Would you like to install it?/\"DWARF Debugging\" is the extension name and should not be localized.": "VS Codeでは、\"DWARF Debugging\" 拡張機能を使用して WebAssembly のデバッグ エクスペリエンスを向上させることができます。インストールしますか?",
			"Variable not found": "変数が見つかりません",
			"Variables not available in async stacks": "非同期スタックでは変数を使用できません",
			"WARNING: Processing source-maps of {0} took longer than {1} ms so we continued execution without waiting for all the breakpoints for the script to be set.": "警告: {0} のソース マップの処理に {1} ミリ秒より長くかかったため、スクリプトのすべてのブレークポイントが設定されるのを待たずに実行を継続しました。",
			"We can't launch a browser in debug mode from here. If you want to debug this webpage, open this workspace from VS Code on your desktop.": "こちらからデバッグ モードでブラウザーを起動することはできません。この Web ページをデバッグする場合は、デスクトップ上の VS Code からこのワークスペースを開いてください。",
			"We can't launch a browser in debug mode from here. Open this workspace in VS Code on your desktop to enable debugging.": "こちらからデバッグ モードでブラウザーを起動することはできません。デバッグを有効にするには、このワークスペースをデスクトップ上の VS Code で開きます。",
			"WebGL Error Fired": "WebGL エラーが発生",
			"WebGL Warning Fired": "WebGL 警告が発生",
			"With Block": "With ブロック",
			"Would you like to save a configuration in your launch.json for easy access later?": "後で簡単にアクセスできるように、launch.json の構成を保存しますか?",
			"XHR/Fetch URLs": "XHR/フェッチ URL",
			"Yes": "はい",
			"You may install the `{}` module via npm for enhanced WebAssembly debugging": "強化された WebAssembly デバッグのために npm を使用して `{}` モジュールをインストールできます",
			"You need to open a workspace folder to debug npm scripts.": "npm スクリプトをデバッグするには、ワークスペース フォルダーを開く必要があります。",
			"You're running an outdated version of Node.js. We recommend upgrading for the latest bug, performance, and security fixes.": "古いバージョンの Node.js を実行しています。最新のバグ、パフォーマンス、およびセキュリティ修正プログラムのために、アップグレードすることをお勧めします。",
			"an old debug session": "古いデバッグ セッション",
			"breakpoint.provisionalBreakpoint": "breakpoint.provisionalBreakpoint",
			"path does not exist": "パスが存在しません",
			"process id: {0} ({1})": "プロセス ID: {0} ({1})",
			"process id: {0}, debug port: {1} ({2})": "プロセス ID: {0}、デバッグ ポート: {1} ({2})",
			"setInterval fired": "setInterval が発生",
			"setTimeout fired": "setTimeout が発生",
			"the configured userDataDir": "構成された userDataDir",
			"{0} (couldn't describe: {1})": "{0} (説明できませんでした: {1})",
			"{0} Click to Stop Profiling": "{0} プロファイルを停止するにはクリックしてください",
			"{0} Click to Stop Profiling ({1} sessions)": "{0} プロファイルを停止するにはクリックしてください ({1} 個のセッション)",
			"{0} Click to Stop Profiling ({1})": "{0} プロファイルを停止するにはクリックしてください ({1})"
		}
	}
}