{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"bundle": {
			"\"{0}\" has fingerprint \"{1}\"": "\"{0}\" のフィンガープリントは \"{1}\" です",
			"$(info) Remote \"{0}\" has no tags.": "$(info) リモート「{0}」にタグがありません。",
			"$(info) This repository has no stashes.": "$(info) このリポジトリにはスタッシュがありません。",
			"$(info) This repository has no tags.": "$(info) このリポジトリにはタグがありません。",
			"A branch named \"{0}\" already exists": "ブランチ名 \"{0}\" は既に存在します",
			"A git repository was found in the parent folders of the workspace or the open file(s). Would you like to open the repository?": "ワークスペースまたは開いているファイルの親フォルダーに Git リポジトリが見つかりました。リポジトリを開きますか?",
			"Absolute paths not supported in \"git.scanRepositories\" setting.": "\"git.scanRepositories\" 設定は絶対パスをサポートしていません。",
			"Add Remote": "リモートを追加する",
			"Add a new remote...": "新しいリモートを追加...",
			"Add remote from URL": "URL からリモートを追加する",
			"Add remote from {0}": "{0} からリモートを追加する",
			"Add to Workspace": "ワークスペースに追加",
			"All Changes ({0} ↔ {1})": "すべての変更 ({0} ↔ {1})",
			"All Repositories": "すべてのリポジトリ",
			"Always": "常時",
			"Always Pull": "常にプル",
			"Always Replace Local Tag(s)": "ローカル タグを常に置き換える",
			"Are you sure you want to DELETE {0} files?\nThis is IRREVERSIBLE!\nThese files will be FOREVER LOST if you proceed.": "{0} 個のファイルを削除しますか?\nこれは元に戻すことができません。\n続行すると、このファイルは完全に失われます。",
			"Are you sure you want to DELETE {0}?\nThis is IRREVERSIBLE!\nThis file will be FOREVER LOST if you proceed.": "{0} を削除しますか?\nこれは元に戻すことはできません。\n続行すると、このファイルは完全に失われます。",
			"Are you sure you want to continue connecting?": "接続を続行しますか?",
			"Are you sure you want to create an empty commit?": "空のコミットを生成しますか?",
			"Are you sure you want to discard ALL changes in {0} files?\nThis is IRREVERSIBLE!\nYour current working set will be FOREVER LOST if you proceed.": "{0} 個のファイルのすべての変更を破棄してもよろしいですか?\nこれは元に戻すことができません。\n続行すると、現在のワーキング セットは完全に失われます。",
			"Are you sure you want to discard changes in {0} files?": "{0} 個のファイルの変更内容を破棄しますか?",
			"Are you sure you want to discard changes in {0}?": "{0} の変更を破棄しますか?",
			"Are you sure you want to drop ALL stashes? There are {0} stashes that will be subject to pruning, and MAY BE IMPOSSIBLE TO RECOVER.": "すべてのスタッシュを削除しますか? 削除の対象となる可能性のある {0} 個のスタッシュがあり、それらは回復できない可能性があります。",
			"Are you sure you want to drop ALL stashes? There is 1 stash that will be subject to pruning, and MAY BE IMPOSSIBLE TO RECOVER.": "すべてのスタッシュを削除しますか? 削除の対象となる可能性のある 1 個のスタッシュがあり、それらは回復できない可能性があります。",
			"Are you sure you want to drop the stash: {0}?": "スタッシュ {0} を削除しますか?",
			"Are you sure you want to restore {0} files?": "{0} 個のファイルを復元しますか?",
			"Are you sure you want to restore {0}?": "{0} を復元しますか?",
			"Are you sure you want to stage {0} files with merge conflicts?": "マージの競合がある {0} 個のファイルをステージしてもよろしいですか?",
			"Are you sure you want to stage {0} with merge conflicts?": "マージの競合がある {0} をステージしてもよろしいですか?",
			"Ask Me Later": "後で通知する",
			"Branch name": "ブランチ名",
			"Branch name needs to match regex: {0}": "ブランチ名は次の正規表現に一致する必要があります: {0}",
			"Can't force push refs to remote. The tip of the remote-tracking branch has been updated since the last checkout. Try running \"Pull\" first to pull the latest changes from the remote branch first.": "プッシュ参照をリモートに強制することはできません。リモート追跡ブランチのヒントは、前回のチェックアウト以降に更新されています。最初に \"プル\" を実行して、リモート ブランチから最新の変更を最初にプルしてみてください。",
			"Can't push refs to remote. Try running \"Pull\" first to integrate your changes.": "参照仕様をリモートにプッシュできません。最初に \"Pull\" を実行して変更を統合してください。",
			"Can't undo because HEAD doesn't point to any commit.": "HEAD が任意のコミットを明示しないため、元に戻すことはできません。",
			"Changes": "変更",
			"Checking Out Branch/Tag...": "ブランチまたはタグをチェックアウトしています...",
			"Checking Out Changes...": "変更をチェックアウトしています...",
			"Checkout Branch/Tag...": "ブランチまたはタグのチェックアウト...",
			"Choose Folder...": "フォルダーを選択...",
			"Choose a folder to clone {0} into": "{0} を複製するフォルダーを選択してください",
			"Choose a repository": "リポジトリの選択",
			"Choose which repository to clone": "プルするリポジトリを選択する",
			"Clear whitespace characters": "空白文字をクリアする",
			"Clone from URL": "リポジトリの URL",
			"Clone from {0}": "{0} から複製",
			"Cloning git repository \"{0}\"...": "Git リポジトリ \"{0}\" を複製しています...",
			"Commit": "コミット",
			"Commit & Push Changes": "変更点をコミットしてプッシュ",
			"Commit & Sync Changes": "変更点をコミットして同期",
			"Commit Anyway": "このままコミット",
			"Commit Changes": "変更点のコミット",
			"Commit Changes on \"{0}\"": "\"{0}\" で変更点をコミットする",
			"Commit Changes to New Branch": "新しいブランチに変更をコミットする",
			"Commit Hash": "コミット ハッシュ",
			"Commit message": "コミット メッセージ",
			"Commit operation was cancelled due to empty commit message.": "コミット メッセージが空だったため、コミット操作がキャンセルされました。",
			"Commit to New Branch & Push Changes": "新しいブランチにコミットして変更をプッシュする",
			"Commit to New Branch & Synchronize Changes": "新しいブランチへのコミットと変更の同期",
			"Commit to a New Branch": "新しいブランチにコミットする",
			"Commits without verification are not allowed, please enable them with the \"git.allowNoVerifyCommit\" setting.": "確認なしのコミットは許可されていません。\"git.allowNoVerifyCommit\" 設定を使用して有効にしてください。",
			"Committing & Pushing Changes...": "変更点をコミットしてプッシュしています...",
			"Committing & Synchronizing Changes...": "コミットをして変更を同期しています...",
			"Committing Changes to New Branch...": "新しいブランチに変更をコミットしています...",
			"Committing Changes...": "変更点をコミットしています...",
			"Committing to New Branch & Pushing Changes...": "新しいブランチにコミットして変更をプッシュしています...",
			"Committing to New Branch & Synchronizing Changes...": "新しいブランチへのコミットと変更を同期しています...",
			"Conflict: Added By Them": "競合: 他者が追加",
			"Conflict: Added By Us": "競合: こちらが追加",
			"Conflict: Both Added": "競合: 両方追加",
			"Conflict: Both Deleted": "競合: 両方削除",
			"Conflict: Both Modified": "競合: 両方変更",
			"Conflict: Deleted By Them": "競合: 他者が削除",
			"Conflict: Deleted By Us": "競合: こちらが削除",
			"Continue Rebase": "リベースを続行する",
			"Continuing Rebase...": "リベースを続行しています...",
			"Copy Commit Hash": "コミット ハッシュのコピー",
			"Could not clone your repository as Git is not installed.": "Git がインストールされていないため、リポジトリをクローンできませんでした。",
			"Create Empty Commit": "空のコミットの作成",
			"Current": "現在のマシン",
			"Current commit message only contains whitespace characters": "現在のコミット メッセージには空白文字のみが含めています",
			"Delete Branch": "ブランチの削除",
			"Delete File": "ファイルを削除",
			"Delete Files": "複数のファイルを削除",
			"Delete file": "ファイルを削除",
			"Deleted": "削除済み",
			"Discard 1 File": "1 つのファイルを破棄",
			"Discard 1 Tracked File": "1 つの追跡ファイルを破棄",
			"Discard All {0} Files": "{0} 個のファイルをすべて破棄",
			"Discard Changes": "変更を破棄",
			"Discard {0} Tracked Files": "{0} 個の追跡ファイルを破棄",
			"Don't Pull": "プルしない",
			"Don't Show Again": "今後は表示しない",
			"Download Git": "Git のダウンロード",
			"Email": "メール",
			"Enables the following features: {0}": "機能の有効化： {0}",
			"Failed to authenticate to git remote.": "Git リモートに対して認証できませんでした。",
			"Failed to authenticate to git remote:\n\n{0}": "Git リモートに対して認証できませんでした:\n\n{0}",
			"File \"{0}\" was deleted by them and modified by us.\n\nWhat would you like to do?": "ファイル \"{0}\" は、他者が削除し、こちらが変更しました。\n\nどのように処理しますか?",
			"File \"{0}\" was deleted by us and modified by them.\n\nWhat would you like to do?": "ファイル \"{0}\" は、こちらが削除し、他者が変更しました。\n\nどのように処理しますか?",
			"Force Checkout": "チェックアウトの強制",
			"Force push is not allowed, please enable it with the \"git.allowForcePush\" setting.": "強制的なプッシュは禁止されています。\"git.allowForcePush\" 設定で有効にしてください。",
			"Git Blame Information": "Git Blame 情報",
			"Git History": "Git 履歴",
			"Git error": "Git エラー",
			"Git local changes (working tree + index)": "Git ローカルの変更 (作業ツリーとインデックス)",
			"Git local changes (working tree)": "Git ローカルの変更 (作業ツリー)",
			"Git not found. Install it or configure it using the \"git.path\" setting.": "Git が見つかりません。Git をインストールするか \"git.path\" 設定でパスを構成してください。",
			"Git repositories were found in the parent folders of the workspace or the open file(s). Would you like to open the repositories?": "ワークスペースまたは開いているファイルの親フォルダーに Git リポジトリが見つかりました。リポジトリを開きますか?",
			"Git: {0}": "Git: {0}",
			"HEAD version of \"{0}\" is not available.": "\"{0}\" の HEAD バージョンは利用できません。",
			"Hard wrap all lines": "すべての行を強制折り返しする",
			"Hard wrap line": "行を強制折り返しする",
			"Ignored": "無視",
			"Incoming": "受信中",
			"Incoming Changes": "受信した変更点",
			"Incoming Changes (added)": "受信した変更点 (追加済み)",
			"Incoming Changes (deleted)": "受信した変更点 (削除済み)",
			"Incoming Changes (modified)": "受信した変更点 (変更済み)",
			"Incoming Changes (renamed)": "受信した変更点 (名前変更済み)",
			"Index Added": "インデックスの追加",
			"Index Copied": "インデックスをコピー",
			"Index Deleted": "削除されたインデックス",
			"Index Modified": "変更されたインデックス",
			"Index Renamed": "インデックスの名前変更",
			"Initialize Repository": "リポジトリの初期化",
			"Intent to Add": "追加する目的",
			"Intent to Rename": "名前を変更する意図",
			"Invalid branch name": "無効なブランチ名",
			"It looks like the current branch \"{0}\" might have been rebased. Are you sure you still want to pull into it?": "現在のブランチ \"{0}\" がリベースされた可能性があります。そこへプルしますか?",
			"It looks like the current branch might have been rebased. Are you sure you still want to pull into it?": "現在のブランチがリベースされた可能性があります。そこへプルしますか?",
			"It's not possible to change the commit message in the middle of a rebase. Please complete the rebase operation and use interactive rebase instead.": "リベースの最中にコミット メッセージは変更できません。リベースの操作を終了してから、代わりに interactive rebase を使用してください。",
			"Keep Our Version": "自分 (Our) を維持する",
			"Keep Their Version": "相手 (Their) を維持する",
			"Learn More": "詳細を表示",
			"Make sure you configure your \"user.name\" and \"user.email\" in git.": "Git の \"user.name\" と \"user.email\" を構成していることを確認してください。",
			"Manage Unsafe Repositories": "安全でないリポジトリの管理",
			"Merge Changes": "変更のマージ",
			"Message": "メッセージ",
			"Message (commit on \"{0}\")": "メッセージ (\"{0}\" でコミット)",
			"Message ({0} to commit on \"{1}\")": "メッセージ ({0} で \"{1}\" にコミット)",
			"Message ({0} to commit)": "メッセージ ({0} でコミット)",
			"Migrate Changes": "変更の移行",
			"Modified": "変更済み",
			"Never": "行わない",
			"No": "いいえ",
			"No rebase in progress.": "進行中のリベースはありません。",
			"Not Committed Yet": "まだコミットされていません",
			"Not Committed Yet (Staged)": "まだコミットされていません (ステージ済み)",
			"OK": "OK",
			"OK, Don't Ask Again": "今後は確認しない",
			"OK, Don't Show Again": "OK、今後は表示しない",
			"Open": "開く",
			"Open Commit": "コミットを開く",
			"Open Comparison": "比較を開く",
			"Open File": "ファイルを開く",
			"Open Git Log": "Git ログを開く",
			"Open Merge": "マージを開く",
			"Open Repositories In Parent Folders": "親フォルダーでリポジトリを開く",
			"Open Repository": "リポジトリを開く",
			"Open in New Window": "新しいウィンドウで開く",
			"Optionally provide a stash message": "必要に応じてスタッシュ メッセージを提示する",
			"Passphrase": "パスフレーズ",
			"Pick a branch to pull from": "プル元のブランチを選択",
			"Pick a provider to publish the branch \"{0}\" to:": "ブランチ \"{0}\" を以下へ発行するプロバイダーを選択する:",
			"Pick a remote to publish the branch \"{0}\" to:": "リモートを選んで、ブランチ \"{0}\" を次の場所に公開します:",
			"Pick a remote to pull the branch from": "リモートを選んで、ブランチを次からプルします",
			"Pick a remote to remove": "削除するリモートを選択",
			"Pick a repository to mark as safe and open": "安全とマークして開くリポジトリを選択してください",
			"Pick a repository to open": "開くリポジトリを選択します。",
			"Pick a repository to reopen": "再度開くリポジトリを選択する",
			"Pick a stash to apply": "適用するスタッシュを選択してください",
			"Pick a stash to drop": "ドロップするスタッシュを選択する",
			"Pick a stash to pop": "ポップするスタッシュを選択する",
			"Pick a stash to view": "表示するスタッシュを選択する",
			"Pick workspace folder to initialize git repo in": "Git リポジトリを初期化するワークスペース フォルダーを選択してください",
			"Please check out a branch to push to a remote.": "リモートにプッシュするブランチをチェックアウトしてください。",
			"Please clean your repository working tree before checkout.": "チェックアウトの前に、リポジトリの作業ツリーを消去してください。",
			"Please provide a commit message": "コミット メッセージを入力してください",
			"Please provide a message to annotate the tag": "注釈付きタグにつけるメッセージを入力してください",
			"Please provide a new branch name": "新しいブランチ名を入力してください",
			"Please provide a remote name": "リモート名を入力してください。",
			"Please provide a tag name": "タグ名を入力してください",
			"Please provide the commit hash": "コミット ハッシュを指定してください",
			"Publish Branch": "ブランチを発行...",
			"Publish Branch \"{0}\"/{Locked=\"Branch\"}Do not translate \"Branch\" as it is a git term": "Branch \"{0}\" の発行",
			"Publish Branch/{Locked=\"Branch\"}Do not translate \"Branch\" as it is a git term": "Branch を発行",
			"Publish to {0}": "{0} に発行する",
			"Publish to...": "以下に発行する...",
			"Publishing Branch \"{0}\".../{Locked=\"Branch\"}Do not translate \"Branch\" as it is a git term": "Branch \"{0}\" を発行しています...",
			"Publishing Branch.../{Locked=\"Branch\"}Do not translate \"Branch\" as it is a git term": "Branch を公開しています...",
			"Pull": "プル",
			"Pull {0} and push {1} commits between {2}/{3}": "{2}/{3} の間で {0} 件のコミットをプルし、{1} 件のコミットをプッシュします",
			"Pull {0} commits from {1}/{2}": "{1}/{2} から {0} 件のコミットをプルします",
			"Push {0} commits to {1}/{2}": "{1}/{2} に {0} 件のコミットをプッシュします",
			"Rebasing": "リベースしています",
			"Regenerate Branch Name": "ブランチ名を再生成する",
			"Remote \"{0}\" already exists.": "リモート \"{0}\" は既に存在します。",
			"Remote branch at {0}": "{0} でのリモート ブランチ",
			"Remote name": "リモート名",
			"Remote name format invalid": "リモート名の形式が無効です",
			"Remote tag at {0}": "{0} のリモート タグ",
			"Reopen Closed Repositories": "閉じたリポジトリを再度開く",
			"Replace Local Tag(s)": "ローカル タグの置換",
			"Restore file": "ファイルを復元",
			"Restore files": "複数のファイルを復元",
			"Save All & Commit Changes": "すべて保存して変更をコミットする",
			"Save All & Stash": "すべてを保存してスタッシュする",
			"Select a branch or tag to checkout": "チェックアウトするブランチまたはタグを選択します",
			"Select a branch or tag to merge from": "マージ元のブランチまたはタグを選択する",
			"Select a branch to checkout in detached mode": "デタッチ モードでチェックアウトするブランチを選択します",
			"Select a branch to delete": "削除するブランチの選択",
			"Select a branch to rebase onto": "リベース先のブランチを選択",
			"Select a ref to create the branch from": "ブランチの作成元 ref を選択",
			"Select a remote tag to delete": "削除するリモート タグを選択する",
			"Select a remote to delete a tag from": "タグを削除するリモートを選択します",
			"Select a remote to fetch": "リモートを選択して取得",
			"Select a tag to delete": "削除するタグを選択する",
			"Select as Repository Destination": "リポジトリの宛先として選択",
			"Show Changes": "変更の表示",
			"Show Command Output": "コマンド出力を表示する",
			"Staged Changes": "ステージされている変更",
			"Stash & Checkout": "スタッシュしてチェックアウト",
			"Stash Anyway": "このままスタッシュ",
			"Stash message": "スタッシュ メッセージ",
			"Stashed Changes": "一時退避された変更",
			"Successfully pushed.": "正常にプッシュされました。",
			"Synchronize Changes": "変更の同期",
			"Synchronizing Changes...": "変更を同期しています...",
			"Syncing. Cancelling may cause serious damages to the repository": "同期中です。キャンセルすると、リポジトリに重大な損傷を与える可能性があります",
			"Tag at {0}": "{0} のタグ",
			"Tag name": "タグ名",
			"The \"{0}\" repository has {1} submodules which won't be opened automatically. You can still open each one individually by opening a file within.": "\"{0}\" リポジトリに {1} 個のサブモジュールがあり、自動では開かれません。 ファイルを開くことで、それぞれを個別に開くことができます。",
			"The branch \"{0}\" has no remote branch. Would you like to publish this branch?": "\"{0}\" ブランチにリモート ブランチはありません。このブランチを公開しますか?",
			"The branch \"{0}\" is not fully merged. Delete anyway?": "ブランチ '{0}' はマージされていません。それでも削除しますか?",
			"The changes are already present in the current branch.": "変更は現在のブランチに既に存在します。",
			"The current branch is not published to the remote. Would you like to publish it to access your changes elsewhere?": "現在のブランチはリモートに発行されません。他の場所の変更にアクセスするために公開しますか?",
			"The following file has unsaved changes which won't be included in the commit if you proceed: {0}.\n\nWould you like to save it before committing?": "次のファイルには保存されていない変更があり、続行するとコミットに含まれません: {0}。\n\nコミットする前に保存しますか?",
			"The following file has unsaved changes which won't be included in the stash if you proceed: {0}.\n\nWould you like to save it before stashing?": "次のファイルには保存されていない変更があり、続行するとスタッシュに含められません: {0}。\n\nスタッシュする前に保存しますか?",
			"The following untracked file will be DELETED FROM DISK if discarded: {0}.": "破棄すると次の未追跡ファイルがディスクから削除されます: {0}。",
			"The git repositories in the current folder are potentially unsafe as the folders are owned by someone other than the current user.": "現在のフォルダー内の Git リポジトリは、現在のユーザー以外のユーザーによって所有されているため、安全でない可能性があります。",
			"The git repository at \"{0}\" has too many active changes, only a subset of Git features will be enabled.": "\"{0}\" のGit リポジトリにアクティブな変更が多いため、 Git 機能の一部のみが有効になります。",
			"The git repository in the current folder is potentially unsafe as the folder is owned by someone other than the current user.": "現在のフォルダー内の Git リポジトリは、現在のユーザー以外のユーザーによって所有されているため、安全でない可能性があります。",
			"The last commit was a merge commit. Are you sure you want to undo it?": "最後のコミットはマージ コミットでした。元に戻しますか?",
			"The new branch will be \"{0}\"": "新しいブランチは \"{0}\" になります",
			"The repository does not have any changes.": "リポジトリには変更はありません。",
			"The repository does not have any commits. Please make an initial commit before creating a stash.": "リポジトリにコミットがありません。一時退避を作成する前に、初期コミットを行ってください。",
			"The repository does not have any staged changes.": "リポジトリには段階的な変更はありません。",
			"The repository does not have any untracked changes.": "リポジトリには追跡されていない変更はありません。",
			"The selection range does not contain any changes.": "選択範囲に変更が含まれていません。",
			"There are known issues with the installed Git \"{0}\". Please update to Git >= 2.27 for the git features to work correctly.": "インストールされている Git \"{0}\" には既知の問題があります。Git 機能を正常に動作させるために、Git を 2.27 以上に更新してください。",
			"There are merge conflicts. Resolve them before committing.": "マージの競合があります。コミットする前にこれを解決してください。",
			"There are no available repositories": "利用可能なリポジトリがありません",
			"There are no changes to commit.": "コミットする必要のある変更はありません。",
			"There are no changes to stash.": "スタッシュする変更がありません。",
			"There are no staged changes to commit.\n\nWould you like to stage all your changes and commit them directly?": "ステージされている変更がなく、コミットできません。\n\nすべての変更をステージして、直接コミットしますか?",
			"There are no staged changes to stash.": "コミットする必要のあるステージされている変更はありません。",
			"There are no stashes in the repository.": "リポジトリ内にスタッシュはありません。",
			"There are {0} unsaved files.\n\nWould you like to save them before committing?": "{0} 個の保存されていないファイルがあります。\n\nコミット前に保存しますか?",
			"There are {0} unsaved files.\n\nWould you like to save them before stashing?": "{0} 個の保存されていないファイルがあります。\n\nスタッシュする前に保存しますか?",
			"There are {0} untracked files which will be DELETED FROM DISK if discarded.": "破棄すると {0} 個の未追跡ファイルがディスクから削除されます。",
			"There were merge conflicts while applying the stash.": "スタッシュを適用している間に、マージの競合がありました。",
			"There were merge conflicts while cherry picking the changes. Resolve the conflicts before committing them.": "変更のチェリー ピック中にマージの競合が発生しました。競合を解決してからコミットしてください。",
			"This action will pull and push commits from and to \"{0}/{1}\".": "このアクションは、\"{0}/{1}\" との間でコミットをプルおよびプッシュします。",
			"This repository has no remotes configured to fetch from.": "リポジトリには、フェッチ元として構成されているリモートがありません。",
			"This will DELETE {0} untracked files!\nThis is IRREVERSIBLE!\nThese files will be FOREVER LOST.": "{0} 個の追跡されていないファイルが削除されます。\n元に戻すことはできません。\nこれらのファイルは完全に失われます。",
			"This will create a Git repository in \"{0}\". Are you sure you want to continue?": "\"{0}\" に Git リポジトリを作成します。続行してもよろしいですか?",
			"Too many changes were detected. Only the first {0} changes will be shown below.": "検出された変更が多すぎます。最初の {0} の変更のみが下に表示されます。",
			"Type Changed": "変更された型",
			"Unable to pull from remote repository due to conflicting tag(s): {0}. Would you like to resolve the conflict by replacing the local tag(s)?": "タグが競合しているため、リモート リポジトリからプルできません: {0}。ローカル タグを置き換えて競合を解決しますか?",
			"Uncommitted Changes": "コミットされていない変更",
			"Undo merge commit": "マージ コミットの取り消し",
			"Untracked": "追跡対象外",
			"Untracked Changes": "追跡対象外の変更",
			"Update Git": "Git の更新",
			"View Commit": "コミットを表示",
			"Would you like to add \"{0}\" to .gitignore?": ".gitignore に \"{0}\" を追加しますか?",
			"Would you like to open the cloned repository, or add it to the current workspace?": "複製したリポジトリを開きますか? または現在のワークスペースに追加しますか?",
			"Would you like to open the cloned repository?": "クローンしたリポジトリを開きますか?",
			"Would you like to open the initialized repository, or add it to the current workspace?": "初期化済みのリポジトリを開きますか? または現在のワークスペースへ追加しますか?",
			"Would you like to open the initialized repository?": "初期化済みのリポジトリを開きますか?",
			"Would you like {0} to [periodically run \"git fetch\"]({1})?": "{0}に定期的に[「git fetch」を実行する]({1}) にしますか?",
			"Yes": "はい",
			"Yes, Don't Show Again": "はい、今後は表示しません",
			"You": "自分",
			"You are about to commit your changes without verification, this skips pre-commit hooks and can be undesirable.\n\nAre you sure to continue?": "確認せずに変更をコミットしようとしています。これは、コミット前のフックをスキップするため、望ましくない場合があります。\n\n続行しますか?",
			"You are about to force push your changes, this can be destructive and could inadvertently overwrite changes made by others.\n\nAre you sure to continue?": "変更の強制プッシュを行おうとしていますが、これは破壊的なことがあり、他人の変更を誤って上書きする可能性があります。\n\n続行しますか?",
			"You are trying to commit to a protected branch and you might not have permission to push your commits to the remote.\n\nHow would you like to proceed?": "保護されたブランチにコミットしようとしていますが、コミットをリモートにプッシュするアクセス許可がない可能性があります。\n\n続行しますか?",
			"You seem to have git \"{0}\" installed. Code works best with git >= 2": "Git \"{0}\" がインストールされているようです。Code は Git 2 以上で最適に動作します",
			"Your local changes would be overwritten by checkout.": "ローカルの変更は、チェックアウトによって上書きされます。",
			"Your repository has no remotes configured to publish to.": "リポジトリには、発行先として構成されているリモートがありません。",
			"Your repository has no remotes configured to pull from.": "リポジトリには、プル元として構成されているリモートがありません。",
			"Your repository has no remotes configured to push to.": "リポジトリには、プッシュ先として構成されているリモートがありません。",
			"Your repository has no remotes.": "リポジトリにリモートが含まれていません。",
			"[main] Log level: {0}": "[main] ログ レベル: {0}",
			"[main] Skipped found git in: \"{0}\"": "[main] Git のスキップが検出されました: \"{0}\"",
			"[main] Using git \"{0}\" from \"{1}\"": "[main] \"{1}\" から Git \"{0}\" を使用しています",
			"[main] Validating found git in: \"{0}\"": "[main] Git の検証が検出されました: \"{0}\"",
			"branches": "ブランチ",
			"in {0}": "{0} 後",
			"no": "no",
			"now": "今",
			"remote branches": "リモート ブランチ",
			"tags": "タグ",
			"yes": "はい",
			"{0}\n\nThis is IRREVERSIBLE, your current working set will be FOREVER LOST.": "{0}\n\nこの変更は元に戻すことはできません。現在のワーキング セットは永久に失われます。",
			"{0} (Deleted)": "{0} (削除済み)",
			"{0} (Index)": "{0} (インデックス)",
			"{0} (Intent to add)": "{0} (追加する意図)",
			"{0} (Ours)": "{0} (自分たちの)",
			"{0} (Theirs)": "{0} (他のユーザー)",
			"{0} (Type changed)": "{0} (変更された型)",
			"{0} (Untracked)": "{0} (未追跡)",
			"{0} (Working Tree)": "{0} (作業ツリー)",
			"{0} ({1})": "{0} ({1})",
			"{0} ({1}) ↔ {0} ({2})": "{0} ({1}) ↔ {0} ({2})",
			"{0} Checkout detached...": "{0} チェックアウトがデタッチされました...",
			"{0} Commit": "{0} コミット",
			"{0} Commit & Push": "{0} コミットしてプッシュ",
			"{0} Commit & Sync": "{0} コミットして同期",
			"{0} Commit (Amend)": "{0} コミット (修正)",
			"{0} Continue": "{0} 続行",
			"{0} Create new branch from...": "{0} 新しいブランチを以下から作成...",
			"{0} Create new branch...": "{0} 新しいブランチの作成...",
			"{0} Fetch all remotes": "{0} すべてのリモートを取得",
			"{0} Publish Branch/{Locked=\"Branch\"}Do not translate \"Branch\" as it is a git term": "{0} Branch の発行",
			"{0} Sync Changes{1}{2}": "{0}変更の同期{1}{2}",
			"{0} characters over {1} in current line": "現在の行で {1} から {0} 文字オーバー",
			"{0} day": "{0} 日",
			"{0} day ago": "{0} 日前",
			"{0} days": "{0} 日",
			"{0} days ago": "{0} 日前",
			"{0} hour": "{0} 時間",
			"{0} hour ago": "{0} 時間前",
			"{0} hours": "{0} 時間",
			"{0} hours ago": "{0} 時間前",
			"{0} hr": "{0} 時間",
			"{0} hr ago": "{0} 時間前",
			"{0} hrs": "{0} 時間",
			"{0} hrs ago": "{0} 時間前",
			"{0} min": "{0} 分",
			"{0} min ago": "{0} 分前",
			"{0} mins": "{0} 分",
			"{0} mins ago": "{0} 分前",
			"{0} minute": "{0} 分",
			"{0} minute ago": "{0} 分前",
			"{0} minutes": "{0} 分",
			"{0} minutes ago": "{0} 分前",
			"{0} mo": "{0} か月",
			"{0} mo ago": "{0} か月前",
			"{0} month": "{0} か月",
			"{0} month ago": "{0} か月前",
			"{0} months": "{0} か月",
			"{0} months ago": "{0} か月前",
			"{0} mos": "{0} か月",
			"{0} mos ago": "{0} か月前",
			"{0} sec": "{0} 秒",
			"{0} sec ago": "{0} 秒前",
			"{0} second": "{0} 秒",
			"{0} second ago": "{0} 秒前",
			"{0} seconds": "{0} 秒",
			"{0} seconds ago": "{0} 秒前",
			"{0} secs": "{0} 秒",
			"{0} secs ago": "{0} 秒前",
			"{0} week": "{0} 週間",
			"{0} week ago": "{0} 週間前",
			"{0} weeks": "{0} 週間",
			"{0} weeks ago": "{0} 週間前",
			"{0} wk": "{0} 週間",
			"{0} wk ago": "{0} 週間前",
			"{0} wks": "{0} 週間",
			"{0} wks ago": "{0} 週間前",
			"{0} year": "{0} 年",
			"{0} year ago": "{0} 年前",
			"{0} years": "{0} 年",
			"{0} years ago": "{0} 年前",
			"{0} yr": "{0} 年",
			"{0} yr ago": "{0} 年前",
			"{0} yrs": "{0} 年",
			"{0} yrs ago": "{0} 年前",
			"{0} ↔ {1}": "{0} ↔ {1}"
		},
		"package": {
			"colors.added": "追加したリソースの配色。",
			"colors.blameEditorDecoration": "blame エディターの装飾色。",
			"colors.conflict": "リソースが競合する場合の配色",
			"colors.deleted": "リソースを検出した場合の配色",
			"colors.ignored": "リソースを無視する場合の配色",
			"colors.incomingAdded": "追加された受信リソースの配色。",
			"colors.incomingDeleted": "削除された受信リソースの配色。",
			"colors.incomingModified": "変更された受信リソースの配色。",
			"colors.incomingRenamed": "名前が変更された受信リソースの配色。",
			"colors.modified": "リソースを改変した場合の配色",
			"colors.renamed": "名前変更またはコピーされたリソースの色。",
			"colors.stageDeleted": "ステージングされた削除済みリソースの色。",
			"colors.stageModified": "ステージングされた変更済みリソースの色。",
			"colors.submodule": "サブモジュールの配色。",
			"colors.untracked": "リソースを追跡しない場合の配色",
			"command.addRemote": "リモートの追加...",
			"command.api.getRemoteSources": "リモート ソースの取得",
			"command.api.getRepositories": "リポジトリの取得",
			"command.api.getRepositoryState": "リポジトリ状態の取得",
			"command.branch": "ブランチの作成...",
			"command.branchFrom": "ブランチの作成元...",
			"command.checkout": "チェックアウト先...",
			"command.checkoutDetached": "チェックアウト先 (デタッチ済み)...",
			"command.checkoutRef": "チェックアウト",
			"command.checkoutRefDetached": "チェックアウト (デタッチ済み)",
			"command.cherryPick": "チェリーピック...",
			"command.cherryPickAbort": "チェリー ピックの中止",
			"command.cherryPickRef": "チェリーピック",
			"command.clean": "変更を破棄",
			"command.cleanAll": "すべての変更を破棄",
			"command.cleanAllTracked": "変更履歴をすべて破棄",
			"command.cleanAllUntracked": "追跡対象外のすべての変更を破棄",
			"command.clone": "クローン",
			"command.cloneRecursive": "複製 (再帰)",
			"command.close": "リポジトリを閉じる",
			"command.closeAllDiffEditors": "すべての差分エディターを閉じる",
			"command.closeAllUnmodifiedEditors": "未変更のエディターをすべて閉じる",
			"command.closeOtherRepositories": "その他のリポジトリを閉じる",
			"command.commit": "コミット",
			"command.commitAll": "すべてコミット",
			"command.commitAllAmend": "すべてコミット (修正)",
			"command.commitAllAmendNoVerify": "すべてコミット (修正、確認なし)",
			"command.commitAllNoVerify": "すべてコミット (確認なし)",
			"command.commitAllSigned": "すべてコミット (Signed Off)",
			"command.commitAllSignedNoVerify": "すべてコミット (サインオフ、確認なし)",
			"command.commitAmend": "コミット (修正)",
			"command.commitAmendNoVerify": "コミット (修正、確認なし)",
			"command.commitEmpty": "空のコミット",
			"command.commitEmptyNoVerify": "空のコミット (確認なし)",
			"command.commitMessageAccept": "コミット メッセージを受け入れる",
			"command.commitMessageDiscard": "コミット メッセージの破棄",
			"command.commitNoVerify": "コミット (確認なし)",
			"command.commitSigned": "コミット (サインオフ)",
			"command.commitSignedNoVerify": "コミット (サインオフ、確認なし)",
			"command.commitStaged": "ステージング済みをコミット",
			"command.commitStagedAmend": "ステージング済をコミット (修正)",
			"command.commitStagedAmendNoVerify": "ステージング済みをコミット (修正、確認なし)",
			"command.commitStagedNoVerify": "ステージング済みをコミット (確認なし)",
			"command.commitStagedSigned": "コミットしてステージング (サインオフ)",
			"command.commitStagedSignedNoVerify": "ステージング済みをコミット (サインオフ、確認なし)",
			"command.continueInLocalClone": "リポジトリをローカルにクローンしてデスクトップで開く...",
			"command.continueInLocalClone.qualifiedName": "新しいローカル クローンで作業を続ける",
			"command.createTag": "タグの作成...",
			"command.deleteBranch": "ブランチの削除...",
			"command.deleteRemoteTag": "リモート タグの削除...",
			"command.deleteTag": "タグの削除...",
			"command.fetch": "フェッチ",
			"command.fetchAll": "すべてのリモートからフェッチ",
			"command.fetchPrune": "フェッチ (Prune)",
			"command.git.acceptMerge": "マージの完了",
			"command.git.openMergeEditor": "マージ エディターで解決",
			"command.git.runGitMerge": "Git とのコンピューティングの競合",
			"command.git.runGitMergeDiff3": "Git とのコンピューティングの競合 (Diff3)",
			"command.ignore": ".gitignore に追加",
			"command.init": "リポジトリの初期化",
			"command.manageUnsafeRepositories": "安全でないリポジトリの管理",
			"command.merge": "マージ...",
			"command.mergeAbort": "マージの中止",
			"command.openAllChanges": "すべての変更を開く",
			"command.openChange": "変更を開く",
			"command.openFile": "ファイルを開く",
			"command.openHEADFile": "ファイル (HEAD) を開く",
			"command.openRepositoriesInParentFolders": "親フォルダーでリポジトリを開く",
			"command.openRepository": "リポジトリを開く",
			"command.publish": "ブランチを発行...",
			"command.pull": "プル",
			"command.pullFrom": "指定元からプル...",
			"command.pullRebase": "プル (リベース)",
			"command.push": "プッシュ",
			"command.pushFollowTags": "プッシュ (タグをフォロー)",
			"command.pushFollowTagsForce": "プッシュ (タグをフォロー、強制)",
			"command.pushForce": "プッシュ (強制)",
			"command.pushTags": "タグをプッシュ",
			"command.pushTo": "プッシュ先...",
			"command.pushToForce": "プッシュ先... (強制)",
			"command.rebase": "ブランチのリベース...",
			"command.rebaseAbort": "リベースを中止する",
			"command.refresh": "最新の情報に更新",
			"command.removeRemote": "リモートの削除",
			"command.rename": "名前の変更",
			"command.renameBranch": "ブランチ名の変更...",
			"command.reopenClosedRepositories": "閉じたリポジトリを再度開く...",
			"command.restoreCommitTemplate": "コミット テンプレートを復元する",
			"command.revealFileInOS.linux": "含まれているフォルダーを開く",
			"command.revealFileInOS.mac": "Finder で表示します",
			"command.revealFileInOS.windows": "エクスプローラーで表示する",
			"command.revealInExplorer": "エクスプローラー ビューで表示",
			"command.revertChange": "変更を元に戻す",
			"command.revertSelectedRanges": "選択範囲を元に戻す",
			"command.showOutput": "Git 出力の表示",
			"command.stage": "変更をステージ",
			"command.stageAll": "すべての変更をステージ",
			"command.stageAllMerge": "すべてのマージ変更をステージする",
			"command.stageAllTracked": "すべての変更履歴をステージングする",
			"command.stageAllUntracked": "すべての追跡対象外の変更のステージング",
			"command.stageBlock": "ステージ ブロック",
			"command.stageChange": "変更のステージング",
			"command.stageSelectedRanges": "選択した範囲をステージする",
			"command.stageSelection": "ステージの選択",
			"command.stash": "スタッシュ",
			"command.stashApply": "スタッシュを適用...",
			"command.stashApplyEditor": "スタッシュを適用",
			"command.stashApplyLatest": "最新のスタッシュを適用",
			"command.stashDrop": "スタッシュを削除する...",
			"command.stashDropAll": "すべてのスタッシュを削除...",
			"command.stashDropEditor": "スタッシュを削除する",
			"command.stashIncludeUntracked": "スタッシュ (未追跡ファイルを含む)",
			"command.stashPop": "スタッシュをポップする...",
			"command.stashPopEditor": "スタッシュをポップ",
			"command.stashPopLatest": "最新のスタッシュをポップ",
			"command.stashStaged": "スタッシュ (ステージング済み)",
			"command.stashView": "スタッシュの表示...",
			"command.sync": "同期",
			"command.syncRebase": "同期 (Rebase)",
			"command.timelineCompareWithSelected": "選択項目と比較",
			"command.timelineCopyCommitId": "コミット ID のコピー",
			"command.timelineCopyCommitMessage": "コミット メッセージのコピー",
			"command.timelineOpenDiff": "変更を開く",
			"command.timelineSelectForCompare": "比較対象の選択",
			"command.undoCommit": "前回のコミットを元に戻す",
			"command.unstage": "変更のステージング解除",
			"command.unstageAll": "すべての変更のステージング解除",
			"command.unstageSelectedRanges": "選択した範囲のステージを解除",
			"command.viewAllChanges": "すべての変更を表示",
			"command.viewChanges": "変更の表示",
			"command.viewCommit": "コミットを表示",
			"command.viewStagedChanges": "ステージされている変更の表示",
			"command.viewUntrackedChanges": "追跡されていない変更の表示",
			"config.allowForcePush": "強制的なプッシュ (--force-with-lease の有無にかかわらず) を有効にするかどうかを制御します。",
			"config.allowNoVerifyCommit": "pre-commit と commit-msg フックを実行しないコミットを許可するかどうかを制御します。",
			"config.alwaysShowStagedChangesResourceGroup": "ステージ済み変更のリソース グループを常に表示します。",
			"config.alwaysSignOff": "すべてのコミットのサインオフ フラグを制御します。",
			"config.autoRepositoryDetection": "レポジトリを自動的に検出するかどうかを構成します。",
			"config.autoRepositoryDetection.false": "リポジトリの自動的なスキャンを無効にします。",
			"config.autoRepositoryDetection.openEditors": "開いているファイルの親フォルダーをスキャンします。",
			"config.autoRepositoryDetection.subFolders": "現在開いているフォルダーのサブフォルダーをスキャンします。",
			"config.autoRepositoryDetection.true": "現在開いているフォルダーのサブフォルダーと、開いているファイルの親フォルダーの両方をスキャンします。",
			"config.autoStash": "プルする前にすべての変更をスタッシュし、プル成功後に復元します。",
			"config.autofetch": "true に設定すると、現在の Git リポジトリの既定のリモートからコミットが自動的にフェッチされます。[すべて] に設定すると、すべてのリモートからフェッチされます。",
			"config.autofetchPeriod": "`#git.autofetch#` が有効な場合の git の自動フェッチ間隔 (秒単位)。",
			"config.autorefresh": "自動更新の有効/無効。",
			"config.blameEditorDecoration.enabled": "エディターの装飾を使用して、エディターに blame の情報を表示するかどうかを制御します。",
			"config.blameEditorDecoration.template": "blame 情報エディターの装飾用のテンプレート。サポート対象の変数:\r\n\r\n* `hash`: コミット ハッシュ\r\n\r\n* `hashShort`: コミット ハッシュの最初の 8 文字\r\n\r\n* `subject`: コミット メッセージの最初の行\r\n\r\n* `authorName`: 作成者名\r\n\r\n* `authorEmail`: 作成者のメール\r\n\r\n* `authorDate`: 作成日\r\n\r\n* `authorDateAgo`: 現在と作成日の間の時間差\r\n\r\n",
			"config.blameStatusBarItem.enabled": "ステータス バーに blame の情報を表示するかどうかを制御します。",
			"config.blameStatusBarItem.template": "blame 情報のステータス バー項目のテンプレート。サポート対象の変数:\r\n\r\n* `hash`: コミット ハッシュ\r\n\r\n* `hashShort`: コミット ハッシュの最初の 8 文字\r\n\r\n* `subject`: コミット メッセージの最初の行\r\n\r\n* `authorName`: 作成者名\r\n\r\n* `authorEmail`: 作成者のメール\r\n\r\n* `authorDate`: 作成日\r\n\r\n* `authorDateAgo`: 現在と作成日の間の時間差\r\n\r\n",
			"config.branchPrefix": "新しいブランチを作成するときに使用されるプレフィックス。",
			"config.branchProtection": "保護されたブランチのリスト。既定では、変更が保護されたブランチにコミットされる前にプロンプトが表示されます。プロンプトは、'#git.branchProtectionPrompt#' 設定を使用して制御できます。",
			"config.branchProtectionPrompt": "保護されたブランチに変更をコミットする前にプロンプトを表示するかどうかを制御します。",
			"config.branchProtectionPrompt.alwaysCommit": "常に保護されたブランチに変更をコミットします。",
			"config.branchProtectionPrompt.alwaysCommitToNewBranch": "新しいブランチへの変更をコミットします。",
			"config.branchProtectionPrompt.alwaysPrompt": "変更が保護されたブランチにコミットされる前に、常にプロンプトを表示します。",
			"config.branchRandomNameDictionary": "ランダムに生成されたブランチ名に使用されるディクショナリの一覧。各値は、ブランチ名のセグメントを生成するために使用されるディクショナリを表します。サポートされている辞書: `adjectives`, `animals`, `colors`, `numbers`。",
			"config.branchRandomNameDictionary.adjectives": "ランダムな形容詞",
			"config.branchRandomNameDictionary.animals": "ランダムな動物の名前",
			"config.branchRandomNameDictionary.colors": "ランダムな色の名前",
			"config.branchRandomNameDictionary.numbers": "100 と 999 の間のランダムな数",
			"config.branchRandomNameEnable": "新しいブランチの作成時にランダムな名前を生成するかどうかを制御します。",
			"config.branchSortOrder": "ブランチの並べ替え順序を制御します。",
			"config.branchValidationRegex": "新しいブランチ名を検証するための正規表現。",
			"config.branchWhitespaceChar": "新しいブランチ名の空白文字を置き換え、ランダムに生成されたブランチ名のセグメントを区切る文字。",
			"config.checkoutType": "'Checkout to...' を実行するときに一覧表示される Git 参照の種類を制御します。",
			"config.checkoutType.local": "ローカル ブランチ",
			"config.checkoutType.remote": "リモート ブランチ",
			"config.checkoutType.tags": "タグ",
			"config.closeDiffOnOperation": "変更をスタッシュ、コミット、破棄、ステージング、またはステージング解除する場合に差分エディターを自動的に閉じるかどうかを制御します。",
			"config.commandsToLog": "'stdout' のログが[git output](command:git.showOutput) に記録される Git コマンドの一覧 (commit、push など)。Git コマンドでクライアント側フックが構成されている場合、クライアント側フックの 'stdout' のログも[git output](command:git.showOutput) に記録されます。",
			"config.confirmEmptyCommits": "'Git: Commit Empty' コマンドの空のコミットの作成を常に確認します。",
			"config.confirmForcePush": "強制的なプッシュの前に確認を求めるかどうかを制御します。",
			"config.confirmNoVerifyCommit": "確認せずにコミットする前に確認メッセージを表示するかどうかを制御します。",
			"config.confirmSync": "Git リポジトリを同期する前に確認してください。",
			"config.countBadge": "Git カウント バッジを制御します。",
			"config.countBadge.all": "すべての変更をカウントします。",
			"config.countBadge.off": "カウンターをオフにします。",
			"config.countBadge.tracked": "追跡済みの変更のみカウントします。",
			"config.decorations.enabled": "Git が配色とバッジをエクスプローラーと [開いているエディター] ビューに提供するかどうかを制御します。",
			"config.defaultBranchName": "新しい Git リポジトリを初期化するときの既定のブランチの名前 (例: main、trunk、development)。空に設定すると、Git で構成された既定のブランチ名が使用されます。**注:** Git バージョン '2.28.0' 以降が必要です。",
			"config.defaultCloneDirectory": "Git リポジトリをクローンする既定の場所。",
			"config.detectSubmodules": "Git サブモジュールを自動的に検出するかどうかを制御します。",
			"config.detectSubmodulesLimit": "検出された Git サブモジュールの制限を制御します。",
			"config.discardAllScope": "'すべての変更を破棄' コマンドによってどの変更が破棄されるかを制御します。'all' はすべての変更を破棄します。 'tracked' は追跡されているファイルだけを破棄します。 'prompt' は、アクションが実行されるたびにプロンプ​​ト ダイアログを表示します。",
			"config.enableCommitSigning": "GPG、X.509、または SSH によるコミットの署名を有効にします。",
			"config.enableSmartCommit": "ステージされた変更がない場合はすべての変更をコミットします。",
			"config.enableStatusBarSync": "ステータス バーに Git Sync コマンドを表示するかどうかを制御します。",
			"config.enabled": "Git が有効かどうか。",
			"config.experimental.installGuide": "Git のセットアップ フローの試験的な改善。",
			"config.fetchOnPull": "有効にすると、プル時にすべてのブランチをフェッチします。それ以外の場合は、現在のブランチだけをフェッチします。",
			"config.followTagsWhenSync": "同期コマンドを実行するときに、注釈付きタグをすべてプッシュします。",
			"config.ignoreLegacyWarning": "古い Git である警告を無視します。",
			"config.ignoreLimitWarning": "リポジトリ内に変更が多い場合の警告を無視します。",
			"config.ignoreMissingGitWarning": "Git が見つからない場合の警告を無視します。",
			"config.ignoreRebaseWarning": "ブランチがプル時にリベースされた可能性があると思われる場合、警告を無視します。",
			"config.ignoreSubmodules": "ファイル ツリーでのサブモジュールの変更を無視します。",
			"config.ignoreWindowsGit27Warning": "Git 2.25 - 2.26 が Windows にインストールされている場合は警告を無視します。",
			"config.ignoredRepositories": "無視する Git リポジトリのリスト。",
			"config.inputValidation": "コミット メッセージの入力検証診断を表示するかどうかを制御します。",
			"config.inputValidationLength": "警告を表示するコミット メッセージの長さのしきい値を制御します。",
			"config.inputValidationSubjectLength": "警告を表示するためのコミット メッセージの件名長のしきい値を制御します。'#git.inputValidationLength#' の値を継承する場合には設定解除します。",
			"config.mergeEditor": "現在競合しているファイルのマージ エディターを開きます。",
			"config.openAfterClone": "複製後にリポジトリを自動的に開くかどうかを制御します。",
			"config.openAfterClone.always": "常に現在のウィンドウで開きます。",
			"config.openAfterClone.alwaysNewWindow": "常に新しいウィンドウで開きます。",
			"config.openAfterClone.prompt": "常にアクションを確認します。",
			"config.openAfterClone.whenNoFolderOpen": "開いているフォルダーがない場合は現在のウィンドウでのみ開きます。",
			"config.openDiffOnClick": "変更をクリックすると差分エディターを開くかどうかを制御します。そうでなければ通常のエディターを開きます。",
			"config.openRepositoryInParentFolders": "ワークスペースの親フォルダー内または開いているファイルのどちらでのリポジトリを開く必要があるのかを制御します。",
			"config.openRepositoryInParentFolders.always": "常にワークスペースの親フォルダーまたは開いているファイルでリポジトリを開きます。",
			"config.openRepositoryInParentFolders.never": "ワークスペースの親フォルダーまたは開いているファイルでリポジトリを開きません。",
			"config.openRepositoryInParentFolders.prompt": "ワークスペースの親フォルダーまたは開いているファイルでリポジトリを開く前に、ダイアログを表示します。",
			"config.optimisticUpdate": "git コマンドの実行後にソース管理ビューの状態を楽観的に更新するかどうかを制御します。",
			"config.path": "Git 実行可能ファイルのパスとファイル名 (例: Windows の場合は `C:\\Program Files\\Git\\bin\\git.exe`)。検索する複数のパスを含む文字列値の配列を指定することもできます。",
			"config.postCommitCommand": "コミットの成功後、git コマンドを実行します。",
			"config.postCommitCommand.none": "コミット後、任意のコマンドを実行しません。",
			"config.postCommitCommand.push": "コミットの成功後、'git push' を実行します。",
			"config.postCommitCommand.sync": "コミットが成功した後、'git pull' と 'git push' を実行します。",
			"config.promptToSaveFilesBeforeCommit": "コミット前に Git が保存していないファイルを確認すべきかどうかを制御します。",
			"config.promptToSaveFilesBeforeCommit.always": "保存されていないファイルがないか確認します。",
			"config.promptToSaveFilesBeforeCommit.never": "このチェックを無効にします。",
			"config.promptToSaveFilesBeforeCommit.staged": "保存されていないステージング済みファイルのみを確認します。",
			"config.promptToSaveFilesBeforeStash": "変更をスタッシュする前に Git で保存していないファイルを確認すべきかどうかを制御します。",
			"config.promptToSaveFilesBeforeStash.always": "保存されていないファイルがないか確認します。",
			"config.promptToSaveFilesBeforeStash.never": "このチェックを無効にします。",
			"config.promptToSaveFilesBeforeStash.staged": "保存されていないステージング済みファイルのみを確認します。",
			"config.pruneOnFetch": "フェッチ時に取り除きます。",
			"config.publishBeforeContinueOn": "Git リポジトリから Continue Working On を使用する場合に、未公開の Git 状態を公開するかどうかを制御します。",
			"config.publishBeforeContinueOn.always": "Git リポジトリから Continue Working On を使用する場合は、公開されていない Git 状態を常に公開する",
			"config.publishBeforeContinueOn.never": "Git リポジトリから Continue Working On を使用する場合、未公開の Git 状態を公開しない",
			"config.publishBeforeContinueOn.prompt": "Git リポジトリから Continue Working On を使用する場合に、未公開の Git 状態を公開するように求めるメッセージ",
			"config.pullBeforeCheckout": "出力方向のコミットがないブランチを、チェックアウト前に早送りするかどうかを制御します。",
			"config.pullTags": "プルするときにすべてのタグをフェッチします。",
			"config.rebaseWhenSync": "同期コマンドの実行時に Git にリベースの使用を強制します。",
			"config.rememberPostCommitCommand": "コミット後に最後に実行された git コマンドを覚えておいてください。",
			"config.replaceTagsWhenPull": "pull コマンドの実行時にタグの競合が発生した場合に、ローカル タグをリモート タグに自動的に置き換えます。",
			"config.repositoryScanIgnoredFolders": "`#git.autoRepositoryDetection#` が `true` または `subFolders` に設定されている場合に Git リポジトリのスキャン中に無視されるフォルダーのリスト。",
			"config.repositoryScanMaxDepth": "'#git.autoRepositoryDetection#' が 'true' もしくは 'subFolders' であるとき、Git リポジトリのワークスペース フォルダーをスキャンする際に使用される深さを制御します。制限なしとするためには、'-1' として設定可能です。",
			"config.requireGitUserConfig": "明示的な Git ユーザーの構成が必要かどうかを制御するか、指定されていない場合は Git による推測を許可します。",
			"config.scanRepositories": "Git リポジトリを検索するパスのリスト。",
			"config.showActionButton": "ソース管理ビューにアクション ボタンを表示するかどうかを制御します。",
			"config.showActionButton.commit": "ローカル ブランチがコミットする準備ができているファイルを変更したときに、変更をコミットするアクション ボタンを表示します。",
			"config.showActionButton.publish": "追跡リモート ブランチがない場合にローカル ブランチを発行するアクション ボタンを表示します。",
			"config.showActionButton.sync": "ローカル ブランチがリモート ブランチの前方または背後にある場合に、変更を同期するアクション ボタンを表示します。",
			"config.showCommitInput": "Git ソース管理パネルにコミットの入力を表示するかどうかを制御します。",
			"config.showInlineOpenFileAction": "Git 変更の表示内にインラインのファイルを開くアクションを表示するかどうかを制御します。",
			"config.showProgress": "Git アクションに進行状況を表示するかどうかを制御します。",
			"config.showPushSuccessNotification": "プッシュが成功したときに通知を表示するかどうかを制御します。",
			"config.similarityThreshold": "名前変更と見なされる追加/削除されたファイルのペアの変更に対する類似性インデックスのしきい値 (ファイルのサイズと比較した追加/削除の量) を制御します。**注意:** Git バージョン `2.18.0` 以降が必要です。",
			"config.smartCommitChanges": "スマート コミットで変更を自動的にステージングするかどうかを制御します。",
			"config.smartCommitChanges.all": "すべての変更を自動的にステージします。",
			"config.smartCommitChanges.tracked": "自動的にステージングされた変更箇所のみ。",
			"config.statusLimit": "Git 状態コマンドで解析できる変更回数の制限方法を制御します。0 に設定すると制限なしにすることができます。",
			"config.suggestSmartCommit": "スマート コミットを有効にすることを推奨します (ステージング済み変更がない場合、すべての変更をコミットします)。",
			"config.supportCancellation": "ユーザーが操作を中止できる同期アクションの実行時に通知が表示されるかどうかを制御します。",
			"config.terminalAuthentication": "統合ターミナルで生成される Git プロセスの認証ハンドラーとして VS Code を有効にするかどうかを制御します。注意: この設定の変更を反映させるには、ターミナルを再起動する必要があります。",
			"config.terminalGitEditor": "統合ターミナルで生成される Git プロセスの Git エディターとして VS Code を有効にするかどうかを制御します。注意: この設定の変更を反映させるには、ターミナルを再起動する必要があります。",
			"config.timeline.date": "タイムライン ビューでアイテムに使用する日付を制御します。",
			"config.timeline.date.authored": "作成日を使用する",
			"config.timeline.date.committed": "コミットされた日付を使用する",
			"config.timeline.showAuthor": "タイムライン ビューにコミット作成者を表示するかどうかを制御します。",
			"config.timeline.showUncommitted": "コミットされていない変更をタイムライン ビューに表示するかどうかを制御します。",
			"config.untrackedChanges": "追跡対象外の変更の動作を制御します。",
			"config.untrackedChanges.hidden": "追跡対象外の変更は非表示になり、複数のアクションから除外されます。",
			"config.untrackedChanges.mixed": "追跡対象および追跡対象外のすべての変更は、一緒に表示され、均等に動作します。",
			"config.untrackedChanges.separate": "追跡されていない変更は、ソース管理ビューに個別に表示されます。それらは、複数のアクションからも除外されます。",
			"config.useCommitInputAsStashMessage": "コミット入力ボックスからのメッセージを既定のスタッシュ メッセージとして使用するかどうかを制御します。",
			"config.useEditorAsCommitInput": "コミット入力ボックスにメッセージが指定されていない場合に、コミット メッセージの作成にフル テキスト エディターを使用するかどうかを制御します。",
			"config.useForcePushIfIncludes": "強制プッシュで、より安全な force-if-includes バリアントを使用するかどうかを制御します。注: この設定では、'#git.useForcePushWithLease#' 設定を有効にし、Git バージョン '2.30.0' 以降が必要です。",
			"config.useForcePushWithLease": "force プッシュより安全な force-with-lease 方式を使用するかどうかを制御します。",
			"config.useIntegratedAskPass": "統合バージョンを使用するために GIT_ASKPASS を上書きするかどうかを制御します。",
			"config.verboseCommit": "「#git.useEditorAsCommitInput#」が有効になっている場合は、冗長出力を有効化してください。",
			"description": "Git SCM統合",
			"displayName": "Git",
			"submenu.branch": "ブランチ",
			"submenu.changes": "変更",
			"submenu.commit": "コミット",
			"submenu.commit.amend": "修正",
			"submenu.commit.signoff": "サインオフ",
			"submenu.explorer": "Git",
			"submenu.pullpush": "プル、プッシュ",
			"submenu.remotes": "リモート",
			"submenu.stash": "スタッシュ",
			"submenu.tags": "タグ",
			"view.workbench.cloneRepository": "リポジトリはローカルで複製できます。\r\n[リポジトリの複製](command:git.clone 'Git 拡張機能がアクティブ化されたらリポジトリを複製する')",
			"view.workbench.learnMore": "VS Codeで Git とソース管理を使用する方法の詳細については、[ドキュメントを参照](https://aka.ms/vscode-scm)。",
			"view.workbench.scm.closedRepositories": "以前に閉じられた Git リポジトリが見つかりました。\r\n[閉じたリポジトリを再度開く](command:git.reopenClosedRepositories)\r\nVS Codeで Git とソース管理を使用する方法の詳細については、[ドキュメントを参照](https://aka.ms/vscode-scm)。",
			"view.workbench.scm.closedRepository": "以前に閉じられた Git リポジトリが見つかりました。\r\n[閉じたリポジトリを再度開く](command:git.reopenClosedRepositories)\r\nVS Codeで Git とソース管理を使用する方法の詳細については、[ドキュメントを参照](https://aka.ms/vscode-scm)。",
			"view.workbench.scm.disabled": "Git 機能を使用する場合は、[設定](command:workbench.action.openSettings?%5B%22git.enabled%22%5D) で Git を有効にしてください。\r\nVS Codeで Git とソース管理を使用する方法の詳細については、[ドキュメントを参照](https://aka.ms/vscode-scm)。",
			"view.workbench.scm.empty": "Git 機能を使用するには、Git リポジトリを含むフォルダーを開くか、URL から複製します。\r\n[フォルダーを開く](command:vscode.openFolder)\r\n[リポジトリの複製](command:git.clone)\r\nVS Codeで Git とソース管理を使用する方法の詳細については、[ドキュメントを参照](https://aka.ms/vscode-scm)。",
			"view.workbench.scm.emptyWorkspace": "現在開いているワークスペースには、Git リポジトリを含むフォルダーがありません。\r\n[ワークスペースにフォルダーを追加](command:workbench.action.addRootFolder)\r\nVS Codeで Git とソース管理を使用する方法の詳細については、[ドキュメントを参照](https://aka.ms/vscode-scm)。",
			"view.workbench.scm.folder": "現在開いているフォルダーには Git リポジトリがありません。Git を利用したソース管理機能を有効にするリポジトリを初期化できます。\r\n[リポジトリを初期化する](command:git.init?%5Btrue%5D)\r\nVS Codeで Git とソース管理を使用する方法の詳細については、[ドキュメントを参照](https://aka.ms/vscode-scm)。",
			"view.workbench.scm.missing": "一般的なソース管理システムである Git をインストールして、コードの変更を追跡し、他のユーザーと共同作業を行います。詳細については、[Git ガイド](https://aka.ms/vscode-scm) を参照してください。",
			"view.workbench.scm.missing.linux": "ソース管理は、インストールされている Git に依存しています。\r\n[Linux 用 Git のダウンロード](https://git-scm.com/download/linux) \r\nインストール後、[再読み込み](command:workbench.action.reloadWindow) (または [トラブルシューティング](command:git.showOutput)) してください。追加のソース管理プロバイダーを [Marketplace から](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22) インストールできます。",
			"view.workbench.scm.missing.mac": "[macOS 用 Git のダウンロード](https://git-scm.com/download/mac) \r\nインストール後、[再読み込み](command:workbench.action.reloadWindow) (または [トラブルシューティング](command:git.showOutput)) してください。追加のソース管理プロバイダーを [Marketplace から](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22) インストールできます。",
			"view.workbench.scm.missing.windows": "[Windows 用 Git のダウンロード](https://git-scm.com/download/win) \r\nインストール後、[再読み込み](command:workbench.action.reloadWindow) (または [トラブルシューティング](command:git.showOutput)) してください。追加のソース管理プロバイダーを [Marketplace から](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22) インストールできます。",
			"view.workbench.scm.repositoriesInParentFolders": "ワークスペースの親フォルダーまたは開いているファイルで、複数の Git リポジトリが見つかりました。\r\n[リポジトリを開く](command:git.openRepositoriesInParentFolders)\r\n[git.openRepositoryInParentFolders](command:workbench.action.openSettings?%5B%22git.openRepositoryInParentFolders%22%5D) 設定を使用して、ワークスペースの親フォルダーまたは開いているファイルのどちらで Git リポジトリを開くかを制御します。詳細については、[ドキュメントをご覧ください](https://aka.ms/vscode-git-repository-in-parent-folders)。",
			"view.workbench.scm.repositoryInParentFolders": "Git リポジトリがワークスペースの親フォルダーまたは開いているファイルで見つかりました。\r\n[リポジトリを開く](command:git.openRepositoriesInParentFolders)\r\n[git.openRepositoryInParentFolders](command:workbench.action.openSettings?%5B%22git.openRepositoryInParentFolders%22%5D) 設定を使用して、ワークスペースの親フォルダーまたは開いているファイルのどちらで Git リポジトリを開くかを制御します。詳細については、[ドキュメントをご覧ください](https://aka.ms/vscode-git-repository-in-parent-folders)。",
			"view.workbench.scm.scanFolderForRepositories": "Git リポジトリのフォルダーをスキャンしています...",
			"view.workbench.scm.scanWorkspaceForRepositories": "Git リポジトリのワークスペースをスキャンしています...",
			"view.workbench.scm.unsafeRepositories": "検出された Git リポジトリは、現在のユーザー以外のユーザーがフォルダーを所有しているため、安全でない可能性があります。\r\n[安全でないリポジトリの管理](command:git.manageUnsafeRepositories)\r\n安全でないリポジトリの詳細については、[ドキュメントをお読みください](https://aka.ms/vscode-git-unsafe-repository)。",
			"view.workbench.scm.unsafeRepository": "検出された Git リポジトリは、現在のユーザー以外のユーザーがフォルダーを所有しているため、安全でない可能性があります。\r\n[安全でないリポジトリの管理](command:git.manageUnsafeRepositories)\r\n安全でないリポジトリの詳細については、[ドキュメントをお読みください](https://aka.ms/vscode-git-unsafe-repository)。",
			"view.workbench.scm.workspace": "現在開いているワークスペースには、Git リポジトリを含むフォルダーがありません。Git によって提供されるソース管理機能を有効にするフォルダー上のリポジトリを初期化できます。\r\n[リポジトリの初期化](command:git.init)\r\nVS Codeで Git とソース管理を使用する方法の詳細については、[ドキュメントを参照](https://aka.ms/vscode-scm)。"
		}
	}
}