{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"bundle": {
			"(loading...)/Prefix displayed for hover entries while the server is still loading": "(로드 중...)",
			"...1 additional file not shown": "...1개의 추가 파일이 표시되지 않음",
			"...{0} additional files not shown": "...{0}개의 추가 파일이 표시되지 않음",
			"1 implementation": "구현 1개",
			"1 reference": "참조 1개",
			"Acquiring typings definitions for IntelliSense./Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized": "IntelliSense에 대한 typings 정의를 가져오는 중입니다.",
			"Acquiring typings.../Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized": "입력을 가져오는 중...",
			"Add all missing imports": "모든 누락된 가져오기 추가",
			"Allow": "허용",
			"Always": "항상",
			"An error occurred while renaming file": "파일 이름을 바꾸는 중 오류 발생",
			"Analyzing '{0}' and its dependencies": "'{0}' 및 해당 종속성 분석",
			"Checking for update of JS/TS imports": "JS/TS 가져오기 업데이트 확인",
			"Configure Excludes": "제외 구성",
			"Configure jsconfig": "jsconfig 구성",
			"Configure jsconfig.json": "jsconfig.json 구성",
			"Configure tsconfig": "tsconfig 구성",
			"Configure tsconfig.json": "tsconfig.json 구성",
			"Could not apply refactoring": "리팩터링을 적용할 수 없습니다.",
			"Could not detect a Node installation to run TS Server.": "TS 서버를 실행할 노드 설치를 검색할 수 없습니다.",
			"Could not determine TypeScript or JavaScript project": "TypeScript 또는 JavaScript 프로젝트를 확인할 수 없습니다.",
			"Could not determine TypeScript or JavaScript project. Unsupported file type": "TypeScript 또는 JavaScript 프로젝트를 확인할 수 없습니다. 지원되지 않는 파일 형식",
			"Could not determine references": "참조를 확인할 수 없음",
			"Could not install typings files for JavaScript language features. Please ensure that NPM is installed, or configure 'typescript.npm' in your user settings. Alternatively, check the [documentation]({0}) to learn more.": "JavaScript 언어 기능에 대한 입력 파일을 설치할 수 없습니다. NPM이 설치되어 있는지 확인하거나 사용자 설정에서 'typescript.npm'을 구성하세요. 자세히 알아보려면 [설명서]({0})를 확인하세요.",
			"Could not load the TypeScript version at this path": "이 경로에서 TypeScript 버전을 로드할 수 없음",
			"Could not open TS Server log file": "TS 서버 로그 파일을 열 수 없습니다.",
			"Disable logging": "로깅 사용 안 함",
			"Disables semantic checking in a JavaScript file. Must be at the top of a file.": "JavaScript 파일에서 의미 검사를 사용하지 않습니다. 파일의 최상단에 있어야 합니다.",
			"Dismiss": "해제",
			"Don't Show Again": "다시 표시 안 함",
			"Don't show again": "다시 표시 안 함",
			"Enable logging and restart TS server": "로깅 사용 및 TS 서버 다시 시작",
			"Enables semantic checking in a JavaScript file. Must be at the top of a file.": "JavaScript 파일에서 의미 검사를 사용합니다. 파일의 최상단에 있어야 합니다.",
			"Enter file path": "파일 경로 입력",
			"Enter new file path...": "새 파일 경로 입력...",
			"Extract to constant": "상수로 추출",
			"Extract to function": "함수로 추출",
			"Failed to resolve {0} as module": "{0}을(를) 모듈로 확인하지 못했습니다.",
			"Fetching data for better TypeScript IntelliSense": "TypeScript IntelliSense를 개선하기 위해 정보를 가져오는 중",
			"File is not part of a JavaScript project. View the [jsconfig.json documentation]({0}) to learn more.": "파일이 JavaScript 프로젝트의 일부가 아닙니다. 자세한 내용은 [jsconfig.json 설명서]({0})를 참조하세요.",
			"File is not part of a TypeScript project. View the [tsconfig.json documentation]({0}) to learn more.": "파일이 TypeScript 프로젝트의 일부가 아닙니다. 자세한 내용은 [tsconfig.json 설명서]({0})를 참조하세요.",
			"File is not part opened folders": "파일이 열린 폴더의 일부가 아닙니다.",
			"Find file references failed. No resource provided.": "파일 참조를 찾지 못했습니다. 리소스가 제공되지 않았습니다.",
			"Find file references failed. Requires TypeScript 4.2+.": "파일 참조를 찾지 못했습니다. TypeScript 4.2 이상이 필요합니다.",
			"Find file references failed. Unknown file type.": "파일 참조를 찾지 못했습니다. 알 수 없는 파일 형식입니다.",
			"Find file references failed. Unsupported file type.": "파일 참조를 찾지 못했습니다. 지원되지 않는 파일 형식입니다.",
			"Finding file references": "파일 참조를 찾는 중",
			"Finding source definitions": "원본 정의 찾기",
			"Fix all fixable JS/TS issues": "수정 가능한 모든 JS/TS 문제 수정",
			"Follow link": "링크로 이동",
			"Go to Source Definition failed. No resource provided.": "원본 정의로 이동하지 못했습니다. 리소스가 제공되지 않았습니다.",
			"Go to Source Definition failed. Requires TypeScript 4.7+.": "원본 정의로 이동하지 못했습니다. TypeScript 4.7 이상이 필요합니다.",
			"Go to Source Definition failed. Unknown file type.": "원본 정의로 이동하지 못했습니다. 알 수 없는 파일 형식입니다.",
			"Go to Source Definition failed. Unsupported file type.": "원본 정의로 이동하지 못했습니다. 지원되지 않는 파일 형식입니다.",
			"Initializing '{0}'": "'{0}'을(를) 초기화하는 중",
			"JS/TS IntelliSense Status": "JS/TS IntelliSense 상태",
			"JSDoc comment": "JSDoc 주석",
			"Learn More": "자세한 정보",
			"Learn more about JS/TS refactorings": "JS/TS 리팩터링에 대해 자세히 알아보기",
			"Learn more about managing TypeScript versions": "TypeScript 버전 관리에 대한 자세한 정보",
			"Loading IntelliSense status": "IntelliSense 상태 로드 중",
			"Move to File": "파일로 이동",
			"Never": "안 함 ",
			"Never in this Workspace": "이 작업 영역에서 안 함",
			"No": "아니요",
			"No jsconfig": "jsconfig 없음",
			"No opened folders": "열린 폴더 없음",
			"No source definitions found.": "원본 정의를 찾을 수 없습니다.",
			"No tsconfig": "tsconfig 없음",
			"Not now": "나중에",
			"Open config file": "구성 파일 열기",
			"Organize Imports": "가져오기 구성",
			"Partial Mode": "부분 모드",
			"Paste with imports": "가져오기로 붙여넣기",
			"Please open a folder in VS Code to use a TypeScript or JavaScript project": "TypeScript 또는 JavaScript 프로젝트를 사용하려면 VS Code의 폴더를 여세요.",
			"Please report an issue against Yarn PnP": "Yarn PnP에 대해 문제를 보고하세요.",
			"Please update your TypeScript version": "TypeScript 버전을 업데이트하세요.",
			"Project Wide IntelliSense not available": "프로젝트 전체 IntelliSense를 사용할 수 없음",
			"Remove Unused Imports": "사용하지 않는 가져오기 제거",
			"Remove all unused code": "사용하지 않는 모든 코드 제거",
			"Report Issue": "문제 신고",
			"Report issue against Yarn PnP": "Yarn PnP에 대한 문제 보고",
			"Select Version": "버전 선택",
			"Select code action to apply": "적용할 코드 동작 선택",
			"Select existing file...": "기존 파일 선택...",
			"Select move destination": "이동 대상 선택",
			"Select the TypeScript version used for JavaScript and TypeScript language features": "JavaScript 및 TypeScript 언어 기능에 사용되는 TypeScript 버전 선택",
			"Sort Imports": "가져오기 정렬",
			"Suppresses @ts-check errors on the next line of a file, expecting at least one to exist.": "파일 다음 줄에서 @ts-check 오류를 억제하며 하나 이상이 존재할 것으로 예상합니다.",
			"Suppresses @ts-check errors on the next line of a file.": "파일의 다음 행에서 @ts-check 오류를 억제합니다.",
			"TS Server has not started logging.": "TS 서버에서 로깅을 시작하지 않았습니다.",
			"TS Server logging is currently enabled which may impact performance.": "TS 서버 로깅이 현재 사용하도록 설정되어 있어 성능에 영향을 미칠 수 있습니다.",
			"TS Server logging is off. Please set 'typescript.tsserver.log' and restart the TS server to enable logging": "TS 서버 로깅이 꺼져 있습니다. “typescript.tsserver.log”를 설정하고 TS 서버를 다시 시작하여 로깅을 사용하도록 설정하세요.",
			"The JS/TS language service crashed 5 times in the last 5 Minutes.": "JS/TS 언어 서비스가 지난 5분 동안 5번 충돌했습니다.",
			"The JS/TS language service crashed 5 times in the last 5 Minutes.\nThis may be caused by a plugin contributed by one of these extensions: {0}\nPlease try disabling these extensions before filing an issue against VS Code.": "JS/TS 언어 서비스가 지난 5분 동안 5번 충돌했습니다.\n이는 다음 확장 프로그램 중 하나가 기여한 플러그인으로 인해 발생할 수 있습니다. {0}\nVS Code에 문제를 제기하기 전에 이러한 확장을 사용하지 않도록 설정해 보세요.",
			"The JS/TS language service crashed.": "JS/TS 언어 서비스가 충돌했습니다.",
			"The JS/TS language service crashed.\nThis may be caused by a plugin contributed by one of these extensions: {0}.\nPlease try disabling these extensions before filing an issue against VS Code.": "JS/TS 언어 서비스가 충돌했습니다.\n이는 다음 확장 프로그램 중 하나가 기여한 플러그인으로 인해 발생할 수 있습니다. {0}\nVS Code에 문제를 제기하기 전에 이러한 확장을 사용하지 않도록 설정해 보세요.",
			"The JS/TS language service immediately crashed 5 times. The service will not be restarted.": "JS/TS 언어 서비스가 즉시 5번 충돌했습니다. 서비스가 다시 시작되지 않습니다.",
			"The JS/TS language service immediately crashed 5 times. The service will not be restarted.\nThis may be caused by a plugin contributed by one of these extensions: {0}.\nPlease try disabling these extensions before filing an issue against VS Code.": "JS/TS 언어 서비스가 즉시 5번 충돌했습니다. 서비스가 다시 시작되지 않습니다.\n이는 다음 확장 프로그램 중 하나가 기여한 플러그인으로 인해 발생할 수 있습니다. {0}\nVS Code에 문제를 제기하기 전에 이러한 확장을 사용하지 않도록 설정해 보세요.",
			"The current selection cannot be extracted": "현재 선택 영역을 추출할 수 없습니다.",
			"The path {0} doesn't point to a valid Node installation to run TS Server. Falling back to bundled Node.": "경로 {0}이(가) TS 서버를 실행하는 올바른 노드 설치를 가리키지 않습니다. 번들 노드로 대체합니다.",
			"The path {0} doesn't point to a valid tsserver install. Falling back to bundled TypeScript version.": "경로 {0}이(가) 올바른 tsserver 설치를 가리키지 않습니다. 포함된 TypeScript 버전을 대신 사용합니다.",
			"The workspace is using a version of the TypeScript Server that has been patched by Yarn PnP. This patching is a common source of bugs.": "작업 영역에서 Yarn PnP에 의해 패치된 TypeScript 서버 버전을 사용하고 있습니다. 이 패치는 버그의 일반적인 소스입니다.",
			"The workspace is using an old version of TypeScript ({0}).\n\nBefore reporting an issue, please update the workspace to use TypeScript {1} or newer to make sure the bug has not already been fixed.": "작업 영역에서 이전 버전의 TypeScript({0})를 사용하고 있습니다.\n\n문제를 보고하기 전에 TypeScript {1} 이상 기능을 사용하도록 작업 영역을 업데이트하여 버그가 아직 수정되지 않았는지 확인하세요.",
			"This workspace contains a TypeScript version. Would you like to use the workspace TypeScript version for TypeScript and JavaScript language features?": "이 작업 영역에는 TypeScript 버전이 포함되어 있습니다. TypeScript 및 JavaScript 언어 기능에 작업 영역 TypeScript 버전을 사용하시겠습니까?",
			"This workspace wants to use the Node installation at '{0}' to run TS Server. Would you like to use it?": "이 작업 영역은 '{0}'의 노드 설치를 사용하여 TS 서버를 실행하려고 합니다. 사용하시겠습니까?",
			"To enable project-wide JavaScript/TypeScript language features, exclude folders with many files, like: {0}": "프로젝트 전체에서 JavaScript/TypeScript 언어 기능을 사용하도록 설정하려면 {0}과(와) 같이 파일이 많은 폴더를 제외하세요.",
			"To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.": "프로젝트 전체에서 JavaScript/TypeScript 언어 기능을 사용하도록 설정하려면 사용하지 않는 소스 파일이 포함된 큰 폴더를 제외하세요.",
			"TypeScript Server Log": "TypeScript 서버 로그",
			"TypeScript Task in tasks.json contains \"\\\\\". TypeScript tasks tsconfig must use \"/\"": "tasks.json의 TypeScript 작업에 \"\\\\\"가 포함되어 있습니다. TypeScript 작업 tsconfig는 \"/\"를 사용해야 합니다.",
			"TypeScript Version": "TypeScript 버전",
			"TypeScript language server exited with error. Error message is: {0}": "오류가 발생하여 TypeScript 언어 서버가 종료되었습니다. 오류 메시지: {0}",
			"TypeScript: Configure Excludes": "TypeScript: 제외 구성",
			"Update imports for '{0}'?": "'{0}'에 대한 가져오기를 업데이트하시겠습니까?",
			"Update imports for the following {0} files?": "다음 {0} 파일에 대한 가져오기를 업데이트하시겠습니까?",
			"Use VS Code's Version": "VS Code의 버전 사용",
			"Use Workspace Version": "작업 영역 버전 사용",
			"VS Code's tsserver was deleted by another application such as a misbehaving virus detection tool. Please reinstall VS Code.": "잘못 동작하는 바이러스 감지 도구와 같은 다른 애플리케이션에서 VS Code의 tsserver가 삭제되었습니다. VS Code를 다시 설치하세요.",
			"Yes": "예",
			"build - {0}": "빌드 - {0}",
			"destination files": "대상 파일",
			"invalid version": "잘못 된 버전",
			"watch - {0}": "감시 - {0}",
			"{0} (Fix all in file)": "{0} (파일에서 모두 수정)",
			"{0} implementations": "구현 {0}개",
			"{0} references": "참조 {0}개"
		},
		"package": {
			"configuration.expandableHover": "마우스로 가리켜서 확장을 활성화/비활성화합니다.",
			"configuration.implicitProjectConfig.checkJs": "JavaScript 파일의 의미 체계 검사를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.",
			"configuration.implicitProjectConfig.experimentalDecorators": "프로젝트의 일부가 아닌 JavaScript 파일에서 'experimentalDecorators'를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.",
			"configuration.implicitProjectConfig.module": "프로그램의 모듈 시스템을 설정합니다. 자세한 내용은 https://www.typescriptlang.org/tsconfig#module을 참조하세요.",
			"configuration.implicitProjectConfig.strictFunctionTypes": "프로젝트의 일부가 아닌 JavaScript 및 TypeScript 파일에서 [strict 함수 형식](https://www.typescriptlang.org/tsconfig#strictFunctionTypes)을 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.",
			"configuration.implicitProjectConfig.strictNullChecks": "프로젝트의 일부가 아닌 JavaScript 및 TypeScript 파일에서 [strict null 검사](https://www.typescriptlang.org/tsconfig#strictNullChecks)를 사용하거나 사용하지 않도록 설정합니다. 기존 `jsconfig.json` 또는 `tsconfig.json` 파일은 이 설정을 재정의합니다.",
			"configuration.implicitProjectConfig.target": "내보낸 JavaScript에 대한 대상 JavaScript 언어 버전을 설정하고 라이브러리 선언을 포함합니다. 자세한 내용은 https://www.typescriptlang.org/tsconfig#target을 참조하세요.",
			"configuration.inlayHints.enumMemberValues.enabled": "열거형 선언의 멤버 값에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nenum MyValue {\r\n A /* = 0 */;\r\n B /* = 1 */; \r\n}\r\n \r\n```",
			"configuration.inlayHints.functionLikeReturnTypes.enabled": "함수 시그니처의 암시적 반환 형식에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nfunction foo() /* :number */ {\r\n return Date.now();\r\n } \r\n \r\n```",
			"configuration.inlayHints.parameterNames.enabled": "매개 변수 이름에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nparseInt(/* str: */ '123', /* radix: */ 8)\r\n \r\n```",
			"configuration.inlayHints.parameterNames.suppressWhenArgumentMatchesName": "텍스트가 매개변수 이름과 동일한 인수에 대해 매개변수 이름 힌트를 표시하지 않습니다.",
			"configuration.inlayHints.parameterTypes.enabled": "암시적 매개 변수 유형에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nel.addEventListener('click', e /* :MouseEvent */ => ...)\r\n \r\n ```",
			"configuration.inlayHints.propertyDeclarationTypes.enabled": "속성 선언의 암시적 유형에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nclass Foo {\r\n prop /* :number */ = Date.now();\r\n}\r\n \r\n```",
			"configuration.inlayHints.variableTypes.enabled": "암시적 변수 유형에 대한 인레이 힌트 활성화/비활성화:\r\n```typescript\r\n\r\nconst foo /* :number */ = Date.now();\r\n \r\n```",
			"configuration.inlayHints.variableTypes.suppressWhenTypeMatchesName": "이름이 형식 이름과 동일한 변수에 대한 형식 힌트를 표시하지 않습니다.",
			"configuration.javascript.checkJs.checkJs.deprecation": "이 설정은 사용되지 않으며 대신 `js/ts.implicitProjectConfig.checkJs`가 사용됩니다.",
			"configuration.javascript.checkJs.experimentalDecorators.deprecation": "이 설정은 사용되지 않으며 대신 `js/ts.implicitProjectConfig.experimentalDecorators`가 사용됩니다.",
			"configuration.preferGoToSourceDefinition": "대신 ‘원본 정의로 이동’을 트리거하여 가능한 경우 ‘정의로 이동’ 작업이 유형 선언 파일을 사용하지 않도록 합니다. 이렇게 하면 ‘원본 정의로 이동’이 마우스 제스처로 트리거될 수 있습니다.",
			"configuration.suggest.autoImports": "자동 가져오기 제안을 사용하거나 사용하지 않도록 설정합니다.",
			"configuration.suggest.classMemberSnippets.enabled": "클래스 멤버에 대한 코드 조각 완성을 활성화/비활성화합니다.",
			"configuration.suggest.completeFunctionCalls": "매개 변수 서명으로 함수를 완료하세요.",
			"configuration.suggest.completeJSDocs": "제안을 사용하거나 사용하지 않도록 설정하여 JSDoc 주석을 완료합니다.",
			"configuration.suggest.includeAutomaticOptionalChainCompletions": "선택적 체인 호출을 삽입하는 잠재적으로 정의되지 않은 값에 대한 완료 표시를 활성/비활성화합니다. 사용하려면 엄격한 null 검사가 필요합니다.",
			"configuration.suggest.includeCompletionsForImportStatements": "부분적으로 입력된 가져오기 문에서 가져오기 스타일 자동 완성을 활성/비활성화합니다.",
			"configuration.suggest.jsdoc.generateReturns": "JSDoc 템플릿에 대한 '@returns' 주석 생성을 활성/비활성화합니다.",
			"configuration.suggest.names": "JavaScript 제안에서 파일의 고유한 이름 포함을 사용하거나 사용하지 않도록 설정합니다. 이름 제안은 `@ts-check` 또는 `checkJs`를 사용하여 의미 체계적으로 확인되는 JavaScript 코드에서 항상 사용하지 않도록 설정됩니다.",
			"configuration.suggest.objectLiteralMethodSnippets.enabled": "개체 리터럴의 메서드에 대한 코드 조각 완성을 활성화/비활성화합니다.",
			"configuration.suggest.paths": "import 문 및 요청 호출의 경로에 대한 제안을 사용하거나 사용하지 않도록 설정합니다.",
			"configuration.surveys.enabled": "VS Code의 Javascript 및 Typescript 지원을 개선하는 데 도움이 되는 가끔 있는 설문을 사용하거나 사용하지 않도록 설정합니다.",
			"configuration.tsserver.experimental.enableProjectDiagnostics": "프로젝트 전체 오류 보고를 활성화합니다.",
			"configuration.tsserver.maxTsServerMemory": "TypeScript 서버 프로세스에 할당할 최대 메모리 양(MB)입니다. 4GB보다 큰 메모리 제한을 사용하려면 '#typescript.tsserver.nodePath#'을 사용하여 사용자 지정 노드 설치로 TS Server를 실행합니다.",
			"configuration.tsserver.nodePath": "사용자 지정 노드 설치에서 TS 서버를 실행합니다. 이 값은 노드 실행 파일의 경로이거나 VS 코드가 노드 설치를 감지하도록 하려는 경우 'node'일 수 있습니다.",
			"configuration.tsserver.useSeparateSyntaxServer": "구문 관련 작업(예: 접기 계산 또는 문서 기호 컴퓨팅)에 더 빨리 응답할 수 있는 별도 TypeScript 서버의 생성을 활성/비활성화합니다.",
			"configuration.tsserver.useSeparateSyntaxServer.deprecation": "이 설정은 `typescript.tsserver.useSyntaxServer`를 위해 더 이상 사용되지 않습니다.",
			"configuration.tsserver.useSyntaxServer": "TypeScript가 컴퓨팅 코드 접기와 같은 구문 관련 작업을 보다 빠르게 처리하기 위해 전용 서버를 시작하는지 여부를 제어합니다.",
			"configuration.tsserver.useSyntaxServer.always": "경량 구문 서버를 사용하여 모든 IntelliSense 작업을 처리하세요. 이 구문 서버는 열린 파일에 대해서만 IntelliSense를 제공할 수 있습니다.",
			"configuration.tsserver.useSyntaxServer.auto": "전체 서버와 구문 작업 전용의 경량 서버를 모두 생성하세요. 구문 서버는 프로젝트를 로드하는 동안 구문 작업을 가속화하고 IntelliSense를 제공하는 데 사용됩니다.",
			"configuration.tsserver.useSyntaxServer.never": "전용 구문 서버를 사용하지 마세요. 단일 서버를 사용하여 모든 IntelliSense 작업을 처리하세요.",
			"configuration.tsserver.useVsCodeWatcher": "TypeScript 대신 VS Code 파일 감시자를 사용합니다. 작업 영역에서 TypeScript 5.4 이상을 사용해야 합니다.",
			"configuration.tsserver.useVsCodeWatcher.deprecation": "대신 '#typescript.tsserver.watchOptions#' 설정을 사용하세요.",
			"configuration.tsserver.watchOptions": "파일 및 디렉터리 추적에 사용할 감시 전략을 구성합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling": "파일 시스템 이벤트를 사용하는 경우, 이 옵션은 시스템에 기본 파일 감시자가 부족하고/부족하거나 시스템에서 기본 파일 감시자를 지원하지 않는 경우 사용되는 폴링 전략을 지정합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "자주 수정되지 않는 파일이 덜 자주 검사되는 동적 큐를 사용합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "모든 파일의 변경 사항을 고정된 간격으로 초당 여러 번 확인합니다.",
			"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "모든 파일에서 1초에 여러 번 변경 내용을 확인하지만, 휴리스틱을 사용하여 특정 형식의 파일은 다른 파일보다 덜 자주 확인합니다.",
			"configuration.tsserver.watchOptions.synchronousWatchDirectory": "디렉터리에서 지연 감시를 사용하지 않습니다. 지연 감시는 많은 파일 변경이 한꺼번에 발생하는 경우(예: 실행 중인 npm install에서 node_modules 변경) 유용하지만, 덜 일반적인 설정의 경우 이 플래그를 사용하여 지연 감시를 사용하지 않도록 설정할 수 있습니다.",
			"configuration.tsserver.watchOptions.vscode": "TypeScript 대신 VS Code 파일 감시자를 사용합니다. 작업 영역에서 TypeScript 5.4 이상을 사용해야 합니다.",
			"configuration.tsserver.watchOptions.watchDirectory": "재귀 파일 감시 기능이 없는 시스템에서 전체 디렉터리 트리를 감시하는 방법에 대한 전략입니다.",
			"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "수정이 자주 발생하지 않는 디렉터리가 덜 자주 검사되는 동적 큐를 사용합니다.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedChunkSizePolling": "정기적으로 디렉터리를 청크 단위로 폴링합니다.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "모든 디렉터리에서 고정된 간격으로 초당 여러 번 변경 내용을 확인합니다.",
			"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "디렉터리 변경에 운영 체제/파일 시스템의 기본 이벤트를 사용하려고 시도합니다.",
			"configuration.tsserver.watchOptions.watchFile": "개별 파일을 감시하는 방법에 대한 전략입니다.",
			"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "자주 수정되지 않는 파일이 덜 자주 검사되는 동적 큐를 사용합니다.",
			"configuration.tsserver.watchOptions.watchFile.fixedChunkSizePolling": "정기적으로 파일을 청크 단위로 폴링합니다.",
			"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "모든 파일의 변경 내용을 고정된 간격으로 초당 여러 번 확인합니다.",
			"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "모든 파일의 변경 내용을 1초에 여러 번 확인하지만, 휴리스틱을 사용하여 특정 형식의 파일은 다른 파일보다 덜 자주 확인합니다.",
			"configuration.tsserver.watchOptions.watchFile.useFsEvents": "파일 변경에 운영 체제/파일 시스템의 기본 이벤트를 사용하려고 시도합니다.",
			"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "운영 체제/파일 시스템의 기본 이벤트를 사용하여 파일이 포함된 디렉터리의 대한 변경 내용을 수신합니다. 그러면 파일 감시자를 적게 사용할 수 있지만 정확도가 떨어집니다.",
			"configuration.tsserver.web.projectWideIntellisense.enabled": "웹에서 프로젝트 전체 IntelliSense를 사용/사용 안 함으로 설정합니다. VS Code는 신뢰할 수 있는 컨텍스트에서 실행되어야 합니다.",
			"configuration.tsserver.web.projectWideIntellisense.suppressSemanticErrors": "프로젝트 전체 IntelliSense를 사용하도록 설정한 경우에도 웹에서 의미 체계 오류를 표시하지 않습니다. 프로젝트 전체 IntelliSense를 사용하도록 설정하지 않았거나 사용할 수 없는 경우 항상 켜져 있습니다. `#typescript.tsserver.web.projectWideIntellisense.enabled#`를 참조하세요.",
			"configuration.tsserver.web.typeAcquisition.enabled": "웹에서 패키지 취득을 사용하거나 사용하지 않도록 설정합니다. 이렇게 하면 가져온 패키지에 대해 IntelliSense가 활성화됩니다. '#typescript.tsserver.web.projectWideIntellisense.enabled#'이 필요합니다. 현재 Safari에서 지원되지 않습니다.",
			"configuration.typescript": "TypeScript",
			"configuration.updateImportsOnPaste": "코드를 붙여넣을 때 가져오기 업데이트를 사용하도록 설정합니다. TypeScript 5.7+가 필요합니다.\r\n\r\n기본적으로 붙여넣은 후 가져오기를 업데이트하는 옵션이 표시됩니다. '#editor.pasteAs.preferences#' 설정을 사용하여 붙여넣을 때 가져오기를 자동으로 업데이트할 수 있습니다. '\"editor.pasteAs.preferences\": [ \"text.updateImports.jsts\" ]'.",
			"description": "JavaScript 및 TypeScript에 대한 다양한 언어 지원을 제공합니다.",
			"displayName": "TypeScript 및 JavaScript 언어 기능",
			"format.indentSwitchCase": "switch 문의 case 절을 들여쓰기합니다. 작업 영역에서 TypeScript 5.1+를 사용해야 합니다.",
			"format.insertSpaceAfterCommaDelimiter": "쉼표 구분 기호 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterConstructor": "생성자 키워드 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "익명 함수의 function 키워드 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "제어 흐름 문의 키워드 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "비어 있는 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "JSX 식의 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "비어 있지 않은 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "비어 있지 않은 여는 대괄호 뒤와 닫는 대괄호 앞에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "비어 있지 않은 여는 괄호 뒤와 닫는 괄호 앞에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "템플릿 문자열의 여는 중괄호 뒤와 닫는 중괄호 앞의 공백 처리를 정의합니다.",
			"format.insertSpaceAfterSemicolonInForStatements": "for 문에서 세미콜론 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceAfterTypeAssertion": "TypeScript에서 형식 어설션 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "이항 연산자 뒤에 오는 공백 처리를 정의합니다.",
			"format.insertSpaceBeforeFunctionParenthesis": "함수 인수 괄호 앞에 오는 공백 처리를 정의합니다.",
			"format.placeOpenBraceOnNewLineForControlBlocks": "제어 블록의 새 줄에 여는 중괄호를 넣을지 정의합니다.",
			"format.placeOpenBraceOnNewLineForFunctions": "함수의 새 줄에 여는 중괄호를 넣을지 정의합니다.",
			"format.semicolons": "선택적 세미콜론 처리를 정의합니다.",
			"format.semicolons.ignore": "세미콜론을 삽입하거나 제거하지 마세요.",
			"format.semicolons.insert": "문 끝에 세미콜론을 삽입합니다.",
			"format.semicolons.remove": "불필요한 세미콜론을 제거합니다.",
			"inlayHints.parameterNames.all": "리터럴 및 비리터럴 인수에 대한 매개변수 이름 힌트를 활성화합니다.",
			"inlayHints.parameterNames.literals": "리터럴 인수에 대해서만 매개변수 이름 힌트를 활성화합니다.",
			"inlayHints.parameterNames.none": "매개변수 이름 힌트를 비활성화합니다.",
			"javascript.format.enable": "기본 JavaScript 포맷터를 사용하거나 사용하지 않습니다.",
			"javascript.goToProjectConfig.title": "프로젝트 구성(jsconfig/tsconfig)으로 이동합니다.",
			"javascript.preferences.jsxAttributeCompletionStyle.auto": "prop 유형을 기준으로 특성 이름 뒤에 `={}` 또는 `=\"\"`를 삽입합니다. 문자열 특성에 사용되는 따옴표 형식을 제어하려면 '#javascript.preferences.quoteStyle#'을 참조하세요.",
			"javascript.preferences.organizeImports": "가져오기 순서 지정 방법을 제어하는 고급 기본 설정입니다.",
			"javascript.referencesCodeLens.enabled": "JavaScript 파일에서 CodeLense 참조를 사용/사용 안 함으로 설정합니다.",
			"javascript.referencesCodeLens.showOnAllFunctions": "JavaScript 파일의 모든 기능에 대한 참조 CodeLens를 사용/사용하지 않도록 설정합니다.",
			"javascript.suggestionActions.enabled": "편집기에서 JavaScript 파일에 대한 제안 진단을 사용하거나 사용하지 않도록 설정합니다.",
			"javascript.validate.enable": "JavaScript 유효성 검사를 사용하거나 사용하지 않습니다.",
			"reloadProjects.title": "프로젝트 다시 로드",
			"taskDefinition.tsconfig.description": "TS 빌드를 정의하는 tsconfig 파일입니다.",
			"typescript.autoClosingTags": "JSX 태그의 자동 닫기를 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.check.npmIsInstalled": "[자동 형식 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)을 위해 npm이 설치되어 있는지 확인하세요.",
			"typescript.disableAutomaticTypeAcquisition": "[자동 형식 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)을 사용하지 않도록 설정합니다. 자동 형식 인식은 npm에서 '@types' 패키지를 가져와 외부 라이브러리에 대한 IntelliSense를 개선합니다.",
			"typescript.enablePromptUseWorkspaceTsdk": "Intellisense 작업 영역에서 구성된 TypeScript 버전을 사용하라는 메시지를 사용자에게 표시할 수 있습니다.",
			"typescript.findAllFileReferences": "파일 참조 찾기",
			"typescript.format.enable": "기본 TypeScript 포맷터를 사용하거나 사용하지 않습니다.",
			"typescript.goToProjectConfig.title": "프로젝트 구성(tsconfig)으로 이동",
			"typescript.goToSourceDefinition": "원본 정의로 이동",
			"typescript.implementationsCodeLens.enabled": "CodeLens 구현을 사용하거나 사용하지 않습니다. 이 CodeLens는 인터페이스의 구현자를 표시합니다.",
			"typescript.implementationsCodeLens.showOnInterfaceMethods": "구현 인터페이스의 CodeLens 메서드를 활성화/비활성화합니다.",
			"typescript.locale": "JavaScript 및 TypeScript 오류를 보고하는 데 사용되는 로케일을 설정합니다. 기본값은 VS Code의 로케일을 사용하는 것입니다.",
			"typescript.locale.auto": "VS Code의 구성된 표시 언어 사용",
			"typescript.npm": "[자동 형식 인식](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition)에 사용되는 npm 실행 파일의 경로를 지정합니다.",
			"typescript.openTsServerLog.title": "TS 서버 로그 열기",
			"typescript.preferences.autoImportFileExcludePatterns": "자동 가져오기에서 제외할 파일의 GLOB 패턴을 지정합니다. 상대 경로는 작업 영역 루트를 기준으로 확인됩니다. 패턴은 tsconfig.json ['exclude'](https://www.typescriptlang.org/tsconfig#exclude) 의미 체계를 사용하여 평가됩니다.",
			"typescript.preferences.autoImportSpecifierExcludeRegexes": "일치하는 가져오기 지정자를 사용하여 자동 가져오기를 제외할 정규식을 지정합니다. 예:\r\n\r\n- `^node:`\r\n- 'lib/internal'(슬래시는 이스케이프할 필요가 없습니다.)\r\n- '/lib\\/internal/i'(... 'i' 또는 'u' 플래그에 주변 슬래시를 포함하지 않는 한)\r\n- '^lodash$'(lodash에서 하위 경로 가져오기만 허용)",
			"typescript.preferences.importModuleSpecifier": "자동 가져오기의 기본 경로 스타일입니다.",
			"typescript.preferences.importModuleSpecifier.nonRelative": "`jsconfig.json` / `tsconfig.json`에 구성된 `baseUrl` 또는 `paths`를 기반으로 상대적이지 않은 가져오기를 사용합니다.",
			"typescript.preferences.importModuleSpecifier.projectRelative": "상대 가져오기 경로가 패키지 또는 프로젝트 디렉터리를 벗어나는 경우에만 비 상대 가져오기를 선호합니다.",
			"typescript.preferences.importModuleSpecifier.relative": "가져온 파일 위치의 상대 경로를 사용합니다.",
			"typescript.preferences.importModuleSpecifier.shortest": "상대적 가져오기보다 적은 경로 세그먼트가 포함된 가져오기가 사용 가능한 경우에만 상대적이지 않은 가져오기를 사용합니다.",
			"typescript.preferences.importModuleSpecifierEnding": "자동 가져오기를 위한 기본 경로 끝자리.",
			"typescript.preferences.importModuleSpecifierEnding.auto": "프로젝트 설정을 사용하여 기본값을 선택합니다.",
			"typescript.preferences.importModuleSpecifierEnding.index": "`./component/index.js`를 `./component/index`로 줄입니다.",
			"typescript.preferences.importModuleSpecifierEnding.js": "경로 끝부분을 줄이지 마세요. `.js` 또는 `.ts` 확장명을 포함하세요.",
			"typescript.preferences.importModuleSpecifierEnding.label.js": ".js / .ts",
			"typescript.preferences.importModuleSpecifierEnding.minimal": "`./component/index.js`를 `./component`로 줄입니다.",
			"typescript.preferences.includePackageJsonAutoImports": "사용할 수 있는 자동 가져오기 기능의 'package.json' 종속성을 검색하도록/하지 않도록 설정합니다.",
			"typescript.preferences.includePackageJsonAutoImports.auto": "예상 성능 영향에 따라 종속성을 검색합니다.",
			"typescript.preferences.includePackageJsonAutoImports.off": "종속성을 검색하지 않습니다.",
			"typescript.preferences.includePackageJsonAutoImports.on": "종속성을 항상 검색합니다.",
			"typescript.preferences.jsxAttributeCompletionStyle": "JSX 특성 완성에 선호되는 스타일입니다.",
			"typescript.preferences.jsxAttributeCompletionStyle.auto": "prop 유형을 기준으로 특성 이름 뒤에 `={}` 또는 `=\"\"`를 삽입합니다. 문자열 특성에 사용되는 따옴표 형식을 제어하려면 '#typescript.preferences.quoteStyle#'을 참조하세요.",
			"typescript.preferences.jsxAttributeCompletionStyle.braces": "속성 이름 뒤에 `={}`를 삽입하세요.",
			"typescript.preferences.jsxAttributeCompletionStyle.none": "특성 이름만 삽입하세요.",
			"typescript.preferences.organizeImports": "가져오기 순서 지정 방법을 제어하는 고급 기본 설정입니다.",
			"typescript.preferences.organizeImports.accentCollation": "'organizeImports.unicodeCollation: 'unicode'’가 필요합니다. 문자와 기본 문자가 같지 않은 문자의 구분 기호를 비교합니다.",
			"typescript.preferences.organizeImports.caseFirst": "'organizeImports.unicodeCollation: 'unicode''가 필요하고 'organizeImports.caseSensitivity'가 'caseInsensitive'가 아닙니다. 대문자를 소문자보다 앞에 정렬할지 여부를 나타냅니다.",
			"typescript.preferences.organizeImports.caseFirst.default": "'로캘'에서 지정한 기본 순서입니다.",
			"typescript.preferences.organizeImports.caseFirst.lower": "소문자가 대문자보다 앞에 옵니다. 예: a, A, z, Z'.",
			"typescript.preferences.organizeImports.caseFirst.upper": "대문자가 소문자보다 앞에 옵니다. 예: 'A, a, B, b'.",
			"typescript.preferences.organizeImports.caseSensitivity": "대/소문자 구분과 관련하여 가져오기를 정렬하는 방법을 지정합니다. 'auto' 또는 지정되지 않은 경우 파일당 대/소문자 구분을 검색합니다.",
			"typescript.preferences.organizeImports.caseSensitivity.auto": "가져오기 정렬에 대한 대/소문자 구분을 검색합니다.",
			"typescript.preferences.organizeImports.caseSensitivity.insensitive": "정렬은 대/소문자를 구분하지 않고 가져옵니다.",
			"typescript.preferences.organizeImports.caseSensitivity.sensitive": "가져오기를 대/소문자를 구분하여 정렬합니다.",
			"typescript.preferences.organizeImports.locale": "'organizeImports.unicodeCollation: 'unicode'’가 필요합니다. 데이터 정렬에 사용되는 로캘을 재정의합니다. UI 로캘을 사용하려면 `auto`로 지정하세요.",
			"typescript.preferences.organizeImports.numericCollation": "'organizeImports.unicodeCollation: 'unicode'’가 필요합니다. 정수 값을 기준으로 숫자 문자열을 정렬합니다.",
			"typescript.preferences.organizeImports.typeOrder": "형식 전용 명명된 가져오기를 정렬하는 방법을 지정합니다.",
			"typescript.preferences.organizeImports.typeOrder.auto": "형식 전용 명명된 가져오기를 정렬해야 하는 위치를 검색합니다.",
			"typescript.preferences.organizeImports.typeOrder.first": "형식은 명명된 가져오기만 가져오기 목록의 시작 부분으로 정렬됩니다. 예: 'import { type A, type Y, B, Z } from 'module';'",
			"typescript.preferences.organizeImports.typeOrder.inline": "명명된 가져오기는 이름별로만 정렬됩니다. 예: `import { type A, B, type Y, Z } from 'module';`",
			"typescript.preferences.organizeImports.typeOrder.last": "형식은 명명된 가져오기만 가져오기 목록의 끝으로 정렬됩니다. 예: 'import { B, Z, type A, type Y } from 'module';'",
			"typescript.preferences.organizeImports.unicodeCollation": "유니코드 또는 서수 데이터 정렬을 사용하여 가져오기를 정렬할지 여부를 지정합니다.",
			"typescript.preferences.organizeImports.unicodeCollation.ordinal": "각 코드 포인트의 숫자 값을 사용하여 가져오기를 정렬합니다.",
			"typescript.preferences.organizeImports.unicodeCollation.unicode": "유니코드 코드 데이터 정렬을 사용하여 가져오기를 정렬합니다.",
			"typescript.preferences.preferTypeOnlyAutoImports": "가능한 경우 항상 자동 가져오기에 `type` 키워드를 포함합니다. 작업 영역에서 TypeScript 5.3 이상을 사용해야 합니다.",
			"typescript.preferences.quoteStyle": "빠른 수정에 사용할 기본 견적 스타일입니다.",
			"typescript.preferences.quoteStyle.auto": "기존 코드에서 따옴표 형식 유추",
			"typescript.preferences.quoteStyle.double": "항상 큰따옴표(`\"`) 사용",
			"typescript.preferences.quoteStyle.single": "항상 작은따옴표(`'`) 사용",
			"typescript.preferences.renameMatchingJsxTags": "JSX 태그에서 기호 이름을 바꾸는 대신 일치하는 태그의 이름을 바꾸세요. 작업 영역에서 TypeScript 5.1 이상을 사용해야 합니다.",
			"typescript.preferences.renameShorthandProperties.deprecationMessage": "'typescript.preferences.renameShorthandProperties' 설정 대신 'typescript.preferences.useAliasesForRenames'가 사용됩니다.",
			"typescript.preferences.useAliasesForRenames": "이름을 바꾸는 동안 개체 줄임 속성의 별칭 소개를 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.problemMatchers.tsc.label": "TypeScript 문제",
			"typescript.problemMatchers.tscWatch.label": "TypeScript 문제(감시 모드)",
			"typescript.referencesCodeLens.enabled": "TypeScript 파일에서 참조 CodeLens를 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.referencesCodeLens.showOnAllFunctions": "TypeScript 파일의 모든 기능에 대한 참조 CodeLens를 사용/사용하지 않도록 설정합니다.",
			"typescript.removeUnusedImports": "사용하지 않는 가져오기 제거",
			"typescript.reportStyleChecksAsWarnings": "스타일 검사를 경고로 보고합니다.",
			"typescript.restartTsServer": "TS 서버 다시 시작",
			"typescript.selectTypeScriptVersion.title": "TypeScript 버전 선택...",
			"typescript.sortImports": "가져오기 정렬",
			"typescript.suggest.enabled": "자동 완성 제안을 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.suggestionActions.enabled": "편집기에서 TypeScript 파일에 대한 제안 진단을 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.tsc.autoDetect": "tsc 작업의 자동 검색을 제어합니다.",
			"typescript.tsc.autoDetect.build": "단일 실행 컴파일 작업만 만듭니다.",
			"typescript.tsc.autoDetect.off": "이 기능을 사용하지 않도록 설정합니다.",
			"typescript.tsc.autoDetect.on": "빌드 및 조사식 작업을 모두 만듭니다.",
			"typescript.tsc.autoDetect.watch": "컴파일 및 조사식 작업만 만듭니다.",
			"typescript.tsdk.desc": "IntelliSense에 사용할 TypeScript 설치에서 tsserver 및 `lib*.d.ts` 파일의 폴더 경로를 지정합니다. 예: `./node_modules/typescript/lib`.\r\n\r\n- 사용자 설정으로 지정한 경우 'typescript.tsdk'의 TypeScript 버전이 자동으로 기본 제공 TypeScript 버전을 바꿉니다.\r\n- 작업 영역 설정으로 지정한 경우 'typescript.tsdk'를 사용하여 'TypeScript: TypeScript 버전 선택' 명령으로 IntelliSense용 TypeScript의 해당 작업 영역 버전을 사용하도록 전환할 수 있습니다.\r\n\r\nTypeScript 버전 관리에 대한 자세한 내용은 [TypeScript 설명서](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions)를 참조하세요.",
			"typescript.tsserver.enableRegionDiagnostics": "TypeScript에서 지역 기반 진단을 사용하도록 설정합니다. 작업 영역에서 TypeScript 5.6 이상을 사용해야 합니다.",
			"typescript.tsserver.enableTracing": "디렉터리에 대해 TS 서버 성능 추적을 사용하도록 설정합니다. 이 추적 파일은 TS 서버 성능 문제를 진단하는 데 사용될 수 있습니다. 로그에는 파일 경로, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 정보가 포함될 수 있습니다.",
			"typescript.tsserver.log": "파일에 대해 TS 서버 로깅을 사용하도록 설정합니다. 이 로그는 TS 서버 문제를 진단하는 데 사용될 수 있습니다. 로그에는 파일 경로, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 정보가 포함될 수 있습니다.",
			"typescript.tsserver.pluginPaths": "TypeScript 언어 서비스 플러그 인을 검색할 추가 경로입니다.",
			"typescript.tsserver.pluginPaths.item": "절대 또는 상대 경로입니다. 상대 경로는 작업 영역 폴더를 기준으로 확인됩니다.",
			"typescript.tsserver.trace": "TS 서버로 전송한 메시지 추적을 사용하도록 설정합니다. 이 추적은 TS 서버 문제를 진단하는 데 사용될 수 있습니다. 추적에는 파일 경로, 소스 코드 및 프로젝트에서 잠재적으로 중요한 기타 정보가 포함될 수 있습니다.",
			"typescript.updateImportsOnFileMove.enabled": "VS Code에서 파일을 이동하거나 이름을 바꿀 때 가져오기 경로의 자동 업데이트를 사용하거나 사용하지 않도록 설정합니다.",
			"typescript.updateImportsOnFileMove.enabled.always": "항상 경로를 자동으로 업데이트합니다.",
			"typescript.updateImportsOnFileMove.enabled.never": "경로 이름을 바꾸지 않고 메시지를 표시하지 않습니다.",
			"typescript.updateImportsOnFileMove.enabled.prompt": "이름을 바꿀 때마다 프롬프트를 표시합니다.",
			"typescript.validate.enable": "TypeScript 유효성 검사를 사용하거나 사용하지 않습니다.",
			"typescript.workspaceSymbols.excludeLibrarySymbols": "‘Go to Symbol in Workspace(작업 영역에서 기호로 이동)’ 결과의 라이브러리 파일에서 가져온 기호를 제외합니다. 작업 영역에서 TypeScript 5.3+를 사용해야 합니다.",
			"typescript.workspaceSymbols.scope": "[작업 영역에서 기호로 이동](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)하여 검색할 파일을 제어합니다.",
			"typescript.workspaceSymbols.scope.allOpenProjects": "열려 있는 모든 JavaScript 또는 TypeScript 프로젝트에서 기호를 검색합니다.",
			"typescript.workspaceSymbols.scope.currentProject": "현재 JavaScript 또는 TypeScript 프로젝트에서만 기호를 검색합니다.",
			"virtualWorkspaces": "가상 작업 공간에서는 파일에서 참조를 확인하고 찾는 기능이 지원되지 않습니다.",
			"walkthroughs.nodejsWelcome.debugJsFile.altText": "Visual Studio Code를 사용하여 Node.js에서 JavaScript 코드를 디버그하고 실행합니다.",
			"walkthroughs.nodejsWelcome.debugJsFile.description": "Node.js를 설치하면 ``node your-file-name.js``를 입력하여 터미널에서 JavaScript 프로그램을 실행할 수 있습니다.\r\nNode.js 프로그램을 실행하는 또 다른 쉬운 방법은 VS Code의 디버거를 사용하는 것입니다. 이 디버거를 사용하면 코드를 실행하고, 다른 지점에서 일시 중지하고, 단계별 진행 상황을 이해할 수 있습니다.\r\n[디버깅 시작](command:javascript-walkthrough.commands.debugJsFile)",
			"walkthroughs.nodejsWelcome.debugJsFile.title": "JavaScript 실행 및 디버그",
			"walkthroughs.nodejsWelcome.description": "Visual Studio Code의 최고 JavaScript 환경을 최대한 활용하세요.",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.description": "Node.js는 JavaScript 코드를 실행하는 쉬운 방법입니다. 이를 사용하여 명령줄 앱과 서버를 빠르게 구축할 수 있습니다. 또한 JavaScript 코드를 쉽게 재사용하고 공유할 수 있는 패키지 관리자인 npm이 함께 제공됩니다.\r\n[Node.js 설치](https://nodejs.org/en/download/package-manager/)",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.title": "Node.js 설치",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.description": "Node.js는 JavaScript 코드를 실행하는 쉬운 방법입니다. 이를 사용하여 명령줄 앱과 서버를 빠르게 구축할 수 있습니다. 또한 JavaScript 코드를 쉽게 재사용하고 공유할 수 있는 패키지 관리자인 npm이 함께 제공됩니다.\r\n[Node.js 설치](https://nodejs.org/en/download/)",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.title": "Node.js 설치",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.altText": "Visual Studio Code의 JavaScript 및 Node.js에 대해 자세히 알아보세요.",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.description": "JavaScript, Node.js 및 VS Code에 더 익숙해지고 싶으십니까? 문서를 확인하세요.\r\n[JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript) 및 [Node.js](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial) 학습을 위한 많은 리소스가 있습니다.\r\n\r\n[자세한 정보](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial)",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.title": "추가 탐색",
			"walkthroughs.nodejsWelcome.makeJsFile.description": "첫 번째 JavaScript 파일을 작성해 보겠습니다. 새 파일을 만들고 파일 이름 끝에 ``.js`` 확장자로 저장해야 합니다.\r\n[JavaScript 파일 만들기](command:javascript-walkthrough.commands.createJsFile)",
			"walkthroughs.nodejsWelcome.makeJsFile.title": "JavaScript 파일 만들기",
			"walkthroughs.nodejsWelcome.title": "JavaScript 및 Node.js 시작하기",
			"workspaceTrust": "확장 기능은 작업 영역에서 지정한 코드를 실행하기 때문에 작업 영역 버전을 사용할 때 작업 영역 신뢰가 필요합니다."
		}
	}
}