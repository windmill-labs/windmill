{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"bundle": {
			"(loading...)/Prefix displayed for hover entries while the server is still loading": "(chargement en cours…)",
			"...1 additional file not shown": "...1 fichier supplémentaire non affiché",
			"...{0} additional files not shown": "...{0} fichiers supplémentaires non affichés",
			"1 implementation": "1 implémentation",
			"1 reference": "1 référence",
			"Acquiring typings definitions for IntelliSense./Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized": "Acquisition des définitions typings pour IntelliSense.",
			"Acquiring typings.../Typings refers to the *.d.ts typings files that power our IntelliSense. It should not be localized": "Acquisition des typings...",
			"Add all missing imports": "Ajouter toutes les importations manquantes",
			"Allow": "Autoriser",
			"Always": "Toujours",
			"An error occurred while renaming file": "Une erreur s'est produite pendant le renommage du fichier",
			"Analyzing '{0}' and its dependencies": "Analyse de «{0}» et de ses dépendances",
			"Checking for update of JS/TS imports": "Recherche de mises à jour des importations JS/TS",
			"Configure Excludes": "Configurer les exclusions",
			"Configure jsconfig": "Configurer jsconfig",
			"Configure jsconfig.json": "Configurer jsconfig.json",
			"Configure tsconfig": "Configurer tsconfig",
			"Configure tsconfig.json": "Configurer tsconfig.json",
			"Could not apply refactoring": "Impossible d'appliquer la refactorisation",
			"Could not detect a Node installation to run TS Server.": "Impossible de détecter une installation Node pour exécuter TS Server.",
			"Could not determine TypeScript or JavaScript project": "Impossible de déterminer le projet TypeScript ou JavaScript",
			"Could not determine TypeScript or JavaScript project. Unsupported file type": "Impossible de déterminer le projet TypeScript ou JavaScript. Type de fichier non pris en charge",
			"Could not determine references": "Impossible de déterminer les références",
			"Could not install typings files for JavaScript language features. Please ensure that NPM is installed, or configure 'typescript.npm' in your user settings. Alternatively, check the [documentation]({0}) to learn more.": "Impossible d’installer les fichiers de saisie pour les fonctionnalités du langage JavaScript. Vérifiez que NPM est installé ou configurez 'typescript.npm' dans vos paramètres utilisateur. Vous pouvez également consulter la [documentation]({0}) pour en savoir plus.",
			"Could not load the TypeScript version at this path": "Impossible de charger la version TypeScript dans ce chemin",
			"Could not open TS Server log file": "Impossible d'ouvrir le fichier journal du serveur TS",
			"Disable logging": "Désactiver la journalisation",
			"Disables semantic checking in a JavaScript file. Must be at the top of a file.": "Désactive la vérification sémantique dans un fichier JavaScript. Doit se trouver au début d'un fichier.",
			"Dismiss": "Ignorer",
			"Don't Show Again": "Ne plus afficher",
			"Don't show again": "Ne plus afficher",
			"Enable logging and restart TS server": "Activer la journalisation et redémarrer le serveur TS",
			"Enables semantic checking in a JavaScript file. Must be at the top of a file.": "Active la vérification sémantique dans un fichier JavaScript. Doit se trouver au début d'un fichier.",
			"Enter file path": "Entrer le chemin d’accès au fichier",
			"Enter new file path...": "Entrez le nouveau chemin d’accès au fichier...",
			"Extract to constant": "Extraire en constante",
			"Extract to function": "Extraire en fonction",
			"Failed to resolve {0} as module": "Échec de la résolution de {0} en tant que module",
			"Fetching data for better TypeScript IntelliSense": "Récupération (fetch) des données pour l'amélioration de TypeScript IntelliSense",
			"File is not part of a JavaScript project. View the [jsconfig.json documentation]({0}) to learn more.": "Le fichier ne fait pas partie d’un projet JavaScript. Affichez les [tsconfig.json documentation]({0}) pour en savoir plus.",
			"File is not part of a TypeScript project. View the [tsconfig.json documentation]({0}) to learn more.": "Le fichier ne fait pas partie d’un projet TypeScript. Affichez les [tsconfig.json documentation]({0}) pour en savoir plus.",
			"File is not part opened folders": "Le fichier ne fait pas partie des dossiers ouverts",
			"Find file references failed. No resource provided.": "Échec de la recherche des références de fichiers. Aucune ressource fournie.",
			"Find file references failed. Requires TypeScript 4.2+.": "Échec de la recherche des références de fichiers. Nécessite TypeScript 4.2+.",
			"Find file references failed. Unknown file type.": "Échec de la recherche des références de fichiers. Type de fichier inconnu.",
			"Find file references failed. Unsupported file type.": "Échec de la recherche des références de fichiers. Type de fichier non pris en charge.",
			"Finding file references": "Recherche des références de fichiers",
			"Finding source definitions": "Recherche des définitions sources",
			"Fix all fixable JS/TS issues": "Résoudre tous les problèmes JS/TS pouvant être résolus",
			"Follow link": "Suivre le lien",
			"Go to Source Definition failed. No resource provided.": "Échec de l’aller à la définition source. Aucune ressource fournie.",
			"Go to Source Definition failed. Requires TypeScript 4.7+.": "Échec de l’aller à la définition source. Nécessite TypeScript 4.7+.",
			"Go to Source Definition failed. Unknown file type.": "Échec de l’aller à la définition source. Type de fichier inconnu.",
			"Go to Source Definition failed. Unsupported file type.": "Échec de l’aller à la définition source. Type de fichier non pris en charge.",
			"Initializing '{0}'": "Initialisation de '{0}'",
			"JS/TS IntelliSense Status": "État intelliSense JS/TS",
			"JSDoc comment": "Commentaire JSDoc",
			"Learn More": "En savoir plus",
			"Learn more about JS/TS refactorings": "En savoir plus sur les refactorisations JS/TS",
			"Learn more about managing TypeScript versions": "En savoir plus sur la gestion des versions TypeScript",
			"Loading IntelliSense status": "Chargement de l’état IntelliSense",
			"Move to File": "Déplacer vers le fichier",
			"Never": "Jamais",
			"Never in this Workspace": "Jamais dans cet espace de travail",
			"No": "Non",
			"No jsconfig": "Aucun jsconfig",
			"No opened folders": "Aucun dossier ouvert",
			"No source definitions found.": "Aucune définition trouvée.",
			"No tsconfig": "Aucun tsconfig",
			"Not now": "Pas maintenant",
			"Open config file": "Ouvrir le fichier de configuration",
			"Organize Imports": "Organiser des importations",
			"Partial Mode": "Mode partiel",
			"Paste with imports": "Coller avec les importations",
			"Please open a folder in VS Code to use a TypeScript or JavaScript project": "Ouvrez un dossier dans VS Code pour utiliser un projet TypeScript ou JavaScript",
			"Please report an issue against Yarn PnP": "Signalez un problème avec Yarn PnP",
			"Please update your TypeScript version": "Veuillez mettre à jour votre version de TypeScript",
			"Project Wide IntelliSense not available": "IntelliSense à l’échelle du projet non disponible",
			"Remove Unused Imports": "Supprimer des importations inutilisées",
			"Remove all unused code": "Supprimer tout code inutilisé",
			"Report Issue": "Signaler un problème",
			"Report issue against Yarn PnP": "Signaler un problème avec Yarn PnP",
			"Select Version": "Sélectionner la version",
			"Select code action to apply": "Sélectionner l'action de code à appliquer",
			"Select existing file...": "Sélectionner un fichier existant...",
			"Select move destination": "Sélectionner la destination de déplacement",
			"Select the TypeScript version used for JavaScript and TypeScript language features": "Sélectionner la version TypeScript utilisée pour les fonctionnalités de langage JavaScript et TypeScript",
			"Sort Imports": "Trier les importations",
			"Suppresses @ts-check errors on the next line of a file, expecting at least one to exist.": "Supprime les erreurs @ts-check sur la ligne suivante d'un fichier, en supposant qu'il y a au moins une erreur.",
			"Suppresses @ts-check errors on the next line of a file.": "Supprime les erreurs @ts-check sur la ligne suivante d'un fichier.",
			"TS Server has not started logging.": "Le serveur TS n'a pas démarré la journalisation.",
			"TS Server logging is currently enabled which may impact performance.": "La journalisation du serveur TS est actuellement activée, ce qui peut avoir un impact sur les performances.",
			"TS Server logging is off. Please set 'typescript.tsserver.log' and restart the TS server to enable logging": "La journalisation du serveur TS est désactivée. Définissez 'typescript.tsserver.log' et redémarrez le serveur TS pour activer la journalisation",
			"The JS/TS language service crashed 5 times in the last 5 Minutes.": "Le service de langage JS/TS s’est arrêté 5 fois au cours des 5 dernières minutes.",
			"The JS/TS language service crashed 5 times in the last 5 Minutes.\nThis may be caused by a plugin contributed by one of these extensions: {0}\nPlease try disabling these extensions before filing an issue against VS Code.": "Le service de langage JS/TS s’est arrêté 5 fois au cours des 5 dernières minutes.\nCela peut être dû à un plug-in fourni par l’une de ces extensions : {0}\nVeuillez essayer de désactiver ces extensions avant de soumettre un problème à VS Code.",
			"The JS/TS language service crashed.": "Le service de langage JS/TS s’est bloqué.",
			"The JS/TS language service crashed.\nThis may be caused by a plugin contributed by one of these extensions: {0}.\nPlease try disabling these extensions before filing an issue against VS Code.": "Le service de langage JS/TS s’est bloqué.\nCela peut être dû à un plug-in fourni par l’une de ces extensions : {0}.\nVeuillez essayer de désactiver ces extensions avant de soumettre un problème à VS Code.",
			"The JS/TS language service immediately crashed 5 times. The service will not be restarted.": "Le service de langage JS/TS s’est arrêté 5 fois immédiatement. Le service ne sera pas redémarré.",
			"The JS/TS language service immediately crashed 5 times. The service will not be restarted.\nThis may be caused by a plugin contributed by one of these extensions: {0}.\nPlease try disabling these extensions before filing an issue against VS Code.": "Le service de langage JS/TS s’est immédiatement arrêté 5 fois. Le service ne sera pas redémarré.\nCela peut être dû à un plug-in fourni par l’une de ces extensions : {0}.\nVeuillez essayer de désactiver ces extensions avant de soumettre un problème à VS Code.",
			"The current selection cannot be extracted": "Impossible d'extraire la sélection actuelle",
			"The path {0} doesn't point to a valid Node installation to run TS Server. Falling back to bundled Node.": "Le chemin {0} ne pointe pas vers une installation Node valide pour exécuter TS Server. Retour au Node en pack.",
			"The path {0} doesn't point to a valid tsserver install. Falling back to bundled TypeScript version.": "Le chemin {0} ne pointe pas vers une installation tsserver valide. Utilisation par défaut de la version TypeScript groupée.",
			"The workspace is using a version of the TypeScript Server that has been patched by Yarn PnP. This patching is a common source of bugs.": "L’espace de travail utilise une version du serveur TypeScript qui a été corrigée par Yarn PnP. Ce correctif est une source courante de bogues.",
			"The workspace is using an old version of TypeScript ({0}).\n\nBefore reporting an issue, please update the workspace to use TypeScript {1} or newer to make sure the bug has not already been fixed.": "L’espace de travail utilise une ancienne version de TypeScript ({0}).\n\nAvant de signaler un problème, veuillez mettre à jour l’espace de travail pour utiliser TypeScript {1} ou une version plus récente pour vérifier que le bogue n’a pas déjà été corrigé.",
			"This workspace contains a TypeScript version. Would you like to use the workspace TypeScript version for TypeScript and JavaScript language features?": "Cet espace de travail contient une version TypeScript. Voulez-vous utiliser la version TypeScript de l'espace de travail pour les fonctionnalités de langage TypeScript et JavaScript ?",
			"This workspace wants to use the Node installation at '{0}' to run TS Server. Would you like to use it?": "Cet espace de travail souhaite utiliser l'installation Node sur '{0}' pour exécuter TS Server. Voulez-vous l'utiliser ?",
			"To enable project-wide JavaScript/TypeScript language features, exclude folders with many files, like: {0}": "Pour activer les fonctionnalités de langage JavaScript/TypeScript à l'échelle du projet, excluez les dossiers contenant de nombreux fichiers, par exemple : {0}",
			"To enable project-wide JavaScript/TypeScript language features, exclude large folders with source files that you do not work on.": "Pour activer les fonctionnalités de langage JavaScript/TypeScript à l'échelle du projet, excluez les dossiers volumineux contenant des fichiers sources inutilisés.",
			"TypeScript Server Log": "TypeScript Server Log",
			"TypeScript Task in tasks.json contains \"\\\\\". TypeScript tasks tsconfig must use \"/\"": "La tâche Typescript dans tasks.json contient \"\\\\\". Les tâches Typescript tsconfig doivent utiliser \"/\"",
			"TypeScript Version": "TypeScript Version",
			"TypeScript language server exited with error. Error message is: {0}": "Le serveur de langage TypeScript a rencontré une erreur. Le message d'erreur est : {0}",
			"TypeScript: Configure Excludes": "TypeScript : configurer les exclusions",
			"Update imports for '{0}'?": "Mettre à jour les importations de '{0}' ?",
			"Update imports for the following {0} files?": "Mettre à jour les importations des fichiers {0} suivants ?",
			"Use VS Code's Version": "Utiliser la version de VS Code",
			"Use Workspace Version": "Utiliser la version de l'espace de travail",
			"VS Code's tsserver was deleted by another application such as a misbehaving virus detection tool. Please reinstall VS Code.": "Le tsserver de VSCode a été supprimé par une autre application, par exemple, un outil de détection de virus mal configuré. Réinstallez VS Code.",
			"Yes": "Oui",
			"build - {0}": "build - {0}",
			"destination files": "fichiers de destination",
			"invalid version": "La version n'est pas valide",
			"watch - {0}": "espion - {0}",
			"{0} (Fix all in file)": "{0} (Corriger tout dans le fichier)",
			"{0} implementations": "{0} implémentations",
			"{0} references": "{0} références"
		},
		"package": {
			"configuration.expandableHover": "Activez/désactivez le développement au pointage.",
			"configuration.implicitProjectConfig.checkJs": "Active/désactive la vérification sémantique des fichiers JavaScript. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.",
			"configuration.implicitProjectConfig.experimentalDecorators": "Active/désactive 'experimentalDecorators' dans les fichiers JavaScript qui ne font pas partie d'un projet. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.",
			"configuration.implicitProjectConfig.module": "Définit le système de module pour le programme. Voir plus : https://www.typescriptlang.org/tsconfig#module.",
			"configuration.implicitProjectConfig.strictFunctionTypes": "Active/désactive les [types de fonction stricts](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) dans les fichiers JavaScript et TypeScript qui ne font pas partie d'un projet. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.",
			"configuration.implicitProjectConfig.strictNullChecks": "Active/désactive les [vérifications de valeur null strictes](https://www.typescriptlang.org/tsconfig#strictNullChecks) dans les fichiers JavaScript et TypeScript qui ne font pas partie d'un projet. Les fichiers 'jsconfig.json' ou 'tsconfig.json existants remplacent ce paramètre.",
			"configuration.implicitProjectConfig.target": "Définissez la version du langage JavaScript cible pour les déclarations JavaScript émises et incluez les déclarations de bibliothèque. Afficher plus : https://www.typescriptlang.org/tsconfig#target.",
			"configuration.inlayHints.enumMemberValues.enabled": "Activer/désactiver les indicateurs d’incrustation pour les valeurs de membre dans les déclarations enum :\r\n```typescript\r\n\r\nenum MyValue {\r\n\tA /* = 0 */;\r\n\tB /* = 1 */;\r\n}\r\n \r\n```",
			"configuration.inlayHints.functionLikeReturnTypes.enabled": "Activer/désactiver les indicateurs d’incrustation pour les types de retour implicites sur les signatures de fonction :\r\n```typescript\r\n\r\nfunction foo() /* :number */ {\r\n\treturn Date.now();\r\n} \r\n \r\n```",
			"configuration.inlayHints.parameterNames.enabled": "Activer/désactiver les indicateurs d’incrustation pour les noms de paramètres :\r\n```typescript\r\n\r\nparseInt(/* str: */ '123', /* radix: */ 8)\r\n \r\n```",
			"configuration.inlayHints.parameterNames.suppressWhenArgumentMatchesName": "Supprime les indicateurs de nom de paramètre sur les arguments dont le texte est identique au nom du paramètre.",
			"configuration.inlayHints.parameterTypes.enabled": "Activer/désactiver les conseils d'incrustation pour les types de paramètres implicites :\r\n```typescript\r\n\r\nel.addEventListener('click', e /* :MouseEvent */ => ...)\r\n \r\n```",
			"configuration.inlayHints.propertyDeclarationTypes.enabled": "Activer/désactiver les indicateurs d’incrustation pour les types implicites sur les déclarations de propriété :\r\n```typescript\r\n\r\nclass Foo {\r\n\tprop /* :number */ = Date.now();\r\n}\r\n \r\n```",
			"configuration.inlayHints.variableTypes.enabled": "Activer/désactiver les indicateurs d’incrustation pour les types de variable implicites :\r\n```typescript\r\n\r\nconst foo /* :number */ = Date.now();\r\n \r\n```",
			"configuration.inlayHints.variableTypes.suppressWhenTypeMatchesName": "Supprime les indications de type sur les variables dont le nom est identique au nom du type.",
			"configuration.javascript.checkJs.checkJs.deprecation": "Ce paramètre est déprécié au profit de 'js/ts.implicitProjectConfig.checkJs'.",
			"configuration.javascript.checkJs.experimentalDecorators.deprecation": "Ce paramètre est déprécié au profit de 'js/ts.implicitProjectConfig.experimentalDecorators'.",
			"configuration.preferGoToSourceDefinition": "Permet à `Aller à la définition` d'éviter les fichiers de déclaration de type lorsque cela est possible en déclenchant `Aller à la définition source` à la place. Cela permet de déclencher `Aller à la définition de la source` avec le geste de la souris.",
			"configuration.suggest.autoImports": "Active/désactive les suggestions d'importation automatique.",
			"configuration.suggest.classMemberSnippets.enabled": "Activez/désactivez les saisies semi-automatiques d’extraits de code pour les membres de classe.",
			"configuration.suggest.completeFunctionCalls": "Fonctions complètes avec leur signature de paramètre.",
			"configuration.suggest.completeJSDocs": "Activez/désactivez la suggestion pour commenter JSDoc.",
			"configuration.suggest.includeAutomaticOptionalChainCompletions": "Activez/désactivez l’affichage des complétions sur des valeurs potentiellement indéfinies qui insèrent un appel de chaîne facultatif. Nécessite l’activation des vérifications de valeur null stricte.",
			"configuration.suggest.includeCompletionsForImportStatements": "Active/désactive les complétions basées sur l’importation automatique pour les instructions d’importation partiellement tapées.",
			"configuration.suggest.jsdoc.generateReturns": "Activez/désactivez la génération d’annotations « @returns » pour les modèles JSDoc.",
			"configuration.suggest.names": "Activez/désactivez l'inclusion de noms uniques à partir du fichier dans les suggestions JavaScript. Notez que les suggestions de nom sont toujours désactivées dans le code JavaScript qui fait l'objet d'une vérification sémantique à l'aide de '@ts-check' ou 'checkJs'.",
			"configuration.suggest.objectLiteralMethodSnippets.enabled": "Activer/désactiver la complétion d'extraits de code pour les méthodes dans les littéraux d'objet.",
			"configuration.suggest.paths": "Activer/désactiver des suggestions pour les chemins dans les instructions d'import et les appels require.",
			"configuration.surveys.enabled": "Activer/désactiver des enquêtes ponctuelles qui nous aident à améliorer le support JavaScript et TypeScript de VS Code.",
			"configuration.tsserver.experimental.enableProjectDiagnostics": "Permet de signaler les erreurs à l'échelle du projet.",
			"configuration.tsserver.maxTsServerMemory": "Quantité maximale de mémoire (en Mo) à allouer au processus du serveur TypeScript. Pour utiliser une limite de mémoire supérieure à 4 Go, utilisez #typescript.tsserver.nodePath# pour exécuter le serveur TS avec une installation Node personnalisée.",
			"configuration.tsserver.nodePath": "Exécutez TS Server sur une installation Node personnalisée. Il peut s'agir d'un chemin vers un exécutable Node ou 'node' si vous voulez que VS Code détecte une installation Node.",
			"configuration.tsserver.useSeparateSyntaxServer": "Activez/désactivez la génération dynamique d’un serveur TypeScript distinct capable de répondre plus rapidement aux opérations de syntaxe, comme le calcul du pliage ou le calcul des symboles de document.",
			"configuration.tsserver.useSeparateSyntaxServer.deprecation": "Ce paramètre a été déconseillé en faveur de « typescript.tsserver.useSyntaxServer » .",
			"configuration.tsserver.useSyntaxServer": "Contrôle si TypeScript lance un serveur dédié pour gérer plus rapidement les opérations liées à la syntaxe, comme le repli du code de calcul.",
			"configuration.tsserver.useSyntaxServer.always": "Utilisez un serveur de Syntaxe plus léger pour gérer toutes les opérations IntelliSense. Ce serveur de Syntaxe ne peut fournir que IntelliSense pour les fichiers ouverts.",
			"configuration.tsserver.useSyntaxServer.auto": "Générez un serveur complet et un poids plus léger dédié aux opérations de Syntaxe. Le serveur de Syntaxe est utilisé pour accélérer les opérations de syntaxe et fournir IntelliSense quand les projets sont en cours de chargement.",
			"configuration.tsserver.useSyntaxServer.never": "N’utilisez pas un serveur de Syntaxe dédié. Utilisez un seul serveur pour gérer toutes les opérations IntelliSense.",
			"configuration.tsserver.useVsCodeWatcher": "Utilisez les observateurs de fichiers de VS Code à la place de ceux de TypeScript. Nécessite l’utilisation de TypeScript 5.4+ dans l’espace de travail.",
			"configuration.tsserver.useVsCodeWatcher.deprecation": "Veuillez plutôt utiliser le paramètre `#typescript.tsserver.watchOptions#`.",
			"configuration.tsserver.watchOptions": "Configurez les stratégies de surveillance qui doivent être utilisées pour effectuer le suivi des fichiers et répertoires.",
			"configuration.tsserver.watchOptions.fallbackPolling": "Quand vous utilisez des événements de système de fichiers, cette option spécifie la stratégie de sondage qui est utilisée quand le système n'a plus d'observateurs de fichiers natifs et/ou ne prend pas en charge les observateurs de fichiers natifs.",
			"configuration.tsserver.watchOptions.fallbackPolling.dynamicPriorityPolling ": "Utilisez une file d'attente dynamique où les fichiers modifiés moins souvent sont vérifiés moins souvent.",
			"configuration.tsserver.watchOptions.fallbackPolling.fixedPollingInterval": "Recherchez les changements dans chaque fichier plusieurs fois par seconde à intervalle fixe.",
			"configuration.tsserver.watchOptions.fallbackPolling.priorityPollingInterval": "Recherchez les changements dans chaque fichier plusieurs fois par seconde, mais utilisez la méthode heuristique pour vérifier certains types de fichier moins souvent que d'autres.",
			"configuration.tsserver.watchOptions.synchronousWatchDirectory": "Désactivez la surveillance différée sur les répertoires. La surveillance différée est utile quand de nombreux changements de fichier sont susceptibles de se produire en même temps (par ex., un changement dans node_modules lié à l'exécution de npm install), mais vous pouvez aussi la désactiver avec cet indicateur pour des configurations moins courantes.",
			"configuration.tsserver.watchOptions.vscode": "Utilisez les observateurs de fichiers de VS Code à la place de ceux de TypeScript. Nécessite l’utilisation de TypeScript 5.4+ dans l’espace de travail.",
			"configuration.tsserver.watchOptions.watchDirectory": "Stratégie de surveillance d'arborescences de répertoires complètes sous des systèmes sans fonctionnalité de surveillance récursive des fichiers.",
			"configuration.tsserver.watchOptions.watchDirectory.dynamicPriorityPolling": "Utilisez une file d'attente dynamique où les répertoires modifiés moins souvent sont vérifiés moins souvent.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedChunkSizePolling": "Interroge les répertoires en blocs à intervalles réguliers.",
			"configuration.tsserver.watchOptions.watchDirectory.fixedPollingInterval": "Recherchez les changements dans chaque répertoire plusieurs fois par seconde à intervalle fixe.",
			"configuration.tsserver.watchOptions.watchDirectory.useFsEvents": "Essayez d'utiliser les événements natifs du système d'exploitation/système de fichiers pour les changements de répertoire.",
			"configuration.tsserver.watchOptions.watchFile": "Stratégie de surveillance des fichiers individuels.",
			"configuration.tsserver.watchOptions.watchFile.dynamicPriorityPolling": "Utilisez une file d'attente dynamique où les fichiers modifiés moins souvent sont vérifiés moins souvent.",
			"configuration.tsserver.watchOptions.watchFile.fixedChunkSizePolling": "Interroge les fichiers en blocs à intervalles réguliers.",
			"configuration.tsserver.watchOptions.watchFile.fixedPollingInterval": "Recherchez les changements dans chaque fichier plusieurs fois par seconde à intervalle fixe.",
			"configuration.tsserver.watchOptions.watchFile.priorityPollingInterval": "Recherchez les changements dans chaque fichier plusieurs fois par seconde, mais utilisez une méthode heuristique pour vérifier certains types de fichiers moins souvent que d'autres.",
			"configuration.tsserver.watchOptions.watchFile.useFsEvents": "Essayez d'utiliser les événements natifs du système d'exploitation/système de fichiers pour les changements de fichier.",
			"configuration.tsserver.watchOptions.watchFile.useFsEventsOnParentDirectory": "Essayez d'utiliser les événements natifs du système d'exploitation/système de fichiers pour écouter les changements des répertoires qui contiennent un fichier. Peut utiliser moins d'observateurs de fichiers, mais risque d'être moins précis.",
			"configuration.tsserver.web.projectWideIntellisense.enabled": "Activez/désactivez IntelliSense à l’échelle du projet sur le web. Nécessite l’exécution de VS Code dans un contexte approuvé.",
			"configuration.tsserver.web.projectWideIntellisense.suppressSemanticErrors": "Supprime les erreurs sémantiques sur le web même lorsque IntelliSense à l’échelle du projet est activé. Cette option est toujours activée lorsque IntelliSense à l’échelle du projet n’est pas activé ou disponible. Voir `#typescript.tsserver.web.projectWideIntellisense.enabled#`",
			"configuration.tsserver.web.typeAcquisition.enabled": "Activez/désactivez l'acquisition de packages sur le web. Cela active IntelliSense pour les packages importés. Nécessite `#typescript.tsserver.web.projectWideIntellisense.enabled#`. Actuellement non pris en charge pour Safari.",
			"configuration.typescript": "TypeScript",
			"configuration.updateImportsOnPaste": "Activez la mise à jour des importations lors du collage de code. Nécessite TypeScript 5.7+.\r\n\r\nPar défaut, cela affiche une option permettant de mettre à jour les importations après le collage. Vous pouvez utiliser le paramètre `#editor.pasteAs.preferences#` pour mettre à jour automatiquement les importations lors du collage : `\"editor.pasteAs.preferences\": [ \"text.updateImports.jsts\" ]`.",
			"description": "Fournit une prise en charge riche de langage pour JavaScript et TypeScript.",
			"displayName": "Fonctionnalités de langage TypeScript et JavaScript",
			"format.indentSwitchCase": "Mettre en retrait les clauses de cas dans les instructions switch. Nécessite l’utilisation de TypeScript 5.1+ dans l’espace de travail.",
			"format.insertSpaceAfterCommaDelimiter": "Définit le traitement des espaces après une virgule de délimitation.",
			"format.insertSpaceAfterConstructor": "Définit le traitement des espaces après le mot clé du constructeur.",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "Définit le traitement des espaces après le mot clé function pour les fonctions anonymes.",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "Définit la gestion des espaces après les mots clés dans une instruction de flux de contrôle.",
			"format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": "Définit le traitement des espaces après l'ouverture et avant la fermeture d'accolades vides.",
			"format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": "Définit le traitement des espaces après l'ouverture et avant la fermeture des accolades d'expression JSX.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": "Définit le traitement des espaces après l'ouverture et avant la fermeture des accolades non vides.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "Définit l’espace après ouverture et avant la fermeture de crochets non vides.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "Définit l’espace après ouverture et avant la fermeture de parenthèses non vides.",
			"format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": "Définit le traitement des espaces après l'ouverture et avant la fermeture des accolades de chaîne de modèle.",
			"format.insertSpaceAfterSemicolonInForStatements": " Définit le traitement des espaces après un point-virgule dans une instruction for.",
			"format.insertSpaceAfterTypeAssertion": "Définit le traitement des espaces après les assertions de type dans TypeScript.",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "Définit le traitement des espaces après un opérateur binaire.",
			"format.insertSpaceBeforeFunctionParenthesis": "Définit le traitement des espaces avant les parenthèses d'arguments de la fonction.",
			"format.placeOpenBraceOnNewLineForControlBlocks": "Définit si une accolade ouvrante dans un bloc de contrôle est placée ou non sur une nouvelle ligne.",
			"format.placeOpenBraceOnNewLineForFunctions": "Définit si une accolade ouvrante dans une fonction est placée ou non sur une nouvelle ligne.",
			"format.semicolons": "Définit la gestion des points-virgules facultatifs.",
			"format.semicolons.ignore": "N'insérez ou n'enlevez aucun point-virgule.",
			"format.semicolons.insert": "Insérez des points-virgules à la fin des instructions.",
			"format.semicolons.remove": "Supprimez les points-virgules inutiles.",
			"inlayHints.parameterNames.all": "Active les indicateurs de noms de paramètres pour les arguments littéraux et non littéraux.",
			"inlayHints.parameterNames.literals": "Active les indicateurs de noms de paramètres uniquement pour les arguments littéraux.",
			"inlayHints.parameterNames.none": "Désactiver les indicateurs de nom de paramètre.",
			"javascript.format.enable": "Activez/désactivez le formateur JavaScript par défaut.",
			"javascript.goToProjectConfig.title": "Accéder à la configuration du projet (jsconfig / tsconfig)",
			"javascript.preferences.jsxAttributeCompletionStyle.auto": "Insérez `={}` or `=\"\"` après les noms d'attribut en fonction du type d'accessoire. Consultez `#javascript.preferences.quoteStyle#` pour contrôler le type de guillemets utilisés pour les attributs de chaîne.",
			"javascript.preferences.organizeImports": "Préférences avancées qui contrôlent la façon dont les importations sont triées.",
			"javascript.referencesCodeLens.enabled": "Activez/désactivez les références CodeLens dans les fichiers JavaScript.",
			"javascript.referencesCodeLens.showOnAllFunctions": "Activez/désactivez les références CodeLens sur toutes les fonctions des fichiers JavaScript.",
			"javascript.suggestionActions.enabled": "Active/désactive les diagnostics de suggestion pour les fichiers JavaScript dans l'éditeur.",
			"javascript.validate.enable": "Activez/désactivez la validation JavaScript.",
			"reloadProjects.title": "Recharger le projet",
			"taskDefinition.tsconfig.description": "Fichier tsconfig qui définit la build TS.",
			"typescript.autoClosingTags": "Active/désactive la fermeture automatique des balises JSX.",
			"typescript.check.npmIsInstalled": "Vérifiez si npm est installé pour l’[acquisition automatique de type](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
			"typescript.disableAutomaticTypeAcquisition": "Désactive l’[acquisition automatique de type](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). L’acquisition automatique de type récupère les packages `@types` par le biais de npm afin d’améliorer IntelliSense pour les bibliothèques externes.",
			"typescript.enablePromptUseWorkspaceTsdk": "Permet d'inviter les utilisateurs à se servir de la version TypeScript configurée dans l'espace de travail pour IntelliSense.",
			"typescript.findAllFileReferences": "Rechercher les références de fichiers",
			"typescript.format.enable": "Activez/désactivez le formateur TypeScript par défaut.",
			"typescript.goToProjectConfig.title": "Accéder à la configuration du projet (tsconfig)",
			"typescript.goToSourceDefinition": "Atteindre la définition source",
			"typescript.implementationsCodeLens.enabled": "Activer/désactiver les implémentations CodeLens. Ce CodeLens affiche l'implémenteur d’une interface.",
			"typescript.implementationsCodeLens.showOnInterfaceMethods": "Activez/désactivez les implémentations CodeLens sur les méthodes d’interface.",
			"typescript.locale": "Définit la locale utilisée pour signaler les erreurs JavaScript et TypeScript. Par défaut, la locale de VS Code est utilisée.",
			"typescript.locale.auto": "Utilisez la langue d'affichage configurée de VS Code.",
			"typescript.npm": "Indique le chemin d’accès à l’exécutable npm utilisé pour l’[acquisition automatique de type](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).",
			"typescript.openTsServerLog.title": "Ouvrir le journal du serveur TS",
			"typescript.preferences.autoImportFileExcludePatterns": "Spécifiez les modèles globaux de fichiers à exclure des importations automatiques. Les chemins relatifs sont résolus par rapport à la racine de l'espace de travail. Les modèles sont évalués à l'aide de la sémantique tsconfig.json [`exclude`](https://www.typescriptlang.org/tsconfig#exclude).",
			"typescript.preferences.autoImportSpecifierExcludeRegexes": "Spécifiez des expressions régulières pour exclure les importations automatiques avec des spécificateurs d’importation correspondants. Exemples :\r\n\r\n- `^node:`\r\n- `lib/internal` (les barres obliques n'ont pas besoin d'être échappées...)\r\n- `/lib\\/internal/i` (...sauf si des barres obliques sont incluses pour les indicateurs « i » ou « u »)\r\n- `^lodash$` (autoriser uniquement les importations de sous-chemins depuis lodash)",
			"typescript.preferences.importModuleSpecifier": "Style de chemin préféré pour les importations automatiques.",
			"typescript.preferences.importModuleSpecifier.nonRelative": "Préfère une importation non relative basée sur le 'baseUrl' ou les 'paths' configurés dans votre 'jsconfig.json' / 'tsconfig.json'.",
			"typescript.preferences.importModuleSpecifier.projectRelative": "Préférer une importation non relative uniquement si le chemin d’importation relatif omet le répertoire du package ou du projet.",
			"typescript.preferences.importModuleSpecifier.relative": "Préfère un chemin relatif par rapport à l'emplacement du fichier importé.",
			"typescript.preferences.importModuleSpecifier.shortest": "Préfère une importation non relative uniquement si celle-ci comporte moins de segments de chemin qu'une importation relative.",
			"typescript.preferences.importModuleSpecifierEnding": "Fin de chemin par défaut des importations automatiques.",
			"typescript.preferences.importModuleSpecifierEnding.auto": "Utilisez les paramètres de projet pour sélectionner une valeur par défaut.",
			"typescript.preferences.importModuleSpecifierEnding.index": "Raccourcissez './component/index.js' en './component/index'.",
			"typescript.preferences.importModuleSpecifierEnding.js": "Ne pas raccourcir les terminaisons de chemin d’accès ; inclure l’extension '.js' ou '.ts'.",
			"typescript.preferences.importModuleSpecifierEnding.label.js": ".js / .ts",
			"typescript.preferences.importModuleSpecifierEnding.minimal": "Raccourcissez './component/index.js' en './component'.",
			"typescript.preferences.includePackageJsonAutoImports": "Activer/désactiver la recherche dans les dépendances 'package.json' pour les importations automatiques disponibles.",
			"typescript.preferences.includePackageJsonAutoImports.auto": "Rechercher dans les dépendances en fonction de l'impact estimé des performances.",
			"typescript.preferences.includePackageJsonAutoImports.off": "Ne jamais rechercher dans les dépendances.",
			"typescript.preferences.includePackageJsonAutoImports.on": "Toujours rechercher dans les dépendances.",
			"typescript.preferences.jsxAttributeCompletionStyle": "Style préféré pour les saisies semi-automatiques d’attribut JSX.",
			"typescript.preferences.jsxAttributeCompletionStyle.auto": "Insérez `={}` or `=\"\"` après les noms d'attribut en fonction du type d'accessoire. Consultez `#typescript.preferences.quoteStyle#` pour contrôler le type de guillemets utilisés pour les attributs de chaîne.",
			"typescript.preferences.jsxAttributeCompletionStyle.braces": "Insérez '={}' après les noms d’attributs.",
			"typescript.preferences.jsxAttributeCompletionStyle.none": "Insérez uniquement des noms d’attributs.",
			"typescript.preferences.organizeImports": "Préférences avancées qui contrôlent la façon dont les importations sont triées.",
			"typescript.preferences.organizeImports.accentCollation": "Nécessite `organizeImports.unicodeCollation: 'unicode'`. Comparez les caractères avec des signes diacritiques comme étant inégaux au caractère de base.",
			"typescript.preferences.organizeImports.caseFirst": "Nécessite `organizeImports.unicodeCollation: 'unicode'`, et `organizeImports.caseSensitivity` n'est pas `caseInsensitive`. Indique si les majuscules seront triées avant les minuscules.",
			"typescript.preferences.organizeImports.caseFirst.default": "Ordre par défaut donné par `locale`.",
			"typescript.preferences.organizeImports.caseFirst.lower": "Les minuscules viennent avant les majuscules. Par exemple` a, A, z, Z`.",
			"typescript.preferences.organizeImports.caseFirst.upper": "Les majuscules viennent avant les minuscules. Par exemple ` A, a, B, b`.",
			"typescript.preferences.organizeImports.caseSensitivity": "Spécifie comment les importations doivent être triées en fonction de la sensibilité à la casse. Si `auto` ou non spécifié, nous détecterons la sensibilité à la casse par fichier",
			"typescript.preferences.organizeImports.caseSensitivity.auto": "Détectez le respect de la casse pour le tri d’importation.",
			"typescript.preferences.organizeImports.caseSensitivity.insensitive": "Triez des importations sans respect de la casse.",
			"typescript.preferences.organizeImports.caseSensitivity.sensitive": "Triez des importations avec respect de la casse.",
			"typescript.preferences.organizeImports.locale": "Nécessite `organizeImports.unicodeCollation: 'unicode'`. Remplace les paramètres régionaux utilisés pour le classement. Spécifiez `auto` pour utiliser les paramètres régionaux de l’interface utilisateur.",
			"typescript.preferences.organizeImports.numericCollation": "Nécessite `organizeImports.unicodeCollation: 'unicode'`. Triez les chaînes numériques par valeur entière.",
			"typescript.preferences.organizeImports.typeOrder": "Spécifiez comment les importations nommées de type uniquement doivent être triées.",
			"typescript.preferences.organizeImports.typeOrder.auto": "Détectez l’emplacement où les importations nommées de type uniquement doivent être triées.",
			"typescript.preferences.organizeImports.typeOrder.first": "Seuls les types d'importation nommés sont triés au début de la liste d'importation. Par exemple, `importer { type A, type Y, B, Z } depuis 'module';`",
			"typescript.preferences.organizeImports.typeOrder.inline": "Les importations nommées sont triées par nom uniquement. Par exemple, `importer { type A, B, type Y, Z } depuis 'module';`",
			"typescript.preferences.organizeImports.typeOrder.last": "Seuls les types d'importation nommés sont triés à la fin de la liste d'importation. Par exemple, `importer { B, Z, type A, type Y } depuis 'module';`",
			"typescript.preferences.organizeImports.unicodeCollation": "Spécifiez si les importations doivent être triées à l'aide du classement Unicode ou ordinal.",
			"typescript.preferences.organizeImports.unicodeCollation.ordinal": "Triez des importations en tirant parti de la valeur numérique de chaque code de caractère.",
			"typescript.preferences.organizeImports.unicodeCollation.unicode": "Triez des importations en utilisant le classement de code Unicode.",
			"typescript.preferences.preferTypeOnlyAutoImports": "Incluez le mot clé 'type' dans les importations automatiques dès que possible. Nécessite l'utilisation de TypeScript 5.3+ dans l'espace de travail.",
			"typescript.preferences.quoteStyle": "Style de devis préféré à utiliser pour les correctifs rapides.",
			"typescript.preferences.quoteStyle.auto": "Déduire le type de guillemet à partir du code existant",
			"typescript.preferences.quoteStyle.double": "Toujours utiliser des guillemets doubles : « {0} »",
			"typescript.preferences.quoteStyle.single": "Toujours utiliser des guillemets simples : « {0} »",
			"typescript.preferences.renameMatchingJsxTags": "Sur une balise JSX, essayez de renommer la balise correspondante au lieu de renommer le symbole. Nécessite l’utilisation de TypeScript 5.1+ dans l’espace de travail.",
			"typescript.preferences.renameShorthandProperties.deprecationMessage": "Le paramètre 'typescript.preferences.renameShorthandProperties' a été déprécié au profit de 'typescript.preferences.useAliasesForRenames'",
			"typescript.preferences.useAliasesForRenames": "Activez/désactivez l’introduction d’alias pour les propriétés de raccourci d’objet durant les renommages.",
			"typescript.problemMatchers.tsc.label": "Problèmes liés à TypeScript",
			"typescript.problemMatchers.tscWatch.label": "Problèmes liés à TypeScript (mode espion)",
			"typescript.referencesCodeLens.enabled": "Activez/désactivez les références CodeLens dans les fichiers TypeScript.",
			"typescript.referencesCodeLens.showOnAllFunctions": "Activez/désactivez les références CodeLens sur toutes les fonctions des fichiers TypeScript.",
			"typescript.removeUnusedImports": "Supprimer des importations inutilisées",
			"typescript.reportStyleChecksAsWarnings": "Rapporter les vérifications de style en tant qu’avertissements.",
			"typescript.restartTsServer": "Redémarrer le serveur TS",
			"typescript.selectTypeScriptVersion.title": "Sélectionner la version de TypeScript...",
			"typescript.sortImports": "Trier les importations",
			"typescript.suggest.enabled": "Activer/désactiver les suggestions d'autocomplétion.",
			"typescript.suggestionActions.enabled": "Active/désactive les diagnostics de suggestion pour les fichiers TypeScript dans l'éditeur.",
			"typescript.tsc.autoDetect": "Contrôle la détection automatique des tâches tsc.",
			"typescript.tsc.autoDetect.build": "Créer uniquement des tâches de compilation à exécution unique.",
			"typescript.tsc.autoDetect.off": "Désactivez cette fonctionnalité.",
			"typescript.tsc.autoDetect.on": "Créer les tâches build et watch.",
			"typescript.tsc.autoDetect.watch": "Créer uniquement des tâches compile et watch.",
			"typescript.tsdk.desc": "Indique le chemin de dossier des fichiers tsserver et `lib*.d.ts` dans une installation de TypeScript à utiliser pour IntelliSense. Exemple : `./node_modules/typescript/lib`.\r\n\r\n- Si elle est spécifiée sous forme de paramètre utilisateur, la version de TypeScript dans `typescript.tsdk` remplace automatiquement la version de TypeScript intégrée.\r\n- Si elle est spécifiée sous forme de paramètre d’espace de travail, `typescript.tsdk` vous permet d’utiliser cette version d’espace de travail de TypeScript pour IntelliSense avec la commande `TypeScript: Select TypeScript version`.\r\n\r\nConsultez la [documentation de TypeScript](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) pour plus d’informations sur la gestion des versions de TypeScript.",
			"typescript.tsserver.enableRegionDiagnostics": "Active les diagnostics basés sur une région dans TypeScript. Nécessite l’utilisation de TypeScript 5.6+ dans l’espace de travail.",
			"typescript.tsserver.enableTracing": "Active le traçage des performances du serveur TS dans un répertoire. Ces fichiers de trace permettent de diagnostiquer les problèmes de performances du serveur TS. Le journal peut contenir des chemins de fichiers, du code source et d'autres informations potentiellement sensibles de votre projet.",
			"typescript.tsserver.log": "Active la journalisation du serveur TS dans un fichier. Ce journal peut être utilisé pour diagnostiquer les problèmes du serveur TS. Il peut contenir des chemins de fichier, du code source et d'autres informations potentiellement sensibles de votre projet.",
			"typescript.tsserver.pluginPaths": "Chemins supplémentaires pour découvrir les plug-ins Service de langage Typescript.",
			"typescript.tsserver.pluginPaths.item": "Un chemin absolu ou un chemin relatif. Le chemin d’accès relatif sera résolu en fonction des dossiers de l’espace de travail.",
			"typescript.tsserver.trace": "Active le traçage des messages envoyés au serveur TS. Cette trace peut être utilisée pour diagnostiquer les problèmes du serveur TS. Elle peut contenir des chemins de fichier, du code source et d'autres informations potentiellement sensibles de votre projet.",
			"typescript.updateImportsOnFileMove.enabled": "Active/désactive la mise à jour automatique des chemins d’importation quand vous renommez ou déplacez un fichier dans VS Code.",
			"typescript.updateImportsOnFileMove.enabled.always": "Toujours mettre à jour les chemins automatiquement.",
			"typescript.updateImportsOnFileMove.enabled.never": "Ne jamais renommer les chemins et ne pas demander.",
			"typescript.updateImportsOnFileMove.enabled.prompt": "Demander à chaque renommage.",
			"typescript.validate.enable": "Activez/désactivez la validation TypeScript.",
			"typescript.workspaceSymbols.excludeLibrarySymbols": "Excluez les symboles provenant de fichiers de bibliothèque dans les résultats `Accéder au symbole dans l'espace de travail`. Nécessite l'utilisation de TypeScript 5.3+ dans l'espace de travail.",
			"typescript.workspaceSymbols.scope": "Détermine quels sont les fichiers recherchés par [Atteindre le symbole dans l’espace de travail](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).",
			"typescript.workspaceSymbols.scope.allOpenProjects": "Recherchez des symboles dans tous les projets JavaScript ou TypeScript ouverts.",
			"typescript.workspaceSymbols.scope.currentProject": "Recherche uniquement les symboles dans le projet JavaScript ou TypeScript actif.",
			"virtualWorkspaces": "Dans les espaces de travail virtuels, la résolution et la recherche de références dans les fichiers ne sont pas prises en charge.",
			"walkthroughs.nodejsWelcome.debugJsFile.altText": "Déboguez et exécutez votre code JavaScript dans Node.js avec Visual Studio Code.",
			"walkthroughs.nodejsWelcome.debugJsFile.description": "Une fois que vous avez installé Node.js, vous pouvez exécuter des programmes JavaScript sur un terminal en entrant ``node your-file-name.js``\r\nUn autre moyen simple d’exécuter Node.js programmes consiste à utiliser le débogueur de VS Code, ce qui vous permet d’exécuter votre code, de vous mettre en pause à différents points et de vous aider à comprendre ce qui se passe pas à pas.\r\n[Start Debugging](command:javascript-walkthrough.commands.debugJsFile)",
			"walkthroughs.nodejsWelcome.debugJsFile.title": "Exécuter et déboguer votre JavaScript",
			"walkthroughs.nodejsWelcome.description": "Tirez le meilleur parti de l’expérience JavaScript de premier niveau de Visual Studio Code.",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.description": "Node.js est un moyen simple d’exécuter du code JavaScript. Vous pouvez l’utiliser pour créer rapidement des applications et des serveurs en ligne de commande. Il est également fourni avec npm, un gestionnaire de package qui facilite la réutilisation et le partage de code JavaScript.\r\n[Install Node.js](https://nodejs.org/en/download/package-manager/)",
			"walkthroughs.nodejsWelcome.downloadNode.forLinux.title": "Installer Node.js",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.description": "Node.js est un moyen simple d’exécuter du code JavaScript. Vous pouvez l’utiliser pour créer rapidement des applications et des serveurs en ligne de commande. Il est également fourni avec npm, un gestionnaire de package qui facilite la réutilisation et le partage de code JavaScript.\r\n[Install Node.js](https://nodejs.org/en/download/)",
			"walkthroughs.nodejsWelcome.downloadNode.forMacOrWindows.title": "Installer Node.js",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.altText": "En savoir plus sur JavaScript et Node.js dans Visual Studio Code.",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.description": "Vous souhaitez vous familiariser avec JavaScript, Node.js et VS Code ? N’oubliez pas d’extraire nos documents !\r\nNous avons de nombreuses ressources pour l’apprentissage des [JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript) et [Node.js](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial).\r\n\r\n[Learn More](https://code.visualstudio.com/docs/nodejs/nodejs-tutorial)",
			"walkthroughs.nodejsWelcome.learnMoreAboutJs.title": "Explorer davantage",
			"walkthroughs.nodejsWelcome.makeJsFile.description": "Nous allons écrire notre premier fichier JavaScript. Nous devons créer un fichier et l’enregistrer avec l’extension ``.js`` à la fin du nom de fichier.\r\n[Créer un fichier JavaScript](command:javascript-walkthrough.commands.createJsFile)",
			"walkthroughs.nodejsWelcome.makeJsFile.title": "Créer un fichier JavaScript",
			"walkthroughs.nodejsWelcome.title": "Démarrage avec JavaScript et Node.js",
			"workspaceTrust": "L’extension nécessite l’approbation d’espace de travail lorsque la version de l’espace de travail est utilisée car elle exécute le code spécifié par l’espace de travail."
		}
	}
}