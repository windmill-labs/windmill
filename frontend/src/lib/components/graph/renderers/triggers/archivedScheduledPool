	<button
		class="w-full border rounded-sm bg-surface shadow-md center-center items-center max-w-full
			{selected ? 'outline outline-offset-0  outline-2  outline-slate-500 dark:outline-gray-400' : ''}"
		on:click={() => dispatch('select', 'triggers')}
		on:mouseenter={() => (hover = true)}
		on:mouseleave={() => (hover = false)}
	>
		<div class="flex flex-row w-min-0 gap-2 w-fit max-w-full px-1 py-1">
			{#each visibleTriggerItems as item (item.id)}
				<div class="grow {item.grow ? 'grow' : 'shrink-0'} min-w-0 center-center">
					{#if item.type === 'triggersBadge'}
						<div class="flex flex-row gap-2">
							<TriggersBadge
								triggersToDisplay={item.data.triggersToDisplay}
								showOnlyWithCount={false}
								{path}
								{newItem}
								{isFlow}
								{selected}
								on:select
							/>
						</div>
					{:else if item.type === 'text'}
						<div class="grow min-w-0 items-center text-2xs font-normal">
							{item.data.text}
						</div>
					{:else if item.type === 'insertButton'}
						{#if !triggerScriptModule}
							<InsertModuleButton
								disableAi={data.disableAi}
								on:new={(e) => {
									dispatch('new', e.detail)
									simplifiedTriggers = true
									addSchedule()
								}}
								on:pickScript={(e) => {
									dispatch('pickScript', e.detail)
									simplifiedTriggers = true
									addSchedule()
								}}
								on:select={() => {
									dispatch('select', 'triggers')
									$selectedTrigger = 'scheduledPoll'
								}}
								kind="trigger"
								index={data?.index ?? 0}
								modules={data?.modules ?? []}
								buttonClasses={twMerge(
									'bg-surface hover:bg-surface-hover rounded-md border text-xs',
									'w-6 h-6',
									'relative center-center',
									'flex-shrink-0'
								)}
							/>
						{:else if simplifiedTriggers && data.flowIsSimplifiable}
							<div
								class="text-2xs text-secondary min-w-0 font-normal text-center rounded-sm grow shadow-md w-full border"
							>
								<MapItem
									mod={triggerScriptModule}
									insertable={false}
									bgColor={getStateColor(undefined, darkMode, true, false)}
									modules={data.modules ?? []}
									moving={''}
									flowJobs={undefined}
									on:select
									isTrigger={true}
								/>
							</div>
						{/if}
					{/if}
				</div>
			{/each}

			{#if data.flowIsSimplifiable}
				<Popover notClickable placement="auto">
					<button
						class="absolute -top-[10px] -right-[10px] rounded-full h-[20px] w-[20px] trash center-center text-secondary
	outline-[1px] outline dark:outline-gray-500 outline-gray-300 bg-surface duration-150 hover:bg-nord-950 hover:text-white"
						on:click|preventDefault|stopPropagation={() =>
							(simplifiedTriggers = !simplifiedTriggers)}
					>
						{#if simplifiedTriggers}
							<Maximize2 size={12} strokeWidth={2} />
						{:else}
							<Minimize2 size={12} strokeWidth={2} />
						{/if}
					</button>
					<svelte:fragment slot="text"
						>{simplifiedTriggers
							? 'Expand schedule poll nodes'
							: 'Collapse schedule poll nodes'}</svelte:fragment
					>
				</Popover>
			{/if}

			{#if data.flowIsSimplifiable && simplifiedTriggers && triggerScriptModule}
				<Popover notClickable placement="auto">
					<button
						class="absolute -top-[10px] right-[14px] rounded-full h-[20px] w-[20px] trash center-center text-secondary
	outline-[1px] outline dark:outline-gray-500 outline-gray-300 bg-surface duration-150 hover:bg-red-400 hover:text-white
	 {hover || selected ? '' : '!hidden'}"
						on:click|preventDefault|stopPropagation={(event) =>
							dispatch('delete', {
								event,
								id: triggerScriptModule?.id,
								type: triggerScriptModule?.value?.type
							})}
					>
						<X class="mx-[3px]" size={12} strokeWidth={2} />
					</button>
					<svelte:fragment slot="text">Delete scheduled poll trigger</svelte:fragment>
				</Popover>
			{/if}
		</div>
	</button>