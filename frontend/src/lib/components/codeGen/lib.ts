import { Configuration, OpenAIApi } from 'openai'
import type { SupportedLanguage } from '../../common'
import { OpenAPI } from '../../gen/core/OpenAPI'
import { Script, WorkspaceService } from '../../gen'

import { workspaceStore } from '$lib/stores'

const config = new Configuration()

const WARNING_MSG =
	'WARNING: this code was generated by OpenAI, it might not be accurate. Use at your own risk.'

const commentTypes = {
	[Script.language.PYTHON3]: '#',
	[Script.language.DENO]: '//',
	[Script.language.GO]: '//',
	[Script.language.BASH]: '#',
	[Script.language.POSTGRESQL]: '--',
	[Script.language.NATIVETS]: '//'
}

const prompts = {
	[Script.language.PYTHON3]: 'Write a function in python called "main". It should {description}.',
	[Script.language.DENO]:
		'Write a function in typescript called "main". It should {description}. Export the "main" function.',
	[Script.language.GO]:
		'Write a function in go called "main". It should {description}. Import the packages you need. The return type of the function has to be ({return_type}, error). The file package has to be "inner".',
	[Script.language.BASH]:
		'Write bash code that should {description}. Do not include "#!/bin/bash". Arguments are always string and can only be obtained with "var1="$1"", "var2="$2"", etc... You do not need to check if the arguments are present.',
	[Script.language.POSTGRESQL]:
		'Write SQL code that should {description}. Arguments can be obtained with $1::{type}, $2::{type}, etc...',
	[Script.language.NATIVETS]:
		'Write a function in typescript called "main". It should {description}. You should use fetch and are not allowed to import any libraries. Export the "main" function.'
}

const SUPPORTED_LANGUAGES = new Set(Object.keys(prompts))

let workspace: string | undefined = undefined

workspaceStore.subscribe((value) => {
	workspace = value
})

async function checkIfOpenAIAvailable({ language }: { language: SupportedLanguage }) {
	if (workspace === undefined) {
		return false
	}
	const resp = await WorkspaceService.openaiKeyExists({ workspace })
	return resp.exists && SUPPORTED_LANGUAGES.has(language)
}

interface PromptGenerationOptions {
	language: SupportedLanguage
	description: string
}

interface ScriptGenerationOptions extends PromptGenerationOptions {}

async function generateScript(scriptOptions: ScriptGenerationOptions): Promise<string> {
	console.log(scriptOptions)
	const baseURL = `${OpenAPI.BASE}/w/${workspace}/openai/proxy`
	const openai = new OpenAIApi(config, baseURL)
	const prompt = prompts[scriptOptions.language].replace('{description}', scriptOptions.description)

	const completion = await openai.createCompletion(
		{
			model: 'text-davinci-003',
			prompt: prompt,
			max_tokens: 512
		},
		{
			headers: {
				Authorization: false
			}
		}
	)

	const result = completion.data.choices[0].text

	if (result === undefined) {
		throw new Error('No result from OpenAI')
	}

	if (scriptOptions.language == Script.language.GO) {
		const warning = commentTypes[scriptOptions.language] + ' ' + WARNING_MSG + '\n'

		return result.trim().replace('package inner\n', 'package inner\n' + warning)
	} else {
		return commentTypes[scriptOptions.language] + ' ' + WARNING_MSG + '\n\n' + result.trim()
	}
}

export { generateScript, checkIfOpenAIAvailable }
