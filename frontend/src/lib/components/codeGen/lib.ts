import { OpenAI } from 'openai'
import type { SupportedLanguage } from '../../common'
import { OpenAPI } from '../../gen/core/OpenAPI'
import { Script } from '../../gen'

import { workspaceStore } from '$lib/stores'

const WARNING_MSG =
	'WARNING: this code was generated by OpenAI, it might not be accurate. Use at your own risk.'

const commentTypes = {
	[Script.language.PYTHON3]: '#',
	[Script.language.DENO]: '//',
	[Script.language.GO]: '//',
	[Script.language.BASH]: '#',
	[Script.language.POSTGRESQL]: '--',
	[Script.language.NATIVETS]: '//',
	[Script.language.BUN]: '//'
}

const prompts = {
	[Script.language.PYTHON3]:
		'Write a function in python called "main". The function should {description}. Do not call the main function.',
	[Script.language.DENO]:
		'Write a function in typescript called "main". The function should {description}. Specify the parameter types. You are in a Deno environment. You can import deno libraries or you can also import npm libraries like that: "import cowsay from "npm:cowsay@1.5.0";". Export the "main" function like this: "export function main(...)". Do not call the main function.',
	[Script.language.GO]:
		'Write a function in go called "main". The function should {description}. Import the packages you need. The return type of the function has to be ({return_type}, error). The file package has to be "inner".',
	[Script.language.BASH]:
		'Write bash code that should {description}. Do not include "#!/bin/bash". Arguments are always string and can only be obtained with "var1="$1"", "var2="$2"", etc... You do not need to check if the arguments are present.',
	[Script.language.POSTGRESQL]:
		'Write SQL code that should {description}. Arguments can be obtained with $1::{type}, $2::{type}, etc...',
	[Script.language.NATIVETS]:
		'Write a function in typescript called "main". The function should {description}. Specify the parameter types. You should use fetch and are not allowed to import any libraries. Export the "main" function like this: "export function main(...)". Do not call the main function.',
	[Script.language.BUN]:
		'Write a function in typescript called "main".  The function should {description}. Specify the parameter types. You are in a Node.js environment. You can import npm libraries. Export the "main" function like this: "export function main(...)". Do not call the main function.'
}

export const SUPPORTED_LANGUAGES = new Set(Object.keys(prompts))

let workspace: string | undefined = undefined

workspaceStore.subscribe((value) => {
	workspace = value
})

interface PromptGenerationOptions {
	language: SupportedLanguage
	description: string
}

interface ScriptGenerationOptions extends PromptGenerationOptions {}

export async function generateScript(scriptOptions: ScriptGenerationOptions): Promise<string> {
	const baseURL = `${location.origin}${OpenAPI.BASE}/w/${workspace}/openai/proxy`
	const openai = new OpenAI({
		baseURL,
		apiKey: 'fakekey',
		defaultHeaders: {
			Authorization: ''
		}
	})

	const systemPrompt =
		'Always wrap the answer code like that: ```language\n{code}\n```. Put any explanation in the code as comments.'
	const prompt = prompts[scriptOptions.language].replace('{description}', scriptOptions.description)

	const completion = await openai.chat.completions.create({
		model: 'gpt-4',
		max_tokens: 512,
		messages: [
			{
				role: 'user',
				content: prompt
			},
			{
				role: 'system',
				content: systemPrompt
			}
		]
	})

	let result = completion.choices[0]?.message?.content

	if (!result) {
		throw new Error('No result from OpenAI')
	}

	const match = result.match(/```[a-zA-z]+\n([^]+)```/)

	if (!match || match.length < 2) {
		throw new Error('No code block found')
	}

	result = match[1]

	if (scriptOptions.language == Script.language.GO) {
		const warning = commentTypes[scriptOptions.language] + ' ' + WARNING_MSG + '\n'

		return result.trim().replace('package inner\n', 'package inner\n' + warning)
	} else if (scriptOptions.language == Script.language.BASH) {
		return (
			'# shellcheck shell=bash\n' +
			commentTypes[scriptOptions.language] +
			' ' +
			WARNING_MSG +
			'\n\n' +
			result.trim()
		)
	} else {
		return commentTypes[scriptOptions.language] + ' ' + WARNING_MSG + '\n\n' + result.trim()
	}
}
