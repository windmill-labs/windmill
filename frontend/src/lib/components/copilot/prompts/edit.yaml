system: |-
  You write code as instructed by the user. Only output code. Wrap the code like that: 
  ```language
  {code}
  ```
  Put explanations directly in the code as comments.
prompts:
  python3:
    prompt: |-
      Here's my python3 code: 
      ```python
      {code}
      ```
      Additional information: We have to export a "main" function and specify the parameter types but do not call it.
      You have access to the following resource types, if you need them, you have to define the TypedDict exactly as specified (class name has to be IN LOWERCASE) and add them as parameters: {resourceTypes}
      Only use the ones you need. If the TypedDict name conflicts with the imported object, rename the imported object NOT THE TYPE.
      My instructions: {description}
    example_description: add comments
    example_code: |-
      import random

      def main(name: str):
          print("hello", name)
          return random.randint(0, 100)
    example_answer: |-
      ```python
      import random

      def main(name: str):
          print("hello", name) # print hello name to the console
          return random.randint(0, 100) # return a random number between 0 and 100
      ```
  deno:
    prompt: |-
      Here's my TypeScript code in a deno running environment:
      ```typescript
      {code}
      ```
      Additional information: We have to export a "main" function like this: "export async function main(...)" and specify the parameter types but do not call it.
      You have access to the following resource types, if you need them, you have to define the type exactly as specified and add them as parameters: {resourceTypes}
      Only use the ones you need. If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      My instructions: {description}
    example_description: add comments
    example_code: |-
      export async function main(name: string) {
        console.log("hello", name)
        return Math.floor(Math.random() * 100)
      }
    example_answer: |-
      ```typescript
      export async function main(name: string) {
        console.log("hello", name) // print hello name to the console
        return Math.floor(Math.random() * 100) // return a random number between 0 and 100
      }
      ```
  go:
    prompt: |-
      Here's my go code: 
      ```go
      {code}
      ```
      Additional information: We have to export a "main" function. Import the packages you need. The return type of the function has to be ({return_type}, error). The file package has to be "inner"
      My instructions: {description}
    example_description: add comments
    example_code: |-
      package inner

      import (
        "fmt"
        "math/rand"
      )

      func main(name string) (int, error) {
        fmt.Println("hello", name)
        return rand.Intn(100), nil
      }
    example_answer: |-
      ```go
      package inner

      import (
        "fmt"
        "math/rand"
      )

      func main(name string) (int, error) {
        fmt.Println("hello", name) // print hello name to the console
        return rand.Intn(100), nil // return a random number between 0 and 100
      }
      ```
  bash:
    prompt: |-
      Here's my bash code: 
      ```shell
      {code}
      ```
      Additional information: Do not include "#!/bin/bash". Arguments are always string and can only be obtained with "var1="$1"", "var2="$2"", etc... You do not need to check if the arguments are present.
      My instructions: {description}
    example_description: add comments
    example_code: |-
      # shellcheck shell=bash
      name="$1"
      echo "hello $name"
    example_answer: |-
      ```shell
      # shellcheck shell=bash
      name="$1" # get the name argument
      echo "hello $name" # print hello name
      ```
  postgresql:
    prompt: |-
      Here's my PostgreSQL code: 
      ```sql
      {code}
      ```
      Additional information: Arguments can be obtained directly in the statement with `$1::{type}`, `$2::{type}`, etc... Name the parameters by adding comments before the command like that: `-- $1 name1` or `-- $2 name = default` (one per row, do not include the type)
      My instructions: {description}
    example_description: also insert a product description
    example_code: |-
      -- $1 name
      -- $2 price
      INSERT INTO products (name, price) VALUES ($1::text, $2::numeric)
    example_answer: |-
      ```sql
      -- $1 name
      -- $2 price
      -- $3 description
      INSERT INTO products (name, price, description) VALUES ($1::text, $2::numeric, $3::text)
      ```
  mysql:
    prompt: |-
      Here's my MySQL code: 
      ```sql
      {code}
      ```
      Additional information: Arguments can be obtained directly in the statement with ?. Name the parameters by adding comments before the command like that: -- ? name1 ({type}) (one per row)
      My instructions: {description}
    example_description: also insert a product description
    example_code: |-
      -- ? name (text)
      -- ? price (float)
      INSERT INTO products (name, price) VALUES (?, ?)
    example_answer: |-
      ```sql
      -- $1 name (text)
      -- $2 price (float)
      -- $3 description (text)
      INSERT INTO products (name, price, description) VALUES (?, ?, ?)
      ```
  nativets:
    prompt: |-
      Here's my TypeScript code: 
      ```typescript
      {code}
      ```
      Additional information: We have to export a "main" function like this: "export async function main(...)" and specify the parameter types but do not call it.
      You should use fetch and are not allowed to import any libraries.
      You have access to the following resource types, if you need them, you have to define the type exactly as specified and add them as parameters: {resourceTypes}
      Only use the ones you need. If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      My instructions: {description}
    example_description: add comments
    example_code: |-
      export async function main() {
        const res = await fetch("https://jsonplaceholder.typicode.com/todos/1", {
          headers: { "Content-Type": "application/json" },
        });
        return res.json();
      }
    example_answer: |-
      ```typescript
      export async function main() {
        // fetch the data from jsonplaceholder
        const res = await fetch("https://jsonplaceholder.typicode.com/todos/1", {
          headers: { "Content-Type": "application/json" },
        });
        return res.json();
      }
      ```
  bun:
    prompt: |-
      Here's my TypeScript code in a node.js running environment: 
      ```typescript
      {code}
      ```
      Additional information: We have to export a "main" function like this: "export async function main(...)" and specify the parameter types but do not call it.
      You have access to the following resource types, if you need them, you have to define the type exactly as specified and add them as parameters: {resourceTypes}
      Only use the ones you need. If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      My instructions: {description}
    example_description: add comments
    example_code: |-
      export async function main(name: string) {
        console.log("hello", name)
        return Math.floor(Math.random() * 100)
      }
    example_answer: |-
      ```typescript
      export async function main(name: string) {
        console.log("hello", name) // print hello name to the console
        return Math.floor(Math.random() * 100) // return a random number between 0 and 100
      }
      ```
  frontend:
    prompt: |-
      Here's my client-side javascript code: 
      ```javascript
      {code}
      ```
      Additional information: You can access the context object with the ctx global variable. 
      The app state is a store that can be used to store data. You can access and update the state object with the state global variable like this: state.foo = 'bar'
      You can use the goto function to navigate to a specific URL: goto(path: string, newTab?: boolean)
      Use the setTab function to manually set the tab of a Tab component: setTab(id: string, index: string)
      Use the recompute function to recompute a component: recompute(id: string)
      Use the getAgGrid function to get the ag-grid instance of a table: getAgGrid(id: string)
      The setValue function is meant to set or force the value of a component: setValue(id: string, value: any).
      My instructions: {description}
    example_description: add comments
    example_code: |-
      var email = ctx.email;

      setValue('my_field', email);
    example_answer: |-
      ```javascript
      // Access the email from the context object
      var email = ctx.email;

      // Use the setValue function to set the value of the input field with id 'my_field' to the email
      setValue('my_field', email);
      ```
