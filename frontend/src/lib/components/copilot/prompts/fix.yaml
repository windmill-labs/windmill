system: |-
  You fix the code shared by the user. Only output code. Wrap the code in a code block. 
  Explain the error and the fix after generating the code inside an <explanation> tag.
  Also put explanations directly in the code as comments.

  Here's how interactions have to look like:
  user: {sample_question}
  assistant: ```language
  {code}
  ```
  <explanation>{explanation}</explanation>
prompts:
  python3:
    prompt: |-
      Here's my python3 code: 
      ```python
      {code}
      ```
      <contextual_information>
      We have to export a "main" function and specify the parameter types but do not call it.
      You can take as parameters resources which are dictionaries containing credentials or configuration information. Name the resource parameters like this: "{resource_type}_resource". 
      The following resource types are available:
      <resourceTypes>
      {resourceTypes}
      </resourceTypes>
      Only define the type for resources that are actually needed to achieve the function purpose. The resource type name has to be exactly as specified (has to be IN LOWERCASE). If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  deno:
    prompt: |-
      Here's my TypeScript code in a deno running environment:
      ```typescript
      {code}
      ```
      <contextual_information>
      We have to export a "main" function like this: "export async function main(...)" and specify the parameter types but do not call it.
      If needed, the standard fetch method is available globally, do not import it.
      You can take as parameters resources which are dictionaries containing credentials or configuration information. Name the resource parameters like this: "{resource_type}Resource".
      The following resource types are available:
      <resourceTypes>
      {resourceTypes}
      </resourceTypes>
      Only define the type for resources that are actually needed to achieve the function purpose. The resource type name has to be exactly as specified. If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  go:
    prompt: |-
      Here's my go code: 
      ```go
      {code}
      ```
      <contextual_information>
      We have to export a "main" function. Import the packages you need. The return type of the function has to be ({return_type}, error). The file package has to be "inner"
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  bash:
    prompt: |-
      Here's my bash code: 
      ```shell
      {code}
      ```
      <contextual_information>
      Do not include "#!/bin/bash". Arguments are always string and can only be obtained with "var1="$1"", "var2="$2"", etc... You do not need to check if the arguments are present.
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  postgresql:
    prompt: |-
      Here's my PostgreSQL code: 
      ```sql
      {code}
      ```
      <contextual_information>
      Arguments can be obtained directly in the statement with `$1::{type}`, `$2::{type}`, etc... Name the parameters (without specifying the type) by adding comments before the statement like that: `-- $1 name1` or `-- $2 name = default` (one per row)
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  mysql:
    prompt: |-
      Here's my MySQL code: 
      ```sql
      {code}
      ```
      <contextual_information>
      Arguments can be obtained directly in the statement with ?. Name the parameters by adding comments before the statement like that: `-- ? name1 ({type})` or `-- ? name2 ({type}) = default` (one per row)
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  bigquery:
    prompt: |-
      Here's my BigQuery code: 
      ```sql
      {code}
      ```
      <contextual_information>
      You can define arguments by adding comments before the statement like that: `-- @name1 ({type})` or `-- @name2 ({type}) = default` (one per row). They can then be obtained directly in the statement with `@name1`, `@name2`, etc....
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  snowflake:
    prompt: |-
      Here's my snowflake code: 
      ```sql
      {code}
      ```
      <contextual_information>
      Arguments can be obtained directly in the statement with ?. Name the parameters by adding comments before the statement like that: `-- ? name1 ({type})` or `-- ? name2 ({type}) = default` (one per row)
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  mssql:
    prompt: |-
      Here's my Microsoft SQL Server code: 
      ```sql
      {code}
      ```
      <contextual_information>
      Arguments can be obtained directly in the statement with @p1, @p2, etc.. Name the parameters by adding comments before the statement like that: `-- @p1 name1 ({type})` or `-- @p2 name2 ({type}) = default` (one per row)
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  graphql:
    prompt: |-
      Here's my graphql code: 
      ```graphql
      {code}
      ```
      <contextual_information>
      Add the needed arguments as query parameters.
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  powershell:
    prompt: |-
      Here's my powershell code: 
      ```powershell
      {code}
      ```
      <contextual_information>
      Arguments can be obtained by calling the param function on the first line like that: `param($ParamName1, $ParamName2 = "default value", [{type}]$ParamName3, ...)`
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  nativets:
    prompt: |-
      Here's my TypeScript code: 
      ```typescript
      {code}
      ```
      <contextual_information>
      We have to export a "main" function like this: "export async function main(...)" and specify the parameter types but do not call it.
      You can take as parameters resources which are dictionaries containing credentials or configuration information. Name the resource parameters like this: "{resource_type}Resource". 
      The following resource types are available:
      <resourceTypes>
      {resourceTypes}
      </resourceTypes>
      Only define the type for resources that are actually needed to achieve the function purpose. The resource type name has to be exactly as specified. If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      </contextual_information>
      I get the following error: {error}
      Fix my code.
  bun:
    prompt: |-
      Here's my TypeScript code: 
      ```typescript
      {code}
      ```
      <contextual_information>
      We have to export a "main" function like this: "export async function main(...)" and specify the parameter types but do not call it.
      If needed, the standard fetch method is available globally, do not import it.
      You can take as parameters resources which are dictionaries containing credentials or configuration information. Name the resource parameters like this: "{resource_type}Resource".
      The following resource types are available:
      <resourceTypes>
      {resourceTypes}
      </resourceTypes>
      Only define the type for resources that are actually needed to achieve the function purpose. The resource type name has to be exactly as specified. If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      </contextual_information>
      I get the following error: {error}
      Fix my code.
