system: |-
  You fix the code shared by the user. Only output code. Wrap the code in a code block. 
  Explain the error and the fix.
  Also put explanations directly in the code as comments.

  Here's how interactions have to look like:
  user: {sample_question}
  assistant: ```language
  {code}
  ```
  explanation: "{explanation}"
prompts:
  python3:
    prompt: |-
      Here's my python3 code: 
      ```python
      {code}
      ```
      Additional information: We have to export a "main" function and specify the parameter types but do not call it.
      You have access to the following resource types, if you need them, you have to define the TypedDict exactly as specified (class name has to be IN LOWERCASE) and add them as parameters: {resourceTypes}
      Only use the ones you need. If the TypedDict name conflicts with the imported object, rename the imported object NOT THE TYPE.
      I get the following error: {error}
      Fix my code.
  deno:
    prompt: |-
      Here's my TypeScript code in a deno running environment:
      ```typescript
      {code}
      ```
      Additional information: We have to export a "main" function like this: "export async function main(...)" and specify the parameter types but do not call it.
      You have access to the following resource types, if you need them, you have to define the type exactly as specified and add them as parameters: {resourceTypes}
      Only use the ones you need. If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      I get the following error: {error}
      Fix my code.
  go:
    prompt: |-
      Here's my go code: 
      ```go
      {code}
      ```
      Additional information: We have to export a "main" function. Import the packages you need. The return type of the function has to be ({return_type}, error). The file package has to be "inner"
      I get the following error: {error}
      Fix my code.
  bash:
    prompt: |-
      Here's my bash code: 
      ```shell
      {code}
      ```
      Additional information: Do not include "#!/bin/bash". Arguments are always string and can only be obtained with "var1="$1"", "var2="$2"", etc... You do not need to check if the arguments are present.
      I get the following error: {error}
      Fix my code.
  postgresql:
    prompt: |-
      Here's my PostgreSQL code: 
      ```sql
      {code}
      ```
      Additional information: Arguments can be obtained directly in the statement with `$1::{type}`, `$2::{type}`, etc... Name the parameters by adding comments before the statement like that: `-- $1 name1` or `-- $2 name = default` (one per row, do not include the type)
      I get the following error: {error}
      Fix my code.
  mysql:
    prompt: |-
      Here's my MySQL code: 
      ```sql
      {code}
      ```
      Additional information: Arguments can be obtained directly in the statement with ?. Name the parameters by adding comments before the statement like that: `-- ? name1 ({type})` or `-- ? name2 ({type}) = default` (one per row)
      I get the following error: {error}
      Fix my code.
  bigquery:
    prompt: |-
      Here's my BigQuery code: 
      ```sql
      {code}
      ```
      Additional information: You can define arguments by adding comments before the statement like that: `-- @name1 ({type})` or `-- @name2 ({type}) = default` (one per row). They can then be obtained directly in the statement with `@name1`, `@name2`, etc....
      I get the following error: {error}
      Fix my code.
  snowflake:
    prompt: |-
      Here's my snowflake code: 
      ```sql
      {code}
      ```
      Additional information: Arguments can be obtained directly in the statement with ?. Name the parameters by adding comments before the statement like that: `-- ? name1 ({type})` or `-- ? name2 ({type}) = default` (one per row)
      I get the following error: {error}
      Fix my code.
  graphql:
    prompt: |-
      Here's my graphql code: 
      ```graphql
      {code}
      ```
      I get the following error: {error}
      Fix my code.
  powershell:
    prompt: |-
      Here's my powershell code: 
      ```powershell
      {code}
      ```
      Additional information: Arguments can be obtained by calling the param function on the first line like that: `param($ParamName1, $ParamName2 = "default value", [{type}]$ParamName3, ...)`
      I get the following error: {error}
      Fix my code.
  nativets:
    prompt: |-
      Here's my TypeScript code: 
      ```typescript
      {code}
      ```
      Additional information: We have to export a "main" function like this: "export async function main(...)" and specify the parameter types but do not call it.
      You should use fetch and are not allowed to import any libraries.
      You have access to the following resource types, if you need them, you have to define the type exactly as specified and add them as parameters: {resourceTypes}
      Only use the ones you need. If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      I get the following error: {error}
      Fix my code.
  bun:
    prompt: |-
      Here's my TypeScript code in a node.js running environment: 
      ```typescript
      {code}
      ```
      Additional information: We have to export a "main" function like this: "export async function main(...)" and specify the parameter types but do not call it.
      You have access to the following resource types, if you need them, you have to define the type exactly as specified and add them as parameters: {resourceTypes}
      Only use the ones you need. If the type name conflicts with the imported object, rename the imported object NOT THE TYPE.
      I get the following error: {error}
      Fix my code.
