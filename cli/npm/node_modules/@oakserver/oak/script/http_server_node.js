"use strict";
var _NodeRequest_request, _NodeRequest_response, _NodeRequest_responded, _HttpServer_abortController, _HttpServer_host, _HttpServer_port, _HttpServer_requestStream, _HttpServer_server;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpServer = exports.NodeRequest = void 0;
const tslib_1 = require("tslib");
// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
const dntShim = tslib_1.__importStar(require("./_dnt.shims.js"));
const http = tslib_1.__importStar(require("http"));
function createDeferred() {
    let resolve;
    // deno-lint-ignore no-explicit-any
    let reject;
    const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return { promise, resolve, reject };
}
class NodeRequest {
    get remoteAddr() {
        const addr = tslib_1.__classPrivateFieldGet(this, _NodeRequest_request, "f").socket.address();
        // deno-lint-ignore no-explicit-any
        return addr && addr?.address;
    }
    get headers() {
        return new dntShim.Headers(tslib_1.__classPrivateFieldGet(this, _NodeRequest_request, "f").headers);
    }
    get method() {
        return tslib_1.__classPrivateFieldGet(this, _NodeRequest_request, "f").method ?? "GET";
    }
    get url() {
        return tslib_1.__classPrivateFieldGet(this, _NodeRequest_request, "f").url ?? "";
    }
    constructor(request, response) {
        _NodeRequest_request.set(this, void 0);
        _NodeRequest_response.set(this, void 0);
        _NodeRequest_responded.set(this, false);
        tslib_1.__classPrivateFieldSet(this, _NodeRequest_request, request, "f");
        tslib_1.__classPrivateFieldSet(this, _NodeRequest_response, response, "f");
    }
    // deno-lint-ignore no-explicit-any
    error(reason) {
        if (tslib_1.__classPrivateFieldGet(this, _NodeRequest_responded, "f")) {
            throw new Error("Request already responded to.");
        }
        let error;
        if (reason) {
            error = reason instanceof Error ? reason : new Error(String(reason));
        }
        tslib_1.__classPrivateFieldGet(this, _NodeRequest_response, "f").destroy(error);
        tslib_1.__classPrivateFieldSet(this, _NodeRequest_responded, true, "f");
    }
    getBody() {
        let body;
        if (this.method === "GET" || this.method === "HEAD") {
            body = null;
        }
        else {
            body = new dntShim.ReadableStream({
                start: (controller) => {
                    tslib_1.__classPrivateFieldGet(this, _NodeRequest_request, "f").on("data", (chunk) => {
                        controller.enqueue(chunk);
                    });
                    tslib_1.__classPrivateFieldGet(this, _NodeRequest_request, "f").on("error", (err) => {
                        controller.error(err);
                    });
                    tslib_1.__classPrivateFieldGet(this, _NodeRequest_request, "f").on("end", () => {
                        controller.close();
                    });
                },
            });
        }
        return {
            body,
            async readBody() {
                if (!body) {
                    return new Uint8Array();
                }
                const chunks = [];
                for await (const chunk of body) {
                    chunks.push(chunk);
                }
                const totalLength = chunks.reduce((acc, value) => acc + value.length, 0);
                const result = new Uint8Array(totalLength);
                let length = 0;
                for (const chunk of chunks) {
                    result.set(chunk, length);
                    length += chunk.length;
                }
                return result;
            },
        };
    }
    async respond(response) {
        if (tslib_1.__classPrivateFieldGet(this, _NodeRequest_responded, "f")) {
            throw new Error("Requested already responded to.");
        }
        for (const [key, value] of response.headers) {
            tslib_1.__classPrivateFieldGet(this, _NodeRequest_response, "f").setHeader(key, value);
        }
        tslib_1.__classPrivateFieldGet(this, _NodeRequest_response, "f").writeHead(response.status, response.statusText);
        if (response.body) {
            for await (const chunk of response.body) {
                const { promise, resolve, reject } = createDeferred();
                // deno-lint-ignore no-explicit-any
                tslib_1.__classPrivateFieldGet(this, _NodeRequest_response, "f").write(chunk, (err) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve();
                    }
                });
                await promise;
            }
        }
        const { promise, resolve } = createDeferred();
        tslib_1.__classPrivateFieldGet(this, _NodeRequest_response, "f").end(resolve);
        await promise;
        tslib_1.__classPrivateFieldSet(this, _NodeRequest_responded, true, "f");
    }
}
exports.NodeRequest = NodeRequest;
_NodeRequest_request = new WeakMap(), _NodeRequest_response = new WeakMap(), _NodeRequest_responded = new WeakMap();
class HttpServer {
    constructor(_app, options) {
        _HttpServer_abortController.set(this, new AbortController());
        _HttpServer_host.set(this, void 0);
        _HttpServer_port.set(this, void 0);
        _HttpServer_requestStream.set(this, void 0);
        _HttpServer_server.set(this, void 0);
        tslib_1.__classPrivateFieldSet(this, _HttpServer_host, options.hostname ?? "127.0.0.1", "f");
        tslib_1.__classPrivateFieldSet(this, _HttpServer_port, options.port, "f");
        const start = (controller) => {
            const handler = (req, res) => controller.enqueue(new NodeRequest(req, res));
            // deno-lint-ignore no-explicit-any
            tslib_1.__classPrivateFieldSet(this, _HttpServer_server, http.createServer(handler), "f");
        };
        tslib_1.__classPrivateFieldSet(this, _HttpServer_requestStream, new dntShim.ReadableStream({ start }), "f");
    }
    close() {
        tslib_1.__classPrivateFieldGet(this, _HttpServer_abortController, "f").abort();
    }
    listen() {
        tslib_1.__classPrivateFieldGet(this, _HttpServer_server, "f").listen({
            port: tslib_1.__classPrivateFieldGet(this, _HttpServer_port, "f"),
            host: tslib_1.__classPrivateFieldGet(this, _HttpServer_host, "f"),
            signal: tslib_1.__classPrivateFieldGet(this, _HttpServer_abortController, "f").signal,
        });
        return {
            addr: {
                port: tslib_1.__classPrivateFieldGet(this, _HttpServer_port, "f"),
                hostname: tslib_1.__classPrivateFieldGet(this, _HttpServer_host, "f"),
            },
        };
    }
    [(_HttpServer_abortController = new WeakMap(), _HttpServer_host = new WeakMap(), _HttpServer_port = new WeakMap(), _HttpServer_requestStream = new WeakMap(), _HttpServer_server = new WeakMap(), Symbol.asyncIterator)]() {
        return tslib_1.__classPrivateFieldGet(this, _HttpServer_requestStream, "f")[Symbol.asyncIterator]();
    }
}
exports.HttpServer = HttpServer;
