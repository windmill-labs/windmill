"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toArrayBuffer = void 0;
const concat_js_1 = require("../bytes/concat.js");
/**
 * Converts a {@linkcode ReadableStream} of {@linkcode Uint8Array}s to an
 * {@linkcode ArrayBuffer}. Works the same as{@linkcode Response.arrayBuffer}.
 *
 * @example
 * ```ts
 * import { toArrayBuffer } from "https://deno.land/std@$STD_VERSION/streams/to_array_buffer.ts";
 *
 * const stream = ReadableStream.from([
 *   new Uint8Array([1, 2]),
 *   new Uint8Array([3, 4]),
 * ]);
 * await toArrayBuffer(stream); // ArrayBuffer { [Uint8Contents]: <01 02 03 04>, byteLength: 4 }
 * ```
 */
async function toArrayBuffer(readableStream) {
    const reader = readableStream.getReader();
    const chunks = [];
    while (true) {
        const { done, value } = await reader.read();
        if (done) {
            break;
        }
        chunks.push(value);
    }
    return (0, concat_js_1.concat)(chunks).buffer;
}
exports.toArrayBuffer = toArrayBuffer;
