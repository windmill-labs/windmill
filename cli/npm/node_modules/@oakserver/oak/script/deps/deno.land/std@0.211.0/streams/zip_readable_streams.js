"use strict";
// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
Object.defineProperty(exports, "__esModule", { value: true });
exports.zipReadableStreams = void 0;
const tslib_1 = require("tslib");
/**
 * Merge multiple streams into a single one, taking order into account, and
 * each stream will wait for a chunk to enqueue before the next stream can
 * append another chunk. If a stream ends before other ones, the others will
 * continue adding data in order, and the finished one will not add any more
 * data.
 *
 * @example
 * ```ts
 * import { zipReadableStreams } from "https://deno.land/std@$STD_VERSION/streams/zip_readable_streams.ts";
 *
 * const stream1 = ReadableStream.from(["1", "2", "3"]);
 * const stream2 = ReadableStream.from(["a", "b", "c"]);
 * const zippedStream = zipReadableStreams(stream1, stream2);
 *
 * await Array.fromAsync(zippedStream); // ["1", "a", "2", "b", "3", "c"];
 * ```
 */
const dntShim = tslib_1.__importStar(require("../../../../_dnt.shims.js"));
function zipReadableStreams(...streams) {
    const readers = new Set(streams.map((s) => s.getReader()));
    return new dntShim.ReadableStream({
        async start(controller) {
            try {
                let resolved = 0;
                while (resolved !== streams.length) {
                    for (const reader of readers) {
                        const { value, done } = await reader.read();
                        if (!done) {
                            controller.enqueue(value);
                        }
                        else {
                            resolved++;
                            readers.delete(reader);
                        }
                    }
                }
                controller.close();
            }
            catch (e) {
                controller.error(e);
            }
        },
    });
}
exports.zipReadableStreams = zipReadableStreams;
