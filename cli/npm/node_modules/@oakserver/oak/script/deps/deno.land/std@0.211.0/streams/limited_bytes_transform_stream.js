"use strict";
// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
var _LimitedBytesTransformStream_read;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitedBytesTransformStream = void 0;
const tslib_1 = require("tslib");
/**
 * A {@linkcode TransformStream} that will only read & enqueue `size` amount of
 * bytes. This operation is chunk based and not BYOB based, and as such will
 * read more than needed.
 *
 * If `options.error` is set, then instead of terminating the stream,
 * an error will be thrown.
 *
 * @example
 * ```ts
 * import { LimitedBytesTransformStream } from "https://deno.land/std@$STD_VERSION/streams/limited_bytes_transform_stream.ts";
 *
 * const res = await fetch("https://example.com");
 * const parts = res.body!
 *   .pipeThrough(new LimitedBytesTransformStream(512 * 1024));
 * ```
 */
const dntShim = tslib_1.__importStar(require("../../../../_dnt.shims.js"));
class LimitedBytesTransformStream extends dntShim.TransformStream {
    /** Constructs a new instance. */
    constructor(size, options = {}) {
        super({
            transform: (chunk, controller) => {
                if ((tslib_1.__classPrivateFieldGet(this, _LimitedBytesTransformStream_read, "f") + chunk.byteLength) > size) {
                    if (options.error) {
                        throw new RangeError(`Exceeded byte size limit of '${size}'`);
                    }
                    else {
                        controller.terminate();
                    }
                }
                else {
                    tslib_1.__classPrivateFieldSet(this, _LimitedBytesTransformStream_read, tslib_1.__classPrivateFieldGet(this, _LimitedBytesTransformStream_read, "f") + chunk.byteLength, "f");
                    controller.enqueue(chunk);
                }
            },
        });
        _LimitedBytesTransformStream_read.set(this, 0);
    }
}
exports.LimitedBytesTransformStream = LimitedBytesTransformStream;
_LimitedBytesTransformStream_read = new WeakMap();
