export interface Browser {
    /** The major version of a browser as represented by a user agent string. */
    readonly major: string | undefined;
    /** The name of a browser as represented by a user agent string. */
    readonly name: string | undefined;
    /** The version of a browser as represented by a user agent string. */
    readonly version: string | undefined;
}
export interface Device {
    /** The model of a device as represented by a user agent string. */
    readonly model: string | undefined;
    /** The type of device as represented by a user agent string. */
    readonly type: "console" | "mobile" | "table" | "smartv" | "wearable" | "embedded" | undefined;
    /** The vendor of a device as represented by a user agent string. */
    readonly vendor: string | undefined;
}
export interface Engine {
    readonly name: string | undefined;
    readonly version: string | undefined;
}
export interface Os {
    readonly name: string | undefined;
    readonly version: string | undefined;
}
export interface Cpu {
    readonly architecture: string | undefined;
}
export declare class UserAgent {
    #private;
    /** A representation of user agent string, which can be used to determine
     * environmental information represented by the string. All properties are
     * determined lazily.
     *
     * ```ts
     * import { UserAgent } from "https://deno.land/std@$STD_VERSION/http/user_agent.ts";
     *
     * Deno.serve((req) => {
     *   const userAgent = new UserAgent(req.headers.get("user-agent") ?? "");
     *   return new Response(`Hello, ${userAgent.browser.name}
     *     on ${userAgent.os.name} ${userAgent.os.version}!`);
     * });
     * ```
     */
    constructor(ua: string | null);
    /** The name and version of the browser extracted from the user agent
     * string. */
    get browser(): Browser;
    /** The architecture of the CPU extracted from the user agent string. */
    get cpu(): Cpu;
    /** The model, type, and vendor of a device if present in a user agent
     * string. */
    get device(): Device;
    /** The name and version of the browser engine in a user agent string. */
    get engine(): Engine;
    /** The name and version of the operating system in a user agent string. */
    get os(): Os;
    /** A read only version of the user agent string related to the instance. */
    get ua(): string;
    toJSON(): {
        browser: Browser;
        cpu: Cpu;
        device: Device;
        engine: Engine;
        os: Os;
        ua: string;
    };
    toString(): string;
}
