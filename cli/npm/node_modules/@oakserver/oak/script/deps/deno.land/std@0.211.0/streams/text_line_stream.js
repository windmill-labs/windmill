"use strict";
// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
var _TextLineStream_currentLine;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextLineStream = void 0;
const tslib_1 = require("tslib");
/** Options for {@linkcode TextLineStream}. */
const dntShim = tslib_1.__importStar(require("../../../../_dnt.shims.js"));
/**
 * Transform a stream into a stream where each chunk is divided by a newline,
 * be it `\n` or `\r\n`. `\r` can be enabled via the `allowCR` option.
 *
 * @example
 * ```ts
 * import { TextLineStream } from "https://deno.land/std@$STD_VERSION/streams/text_line_stream.ts";
 *
 * const res = await fetch("https://example.com");
 * const lines = res.body!
 *   .pipeThrough(new TextDecoderStream())
 *   .pipeThrough(new TextLineStream());
 * ```
 */
class TextLineStream extends dntShim.TransformStream {
    /** Constructs a new instance. */
    constructor(options = { allowCR: false }) {
        super({
            transform: (chars, controller) => {
                chars = tslib_1.__classPrivateFieldGet(this, _TextLineStream_currentLine, "f") + chars;
                while (true) {
                    const lfIndex = chars.indexOf("\n");
                    const crIndex = options.allowCR ? chars.indexOf("\r") : -1;
                    if (crIndex !== -1 && crIndex !== (chars.length - 1) &&
                        (lfIndex === -1 || (lfIndex - 1) > crIndex)) {
                        controller.enqueue(chars.slice(0, crIndex));
                        chars = chars.slice(crIndex + 1);
                        continue;
                    }
                    if (lfIndex === -1)
                        break;
                    const endIndex = chars[lfIndex - 1] === "\r" ? lfIndex - 1 : lfIndex;
                    controller.enqueue(chars.slice(0, endIndex));
                    chars = chars.slice(lfIndex + 1);
                }
                tslib_1.__classPrivateFieldSet(this, _TextLineStream_currentLine, chars, "f");
            },
            flush: (controller) => {
                if (tslib_1.__classPrivateFieldGet(this, _TextLineStream_currentLine, "f") === "")
                    return;
                const currentLine = options.allowCR && tslib_1.__classPrivateFieldGet(this, _TextLineStream_currentLine, "f").endsWith("\r")
                    ? tslib_1.__classPrivateFieldGet(this, _TextLineStream_currentLine, "f").slice(0, -1)
                    : tslib_1.__classPrivateFieldGet(this, _TextLineStream_currentLine, "f");
                controller.enqueue(currentLine);
            },
        });
        _TextLineStream_currentLine.set(this, "");
    }
}
exports.TextLineStream = TextLineStream;
_TextLineStream_currentLine = new WeakMap();
