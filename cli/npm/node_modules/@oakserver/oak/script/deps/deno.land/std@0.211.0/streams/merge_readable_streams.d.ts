/// <reference types="node" />
/**
 * Merge multiple streams into a single one, not taking order into account.
 * If a stream ends before other ones, the other will continue adding data,
 * and the finished one will not add any more data.
 *
 * @example
 * ```ts
 * import { mergeReadableStreams } from "https://deno.land/std@$STD_VERSION/streams/merge_readable_streams.ts";
 *
 * const stream1 = ReadableStream.from(["1", "2", "3"]);
 * const stream2 = ReadableStream.from(["a", "b", "c"]);
 *
 * // ["2", "c", "a", "b", "3", "1"]
 * await Array.fromAsync(mergeReadableStreams(stream1, stream2));
 * ```
 */
import * as dntShim from "../../../../_dnt.shims.js";
export declare function mergeReadableStreams<T>(...streams: dntShim.ReadableStream<T>[]): dntShim.ReadableStream<T>;
