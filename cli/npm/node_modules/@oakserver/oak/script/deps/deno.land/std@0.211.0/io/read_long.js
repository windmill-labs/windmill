"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readLong = void 0;
const tslib_1 = require("tslib");
// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
const dntShim = tslib_1.__importStar(require("../../../../_dnt.shims.js"));
const read_int_js_1 = require("./read_int.js");
const MAX_SAFE_INTEGER = BigInt(Number.MAX_SAFE_INTEGER);
/**
 * Read big endian 64bit long from BufReader
 * @param buf
 *
 * @deprecated (will be removed after 1.0.0) Use the [Web Streams API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Streams_API} instead.
 */
async function readLong(buf) {
    const high = await (0, read_int_js_1.readInt)(buf);
    if (high === null)
        return null;
    const low = await (0, read_int_js_1.readInt)(buf);
    if (low === null)
        throw new dntShim.Deno.errors.UnexpectedEof();
    const big = (BigInt(high) << 32n) | BigInt(low);
    // We probably should provide a similar API that returns BigInt values.
    if (big > MAX_SAFE_INTEGER) {
        throw new RangeError("Long value too big to be represented as a JavaScript number.");
    }
    return Number(big);
}
exports.readLong = readLong;
