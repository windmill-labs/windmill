"use strict";
// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.compose = exports.isMiddlewareObject = void 0;
/** A type guard that returns true if the value is
 * {@linkcode MiddlewareObject}. */
function isMiddlewareObject(value) {
    return value && typeof value === "object" && "handleRequest" in value;
}
exports.isMiddlewareObject = isMiddlewareObject;
/** Compose multiple middleware functions into a single middleware function. */
function compose(middleware) {
    return function composedMiddleware(context, next) {
        let index = -1;
        async function dispatch(i) {
            if (i <= index) {
                throw new Error("next() called multiple times.");
            }
            index = i;
            let m = middleware[i];
            let fn;
            if (typeof m === "function") {
                fn = m;
            }
            else if (m && typeof m.handleRequest === "function") {
                fn = m.handleRequest.bind(m);
            }
            if (i === middleware.length) {
                fn = next;
            }
            if (!fn) {
                return;
            }
            await fn(context, dispatch.bind(null, i + 1));
        }
        return dispatch(0);
    };
}
exports.compose = compose;
