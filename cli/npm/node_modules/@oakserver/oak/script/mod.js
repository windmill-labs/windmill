"use strict";
// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.STATUS_TEXT = exports.Status = exports.ServerSentEvent = exports.Cookies = exports.isRedirectStatus = exports.isHttpError = exports.isErrorStatus = exports.HttpError = exports.httpErrors = exports.createHttpError = exports.testing = exports.send = exports.Router = exports.Response = exports.REDIRECT_BACK = exports.Request = exports.parseRange = exports.MultiPartStream = exports.ifRange = exports.FormDataReader = exports.composeMiddleware = exports.proxy = exports.HttpServerNative = exports.etag = exports.helpers = exports.Context = exports.Application = void 0;
const tslib_1 = require("tslib");
/**
 * A middleware framework for handling HTTP with Deno.
 *
 * oak works well on both Deno CLI and Deno deploy, and is inspired by
 * [koa](https://koajs.com/). It works well with both the Deno CLI and
 * [Deno Deploy](https://deno.com/deploy).
 *
 * ### Example server
 *
 * A minimal router server which responds with content on `/`. With Deno CLI
 * this will listen on port 8080 and on Deploy, this will simply serve requests
 * received on the application.
 *
 * ```ts
 * import { Application, Router } from "https://deno.land/x/oak/mod.ts";
 *
 * const router = new Router();
 * router.get("/", (ctx) => {
 *   ctx.response.body = `<!DOCTYPE html>
 *     <html>
 *       <head><title>Hello oak!</title><head>
 *       <body>
 *         <h1>Hello oak!</h1>
 *       </body>
 *     </html>
 *   `;
 * });
 *
 * const app = new Application();
 * app.use(router.routes());
 * app.use(router.allowedMethods());
 *
 * app.listen({ port: 8080 });
 * ```
 *
 * @module
 */
var application_js_1 = require("./application.js");
Object.defineProperty(exports, "Application", { enumerable: true, get: function () { return application_js_1.Application; } });
var context_js_1 = require("./context.js");
Object.defineProperty(exports, "Context", { enumerable: true, get: function () { return context_js_1.Context; } });
exports.helpers = tslib_1.__importStar(require("./helpers.js"));
exports.etag = tslib_1.__importStar(require("./etag.js"));
var http_server_node_js_1 = require("./http_server_node.js");
Object.defineProperty(exports, "HttpServerNative", { enumerable: true, get: function () { return http_server_node_js_1.HttpServer; } });
var proxy_js_1 = require("./middleware/proxy.js");
Object.defineProperty(exports, "proxy", { enumerable: true, get: function () { return proxy_js_1.proxy; } });
var middleware_js_1 = require("./middleware.js");
Object.defineProperty(exports, "composeMiddleware", { enumerable: true, get: function () { return middleware_js_1.compose; } });
var multipart_js_1 = require("./multipart.js");
Object.defineProperty(exports, "FormDataReader", { enumerable: true, get: function () { return multipart_js_1.FormDataReader; } });
var range_js_1 = require("./range.js");
Object.defineProperty(exports, "ifRange", { enumerable: true, get: function () { return range_js_1.ifRange; } });
Object.defineProperty(exports, "MultiPartStream", { enumerable: true, get: function () { return range_js_1.MultiPartStream; } });
Object.defineProperty(exports, "parseRange", { enumerable: true, get: function () { return range_js_1.parseRange; } });
var request_js_1 = require("./request.js");
Object.defineProperty(exports, "Request", { enumerable: true, get: function () { return request_js_1.Request; } });
var response_js_1 = require("./response.js");
Object.defineProperty(exports, "REDIRECT_BACK", { enumerable: true, get: function () { return response_js_1.REDIRECT_BACK; } });
Object.defineProperty(exports, "Response", { enumerable: true, get: function () { return response_js_1.Response; } });
var router_js_1 = require("./router.js");
Object.defineProperty(exports, "Router", { enumerable: true, get: function () { return router_js_1.Router; } });
var send_js_1 = require("./send.js");
Object.defineProperty(exports, "send", { enumerable: true, get: function () { return send_js_1.send; } });
/** Utilities for making testing oak servers easier. */
exports.testing = tslib_1.__importStar(require("./testing.js"));
// Re-exported from `std/http`
var deps_js_1 = require("./deps.js");
Object.defineProperty(exports, "createHttpError", { enumerable: true, get: function () { return deps_js_1.createHttpError; } });
Object.defineProperty(exports, "httpErrors", { enumerable: true, get: function () { return deps_js_1.errors; } });
Object.defineProperty(exports, "HttpError", { enumerable: true, get: function () { return deps_js_1.HttpError; } });
Object.defineProperty(exports, "isErrorStatus", { enumerable: true, get: function () { return deps_js_1.isErrorStatus; } });
Object.defineProperty(exports, "isHttpError", { enumerable: true, get: function () { return deps_js_1.isHttpError; } });
Object.defineProperty(exports, "isRedirectStatus", { enumerable: true, get: function () { return deps_js_1.isRedirectStatus; } });
Object.defineProperty(exports, "Cookies", { enumerable: true, get: function () { return deps_js_1.SecureCookieMap; } });
Object.defineProperty(exports, "ServerSentEvent", { enumerable: true, get: function () { return deps_js_1.ServerSentEvent; } });
Object.defineProperty(exports, "Status", { enumerable: true, get: function () { return deps_js_1.Status; } });
Object.defineProperty(exports, "STATUS_TEXT", { enumerable: true, get: function () { return deps_js_1.STATUS_TEXT; } });
