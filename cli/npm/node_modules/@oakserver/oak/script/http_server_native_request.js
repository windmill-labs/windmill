"use strict";
var _NativeRequest_conn, _NativeRequest_reject, _NativeRequest_request, _NativeRequest_requestPromise, _NativeRequest_resolve, _NativeRequest_resolved, _NativeRequest_upgradeWebSocket;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeRequest = exports.isNativeRequest = exports.DomResponse = void 0;
const tslib_1 = require("tslib");
// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
const dntShim = tslib_1.__importStar(require("./_dnt.shims.js"));
// deno-lint-ignore no-explicit-any
exports.DomResponse = dntShim.dntGlobalThis.Response ??
    class MockResponse {
    };
const maybeUpgradeWebSocket = "upgradeWebSocket" in dntShim.Deno
    // deno-lint-ignore no-explicit-any
    ? dntShim.Deno.upgradeWebSocket.bind(dntShim.Deno)
    : undefined;
function isNativeRequest(r) {
    return r instanceof NativeRequest;
}
exports.isNativeRequest = isNativeRequest;
/** An internal oak abstraction for handling a Deno native request. Most users
 * of oak do not need to worry about this abstraction. */
class NativeRequest {
    constructor(requestEvent, options = {}) {
        _NativeRequest_conn.set(this, void 0);
        // deno-lint-ignore no-explicit-any
        _NativeRequest_reject.set(this, void 0);
        _NativeRequest_request.set(this, void 0);
        _NativeRequest_requestPromise.set(this, void 0);
        _NativeRequest_resolve.set(this, void 0);
        _NativeRequest_resolved.set(this, false);
        _NativeRequest_upgradeWebSocket.set(this, void 0);
        const { conn } = options;
        tslib_1.__classPrivateFieldSet(this, _NativeRequest_conn, conn, "f");
        // this allows for the value to be explicitly undefined in the options
        tslib_1.__classPrivateFieldSet(this, _NativeRequest_upgradeWebSocket, "upgradeWebSocket" in options
            ? options["upgradeWebSocket"]
            : maybeUpgradeWebSocket, "f");
        tslib_1.__classPrivateFieldSet(this, _NativeRequest_request, requestEvent.request, "f");
        const p = new Promise((resolve, reject) => {
            tslib_1.__classPrivateFieldSet(this, _NativeRequest_resolve, resolve, "f");
            tslib_1.__classPrivateFieldSet(this, _NativeRequest_reject, reject, "f");
        });
        tslib_1.__classPrivateFieldSet(this, _NativeRequest_requestPromise, requestEvent.respondWith(p), "f");
    }
    get body() {
        // when shimming with undici under Node.js, this is a
        // `ControlledAsyncIterable`
        // deno-lint-ignore no-explicit-any
        return tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f").body;
    }
    get donePromise() {
        return tslib_1.__classPrivateFieldGet(this, _NativeRequest_requestPromise, "f");
    }
    get headers() {
        return tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f").headers;
    }
    get method() {
        return tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f").method;
    }
    get remoteAddr() {
        return tslib_1.__classPrivateFieldGet(this, _NativeRequest_conn, "f")?.remoteAddr?.hostname;
    }
    get request() {
        return tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f");
    }
    get url() {
        try {
            const url = new URL(tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f").url);
            return tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f").url.replace(url.origin, "");
        }
        catch {
            // we don't care about errors, we just want to fall back
        }
        return tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f").url;
    }
    get rawUrl() {
        return tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f").url;
    }
    // deno-lint-ignore no-explicit-any
    error(reason) {
        if (tslib_1.__classPrivateFieldGet(this, _NativeRequest_resolved, "f")) {
            throw new Error("Request already responded to.");
        }
        tslib_1.__classPrivateFieldGet(this, _NativeRequest_reject, "f").call(this, reason);
        tslib_1.__classPrivateFieldSet(this, _NativeRequest_resolved, true, "f");
    }
    getBody() {
        return {
            // when emitting to Node.js, the body is not compatible, and thought it
            // doesn't run at runtime, it still gets type checked.
            // deno-lint-ignore no-explicit-any
            body: tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f").body,
            readBody: async () => {
                const ab = await tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f").arrayBuffer();
                return new Uint8Array(ab);
            },
        };
    }
    respond(response) {
        if (tslib_1.__classPrivateFieldGet(this, _NativeRequest_resolved, "f")) {
            throw new Error("Request already responded to.");
        }
        tslib_1.__classPrivateFieldGet(this, _NativeRequest_resolve, "f").call(this, response);
        tslib_1.__classPrivateFieldSet(this, _NativeRequest_resolved, true, "f");
        return tslib_1.__classPrivateFieldGet(this, _NativeRequest_requestPromise, "f");
    }
    upgrade(options) {
        if (tslib_1.__classPrivateFieldGet(this, _NativeRequest_resolved, "f")) {
            throw new Error("Request already responded to.");
        }
        if (!tslib_1.__classPrivateFieldGet(this, _NativeRequest_upgradeWebSocket, "f")) {
            throw new TypeError("Upgrading web sockets not supported.");
        }
        const { response, socket } = tslib_1.__classPrivateFieldGet(this, _NativeRequest_upgradeWebSocket, "f").call(this, tslib_1.__classPrivateFieldGet(this, _NativeRequest_request, "f"), options);
        tslib_1.__classPrivateFieldGet(this, _NativeRequest_resolve, "f").call(this, response);
        tslib_1.__classPrivateFieldSet(this, _NativeRequest_resolved, true, "f");
        return socket;
    }
}
exports.NativeRequest = NativeRequest;
_NativeRequest_conn = new WeakMap(), _NativeRequest_reject = new WeakMap(), _NativeRequest_request = new WeakMap(), _NativeRequest_requestPromise = new WeakMap(), _NativeRequest_resolve = new WeakMap(), _NativeRequest_resolved = new WeakMap(), _NativeRequest_upgradeWebSocket = new WeakMap();
