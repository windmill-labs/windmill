var _Request_instances, _Request_body, _Request_proxy, _Request_secure, _Request_serverRequest, _Request_url, _Request_userAgent, _Request_getRemoteAddr;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { RequestBody } from "./body.js";
import { accepts, acceptsEncodings, acceptsLanguages, UserAgent, } from "./deps.js";
/** An interface which provides information about the current request. The
 * instance related to the current request is available on the
 * {@linkcode Context}'s `.request` property.
 *
 * The interface contains several properties to get information about the
 * request as well as several methods, which include content negotiation and
 * the ability to decode a request body.
 */
export class Request {
    /** Is `true` if the request might have a body, otherwise `false`.
     *
     * **WARNING** this is an unreliable API. In HTTP/2 in many situations you
     * cannot determine if a request has a body or not unless you attempt to read
     * the body, due to the streaming nature of HTTP/2. As of Deno 1.16.1, for
     * HTTP/1.1, Deno also reflects that behaviour.  The only reliable way to
     * determine if a request has a body or not is to attempt to read the body.
     */
    get hasBody() {
        return __classPrivateFieldGet(this, _Request_body, "f").has();
    }
    /** The `Headers` supplied in the request. */
    get headers() {
        return __classPrivateFieldGet(this, _Request_serverRequest, "f").headers;
    }
    /** Request remote address. When the application's `.proxy` is true, the
     * `X-Forwarded-For` will be used to determine the requesting remote address.
     */
    get ip() {
        return (__classPrivateFieldGet(this, _Request_proxy, "f") ? this.ips[0] : __classPrivateFieldGet(this, _Request_instances, "m", _Request_getRemoteAddr).call(this)) ?? "";
    }
    /** When the application's `.proxy` is `true`, this will be set to an array of
     * IPs, ordered from upstream to downstream, based on the value of the header
     * `X-Forwarded-For`.  When `false` an empty array is returned. */
    get ips() {
        return __classPrivateFieldGet(this, _Request_proxy, "f")
            ? (__classPrivateFieldGet(this, _Request_serverRequest, "f").headers.get("x-forwarded-for") ??
                __classPrivateFieldGet(this, _Request_instances, "m", _Request_getRemoteAddr).call(this)).split(/\s*,\s*/)
            : [];
    }
    /** The HTTP Method used by the request. */
    get method() {
        return __classPrivateFieldGet(this, _Request_serverRequest, "f").method;
    }
    /** Shortcut to `request.url.protocol === "https:"`. */
    get secure() {
        return __classPrivateFieldGet(this, _Request_secure, "f");
    }
    /** Set to the value of the _original_ Deno server request. */
    get originalRequest() {
        return __classPrivateFieldGet(this, _Request_serverRequest, "f");
    }
    /** A parsed URL for the request which complies with the browser standards.
     * When the application's `.proxy` is `true`, this value will be based off of
     * the `X-Forwarded-Proto` and `X-Forwarded-Host` header values if present in
     * the request. */
    get url() {
        if (!__classPrivateFieldGet(this, _Request_url, "f")) {
            const serverRequest = __classPrivateFieldGet(this, _Request_serverRequest, "f");
            if (!__classPrivateFieldGet(this, _Request_proxy, "f")) {
                // between 1.9.0 and 1.9.1 the request.url of the native HTTP started
                // returning the full URL, where previously it only returned the path
                // so we will try to use that URL here, but default back to old logic
                // if the URL isn't valid.
                try {
                    if (serverRequest.rawUrl) {
                        __classPrivateFieldSet(this, _Request_url, new URL(serverRequest.rawUrl), "f");
                        return __classPrivateFieldGet(this, _Request_url, "f");
                    }
                }
                catch {
                    // we don't care about errors here
                }
            }
            let proto;
            let host;
            if (__classPrivateFieldGet(this, _Request_proxy, "f")) {
                proto = serverRequest
                    .headers.get("x-forwarded-proto")?.split(/\s*,\s*/, 1)[0] ??
                    "http";
                host = serverRequest.headers.get("x-forwarded-host") ??
                    serverRequest.headers.get("host") ?? "";
            }
            else {
                proto = __classPrivateFieldGet(this, _Request_secure, "f") ? "https" : "http";
                host = serverRequest.headers.get("host") ?? "";
            }
            try {
                __classPrivateFieldSet(this, _Request_url, new URL(`${proto}://${host}${serverRequest.url}`), "f");
            }
            catch {
                throw new TypeError(`The server request URL of "${proto}://${host}${serverRequest.url}" is invalid.`);
            }
        }
        return __classPrivateFieldGet(this, _Request_url, "f");
    }
    /** An object representing the requesting user agent. If the `User-Agent`
     * header isn't defined in the request, all the properties will be undefined.
     *
     * See [std/http/user_agent#UserAgent](https://deno.land/std@0.211.0/http/user_agent.ts?s=UserAgent)
     * for more information.
     */
    get userAgent() {
        return __classPrivateFieldGet(this, _Request_userAgent, "f");
    }
    constructor(serverRequest, { proxy = false, secure = false, jsonBodyReviver } = {}) {
        _Request_instances.add(this);
        _Request_body.set(this, void 0);
        _Request_proxy.set(this, void 0);
        _Request_secure.set(this, void 0);
        _Request_serverRequest.set(this, void 0);
        _Request_url.set(this, void 0);
        _Request_userAgent.set(this, void 0);
        __classPrivateFieldSet(this, _Request_proxy, proxy, "f");
        __classPrivateFieldSet(this, _Request_secure, secure, "f");
        __classPrivateFieldSet(this, _Request_serverRequest, serverRequest, "f");
        __classPrivateFieldSet(this, _Request_body, new RequestBody(serverRequest.getBody(), serverRequest.headers, jsonBodyReviver), "f");
        __classPrivateFieldSet(this, _Request_userAgent, new UserAgent(serverRequest.headers.get("user-agent")), "f");
    }
    accepts(...types) {
        if (!__classPrivateFieldGet(this, _Request_serverRequest, "f").headers.has("Accept")) {
            return types.length ? types[0] : ["*/*"];
        }
        if (types.length) {
            return accepts(__classPrivateFieldGet(this, _Request_serverRequest, "f"), ...types);
        }
        return accepts(__classPrivateFieldGet(this, _Request_serverRequest, "f"));
    }
    acceptsEncodings(...encodings) {
        if (!__classPrivateFieldGet(this, _Request_serverRequest, "f").headers.has("Accept-Encoding")) {
            return encodings.length ? encodings[0] : ["*"];
        }
        if (encodings.length) {
            return acceptsEncodings(__classPrivateFieldGet(this, _Request_serverRequest, "f"), ...encodings);
        }
        return acceptsEncodings(__classPrivateFieldGet(this, _Request_serverRequest, "f"));
    }
    acceptsLanguages(...langs) {
        if (!__classPrivateFieldGet(this, _Request_serverRequest, "f").headers.get("Accept-Language")) {
            return langs.length ? langs[0] : ["*"];
        }
        if (langs.length) {
            return acceptsLanguages(__classPrivateFieldGet(this, _Request_serverRequest, "f"), ...langs);
        }
        return acceptsLanguages(__classPrivateFieldGet(this, _Request_serverRequest, "f"));
    }
    /** Access the body of the request. This is a method, because there are
     * several options which can be provided which can influence how the body is
     * handled. */
    body(options = {}) {
        return __classPrivateFieldGet(this, _Request_body, "f").get(options);
    }
    [(_Request_body = new WeakMap(), _Request_proxy = new WeakMap(), _Request_secure = new WeakMap(), _Request_serverRequest = new WeakMap(), _Request_url = new WeakMap(), _Request_userAgent = new WeakMap(), _Request_instances = new WeakSet(), _Request_getRemoteAddr = function _Request_getRemoteAddr() {
        return __classPrivateFieldGet(this, _Request_serverRequest, "f").remoteAddr ?? "";
    }, Symbol.for("Deno.customInspect"))](inspect) {
        const { hasBody, headers, ip, ips, method, secure, url } = this;
        return `${this.constructor.name} ${inspect({
            hasBody,
            headers,
            ip,
            ips,
            method,
            secure,
            url: url.toString(),
        })}`;
    }
    [Symbol.for("nodejs.util.inspect.custom")](depth, 
    // deno-lint-ignore no-explicit-any
    options, inspect) {
        if (depth < 0) {
            return options.stylize(`[${this.constructor.name}]`, "special");
        }
        const newOptions = Object.assign({}, options, {
            depth: options.depth === null ? null : options.depth - 1,
        });
        const { hasBody, headers, ip, ips, method, secure, url } = this;
        return `${options.stylize(this.constructor.name, "special")} ${inspect({ hasBody, headers, ip, ips, method, secure, url }, newOptions)}`;
    }
}
