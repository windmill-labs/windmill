import type { State } from "./application.js";
import type { Context } from "./context.js";
/** A function for chaining middleware. */
export type Next = () => Promise<unknown>;
/** Middleware are functions which are chained together to deal with
 * requests. */
export interface Middleware<S extends State = Record<string, any>, T extends Context = Context<S>> {
    (context: T, next: Next): Promise<unknown> | unknown;
}
/** Middleware objects allow encapsulation of middleware along with the ability
 * to initialize the middleware upon listen. */
export interface MiddlewareObject<S extends State = Record<string, any>, T extends Context<S> = Context<S>> {
    /** Optional function for delayed initialization which will be called when
     * the application starts listening. */
    init?: () => Promise<unknown> | unknown;
    /** The method to be called to handle the request. */
    handleRequest(context: T, next: Next): Promise<unknown> | unknown;
}
/** Type that represents {@linkcode Middleware} or
 * {@linkcode MiddlewareObject}. */
export type MiddlewareOrMiddlewareObject<S extends State = Record<string, any>, T extends Context = Context<S>> = Middleware<S, T> | MiddlewareObject<S, T>;
/** A type guard that returns true if the value is
 * {@linkcode MiddlewareObject}. */
export declare function isMiddlewareObject<S extends State = Record<string, any>, T extends Context = Context<S>>(value: MiddlewareOrMiddlewareObject<S, T>): value is MiddlewareObject<S, T>;
/** Compose multiple middleware functions into a single middleware function. */
export declare function compose<S extends State = Record<string, any>, T extends Context = Context<S>>(middleware: MiddlewareOrMiddlewareObject<S, T>[]): (context: T, next?: Next) => Promise<unknown>;
