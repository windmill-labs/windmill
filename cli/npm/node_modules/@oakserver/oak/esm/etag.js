// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
/**
 * A collection of oak specific APIs for management of ETags.
 *
 * @module
 */
import * as dntShim from "./_dnt.shims.js";
import { calculate } from "./deps.js";
import { BODY_TYPES, isAsyncIterable, isReader } from "./util.js";
// re-exports to maintain backwards compatibility
export { calculate, ifMatch, ifNoneMatch, } from "./deps.js";
function fstat(file) {
    if ("fstat" in dntShim.Deno) {
        // deno-lint-ignore no-explicit-any
        return dntShim.Deno.fstat(file.rid);
    }
    return Promise.resolve(undefined);
}
/** For a given Context, try to determine the response body entity that an ETag
 * can be calculated from. */
// deno-lint-ignore no-explicit-any
export function getEntity(context) {
    const { body } = context.response;
    if (body instanceof dntShim.Deno.FsFile) {
        return fstat(body);
    }
    if (body instanceof Uint8Array) {
        return Promise.resolve(body);
    }
    if (BODY_TYPES.includes(typeof body)) {
        return Promise.resolve(String(body));
    }
    if (isAsyncIterable(body) || isReader(body)) {
        return Promise.resolve(undefined);
    }
    if (typeof body === "object" && body !== null) {
        try {
            const bodyText = JSON.stringify(body);
            return Promise.resolve(bodyText);
        }
        catch {
            // We don't really care about errors here
        }
    }
    return Promise.resolve(undefined);
}
/**
 * Create middleware that will attempt to decode the response.body into
 * something that can be used to generate an `ETag` and add the `ETag` header to
 * the response.
 */
// deno-lint-ignore no-explicit-any
export function factory(options) {
    return async function etag(context, next) {
        await next();
        if (!context.response.headers.has("ETag")) {
            const entity = await getEntity(context);
            if (entity) {
                const etag = await calculate(entity, options);
                if (etag) {
                    context.response.headers.set("ETag", etag);
                }
            }
        }
    };
}
