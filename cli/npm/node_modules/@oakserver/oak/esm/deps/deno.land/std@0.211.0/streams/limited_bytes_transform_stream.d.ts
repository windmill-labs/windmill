/// <reference types="node" />
/**
 * A {@linkcode TransformStream} that will only read & enqueue `size` amount of
 * bytes. This operation is chunk based and not BYOB based, and as such will
 * read more than needed.
 *
 * If `options.error` is set, then instead of terminating the stream,
 * an error will be thrown.
 *
 * @example
 * ```ts
 * import { LimitedBytesTransformStream } from "https://deno.land/std@$STD_VERSION/streams/limited_bytes_transform_stream.ts";
 *
 * const res = await fetch("https://example.com");
 * const parts = res.body!
 *   .pipeThrough(new LimitedBytesTransformStream(512 * 1024));
 * ```
 */
import * as dntShim from "../../../../_dnt.shims.js";
export declare class LimitedBytesTransformStream extends dntShim.TransformStream<Uint8Array, Uint8Array> {
    #private;
    /** Constructs a new instance. */
    constructor(size: number, options?: {
        error?: boolean;
    });
}
