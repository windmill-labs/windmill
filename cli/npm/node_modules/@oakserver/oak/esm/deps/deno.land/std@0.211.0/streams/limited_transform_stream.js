// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
var _LimitedTransformStream_read;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
/**
 * A {@linkcode TransformStream} that will only read & enqueue `size` amount of
 * chunks.
 *
 * If `options.error` is set, then instead of terminating the stream,
 * an error will be thrown.
 *
 * @example
 * ```ts
 * import { LimitedTransformStream } from "https://deno.land/std@$STD_VERSION/streams/limited_transform_stream.ts";
 * const res = await fetch("https://example.com");
 * const parts = res.body!.pipeThrough(new LimitedTransformStream(50));
 * ```
 */
import * as dntShim from "../../../../_dnt.shims.js";
export class LimitedTransformStream extends dntShim.TransformStream {
    /** Constructs a new instance. */
    constructor(size, options = {}) {
        super({
            transform: (chunk, controller) => {
                var _a;
                if ((__classPrivateFieldGet(this, _LimitedTransformStream_read, "f") + 1) > size) {
                    if (options.error) {
                        throw new RangeError(`Exceeded chunk limit of '${size}'`);
                    }
                    else {
                        controller.terminate();
                    }
                }
                else {
                    __classPrivateFieldSet(this, _LimitedTransformStream_read, (_a = __classPrivateFieldGet(this, _LimitedTransformStream_read, "f"), _a++, _a), "f");
                    controller.enqueue(chunk);
                }
            },
        });
        _LimitedTransformStream_read.set(this, 0);
    }
}
_LimitedTransformStream_read = new WeakMap();
