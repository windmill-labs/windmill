var _Buffer_instances, _Buffer_buf, _Buffer_off, _Buffer_readable, _Buffer_writable, _Buffer_tryGrowByReslice, _Buffer_reslice, _Buffer_grow;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
import * as dntShim from "../../../../_dnt.shims.js";
import { assert } from "../assert/assert.js";
import { copy } from "../bytes/copy.js";
const MAX_SIZE = 2 ** 32 - 2;
const DEFAULT_CHUNK_SIZE = 16640;
/** A variable-sized buffer of bytes with `read()` and `write()` methods.
 *
 * Buffer is almost always used with some I/O like files and sockets. It allows
 * one to buffer up a download from a socket. Buffer grows and shrinks as
 * necessary.
 *
 * Buffer is NOT the same thing as Node's Buffer. Node's Buffer was created in
 * 2009 before JavaScript had the concept of ArrayBuffers. It's simply a
 * non-standard ArrayBuffer.
 *
 * ArrayBuffer is a fixed memory allocation. Buffer is implemented on top of
 * ArrayBuffer.
 *
 * Based on [Go Buffer](https://golang.org/pkg/bytes/#Buffer). */
export class Buffer {
    /** Getter returning the instance's {@linkcode ReadableStream}. */
    get readable() {
        return __classPrivateFieldGet(this, _Buffer_readable, "f");
    }
    /** Getter returning the instance's {@linkcode WritableStream}. */
    get writable() {
        return __classPrivateFieldGet(this, _Buffer_writable, "f");
    }
    /** Constructs a new instance. */
    constructor(ab) {
        _Buffer_instances.add(this);
        _Buffer_buf.set(this, void 0); // contents are the bytes buf[off : len(buf)]
        _Buffer_off.set(this, 0); // read at buf[off], write at buf[buf.byteLength]
        _Buffer_readable.set(this, new dntShim.ReadableStream({
            type: "bytes",
            pull: (controller) => {
                const view = new Uint8Array(controller.byobRequest.view.buffer);
                if (this.empty()) {
                    // Buffer is empty, reset to recover space.
                    this.reset();
                    controller.close();
                    controller.byobRequest.respond(0);
                    return;
                }
                const nread = copy(__classPrivateFieldGet(this, _Buffer_buf, "f").subarray(__classPrivateFieldGet(this, _Buffer_off, "f")), view);
                __classPrivateFieldSet(this, _Buffer_off, __classPrivateFieldGet(this, _Buffer_off, "f") + nread, "f");
                controller.byobRequest.respond(nread);
            },
            autoAllocateChunkSize: DEFAULT_CHUNK_SIZE,
        }));
        _Buffer_writable.set(this, new WritableStream({
            write: (chunk) => {
                const m = __classPrivateFieldGet(this, _Buffer_instances, "m", _Buffer_grow).call(this, chunk.byteLength);
                copy(chunk, __classPrivateFieldGet(this, _Buffer_buf, "f"), m);
            },
        }));
        __classPrivateFieldSet(this, _Buffer_buf, ab === undefined ? new Uint8Array(0) : new Uint8Array(ab), "f");
    }
    /** Returns a slice holding the unread portion of the buffer.
     *
     * The slice is valid for use only until the next buffer modification (that
     * is, only until the next call to a method like `read()`, `write()`,
     * `reset()`, or `truncate()`). If `options.copy` is false the slice aliases
     * the buffer content at least until the next buffer modification, so
     * immediate changes to the slice will affect the result of future reads.
     */
    bytes(options = { copy: true }) {
        if (options.copy === false)
            return __classPrivateFieldGet(this, _Buffer_buf, "f").subarray(__classPrivateFieldGet(this, _Buffer_off, "f"));
        return __classPrivateFieldGet(this, _Buffer_buf, "f").slice(__classPrivateFieldGet(this, _Buffer_off, "f"));
    }
    /** Returns whether the unread portion of the buffer is empty. */
    empty() {
        return __classPrivateFieldGet(this, _Buffer_buf, "f").byteLength <= __classPrivateFieldGet(this, _Buffer_off, "f");
    }
    /** A read only number of bytes of the unread portion of the buffer. */
    get length() {
        return __classPrivateFieldGet(this, _Buffer_buf, "f").byteLength - __classPrivateFieldGet(this, _Buffer_off, "f");
    }
    /** The read only capacity of the buffer's underlying byte slice, that is,
     * the total space allocated for the buffer's data. */
    get capacity() {
        return __classPrivateFieldGet(this, _Buffer_buf, "f").buffer.byteLength;
    }
    /**
     * Discards all but the first `n` unread bytes from the buffer but
     * continues to use the same allocated storage. It throws if `n` is
     * negative or greater than the length of the buffer.
     */
    truncate(n) {
        if (n === 0) {
            this.reset();
            return;
        }
        if (n < 0 || n > this.length) {
            throw Error("bytes.Buffer: truncation out of range");
        }
        __classPrivateFieldGet(this, _Buffer_instances, "m", _Buffer_reslice).call(this, __classPrivateFieldGet(this, _Buffer_off, "f") + n);
    }
    /** Resets to an empty buffer. */
    reset() {
        __classPrivateFieldGet(this, _Buffer_instances, "m", _Buffer_reslice).call(this, 0);
        __classPrivateFieldSet(this, _Buffer_off, 0, "f");
    }
    /** Grows the buffer's capacity, if necessary, to guarantee space for
     * another `n` bytes. After `.grow(n)`, at least `n` bytes can be written to
     * the buffer without another allocation. If `n` is negative, `.grow()` will
     * throw. If the buffer can't grow it will throw an error.
     *
     * Based on Go Lang's
     * [Buffer.Grow](https://golang.org/pkg/bytes/#Buffer.Grow). */
    grow(n) {
        if (n < 0) {
            throw Error("Buffer.grow: negative count");
        }
        const m = __classPrivateFieldGet(this, _Buffer_instances, "m", _Buffer_grow).call(this, n);
        __classPrivateFieldGet(this, _Buffer_instances, "m", _Buffer_reslice).call(this, m);
    }
}
_Buffer_buf = new WeakMap(), _Buffer_off = new WeakMap(), _Buffer_readable = new WeakMap(), _Buffer_writable = new WeakMap(), _Buffer_instances = new WeakSet(), _Buffer_tryGrowByReslice = function _Buffer_tryGrowByReslice(n) {
    const l = __classPrivateFieldGet(this, _Buffer_buf, "f").byteLength;
    if (n <= this.capacity - l) {
        __classPrivateFieldGet(this, _Buffer_instances, "m", _Buffer_reslice).call(this, l + n);
        return l;
    }
    return -1;
}, _Buffer_reslice = function _Buffer_reslice(len) {
    assert(len <= __classPrivateFieldGet(this, _Buffer_buf, "f").buffer.byteLength);
    __classPrivateFieldSet(this, _Buffer_buf, new Uint8Array(__classPrivateFieldGet(this, _Buffer_buf, "f").buffer, 0, len), "f");
}, _Buffer_grow = function _Buffer_grow(n) {
    const m = this.length;
    // If buffer is empty, reset to recover space.
    if (m === 0 && __classPrivateFieldGet(this, _Buffer_off, "f") !== 0) {
        this.reset();
    }
    // Fast: Try to grow by means of a reslice.
    const i = __classPrivateFieldGet(this, _Buffer_instances, "m", _Buffer_tryGrowByReslice).call(this, n);
    if (i >= 0) {
        return i;
    }
    const c = this.capacity;
    if (n <= Math.floor(c / 2) - m) {
        // We can slide things down instead of allocating a new
        // ArrayBuffer. We only need m+n <= c to slide, but
        // we instead let capacity get twice as large so we
        // don't spend all our time copying.
        copy(__classPrivateFieldGet(this, _Buffer_buf, "f").subarray(__classPrivateFieldGet(this, _Buffer_off, "f")), __classPrivateFieldGet(this, _Buffer_buf, "f"));
    }
    else if (c + n > MAX_SIZE) {
        throw new Error("The buffer cannot be grown beyond the maximum size.");
    }
    else {
        // Not enough space anywhere, we need to allocate.
        const buf = new Uint8Array(Math.min(2 * c + n, MAX_SIZE));
        copy(__classPrivateFieldGet(this, _Buffer_buf, "f").subarray(__classPrivateFieldGet(this, _Buffer_off, "f")), buf);
        __classPrivateFieldSet(this, _Buffer_buf, buf, "f");
    }
    // Restore this.#off and len(this.#buf).
    __classPrivateFieldSet(this, _Buffer_off, 0, "f");
    __classPrivateFieldGet(this, _Buffer_instances, "m", _Buffer_reslice).call(this, Math.min(m + n, MAX_SIZE));
    return m;
};
