/// <reference types="node" />
/**
 * Merge multiple streams into a single one, taking order into account, and
 * each stream will wait for a chunk to enqueue before the next stream can
 * append another chunk. If a stream ends before other ones, the others will
 * continue adding data in order, and the finished one will not add any more
 * data.
 *
 * @example
 * ```ts
 * import { zipReadableStreams } from "https://deno.land/std@$STD_VERSION/streams/zip_readable_streams.ts";
 *
 * const stream1 = ReadableStream.from(["1", "2", "3"]);
 * const stream2 = ReadableStream.from(["a", "b", "c"]);
 * const zippedStream = zipReadableStreams(stream1, stream2);
 *
 * await Array.fromAsync(zippedStream); // ["1", "a", "2", "b", "3", "c"];
 * ```
 */
import * as dntShim from "../../../../_dnt.shims.js";
export declare function zipReadableStreams<T>(...streams: dntShim.ReadableStream<T>[]): dntShim.ReadableStream<T>;
