/// <reference types="node" />
import * as dntShim from "../../../../_dnt.shims.js";
/** Disposition of the delimiter for {@linkcode DelimiterStreamOptions}. */
export type DelimiterDisposition = 
/** Include delimiter in the found chunk. */
"suffix"
/** Include delimiter in the subsequent chunk. */
 | "prefix"
/** Discard the delimiter. */
 | "discard";
/** Options for {@linkcode DelimiterStream}. */
export interface DelimiterStreamOptions {
    /** Disposition of the delimiter. */
    disposition?: DelimiterDisposition;
}
/**
 * Divide a stream into chunks delimited by a given byte sequence.
 *
 * @example
 * Divide a CSV stream by commas, discarding the commas:
 * ```ts
 * import { DelimiterStream } from "https://deno.land/std@$STD_VERSION/streams/delimiter_stream.ts";
 * const res = await fetch("https://example.com/data.csv");
 * const parts = res.body!
 *   .pipeThrough(new DelimiterStream(new TextEncoder().encode(",")))
 *   .pipeThrough(new TextDecoderStream());
 * ```
 *
 * @example
 * Divide a stream after semi-colons, keeping the semi-colons in the output:
 * ```ts
 * import { DelimiterStream } from "https://deno.land/std@$STD_VERSION/streams/delimiter_stream.ts";
 * const res = await fetch("https://example.com/file.js");
 * const parts = res.body!
 *   .pipeThrough(
 *     new DelimiterStream(
 *       new TextEncoder().encode(";"),
 *       { disposition: "suffix" },
 *     )
 *   )
 *   .pipeThrough(new TextDecoderStream());
 * ```
 */
export declare class DelimiterStream extends dntShim.TransformStream<Uint8Array, Uint8Array> {
    #private;
    /** Constructs a new instance. */
    constructor(delimiter: Uint8Array, options?: DelimiterStreamOptions);
}
