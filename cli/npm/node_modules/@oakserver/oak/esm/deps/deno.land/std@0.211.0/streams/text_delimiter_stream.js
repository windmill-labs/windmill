var _TextDelimiterStream_instances, _TextDelimiterStream_buf, _TextDelimiterStream_delimiter, _TextDelimiterStream_inspectIndex, _TextDelimiterStream_matchIndex, _TextDelimiterStream_delimLPS, _TextDelimiterStream_disp, _TextDelimiterStream_handle;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
// Copyright 2018-2024 the Deno authors. All rights reserved. MIT license.
// This module is browser compatible.
import * as dntShim from "../../../../_dnt.shims.js";
import { createLPS } from "./_common.js";
/**
 * Transform a stream into a stream where each chunk is divided by a given delimiter.
 *
 * @example
 * ```ts
 * import { TextDelimiterStream } from "https://deno.land/std@$STD_VERSION/streams/text_delimiter_stream.ts";
 * const res = await fetch("https://example.com");
 * const parts = res.body!
 *   .pipeThrough(new TextDecoderStream())
 *   .pipeThrough(new TextDelimiterStream("foo"));
 * ```
 */
export class TextDelimiterStream extends dntShim.TransformStream {
    /** Constructs a new instance. */
    constructor(delimiter, options) {
        super({
            transform: (chunk, controller) => {
                __classPrivateFieldGet(this, _TextDelimiterStream_instances, "m", _TextDelimiterStream_handle).call(this, chunk, controller);
            },
            flush: (controller) => {
                controller.enqueue(__classPrivateFieldGet(this, _TextDelimiterStream_buf, "f"));
            },
        });
        _TextDelimiterStream_instances.add(this);
        _TextDelimiterStream_buf.set(this, "");
        _TextDelimiterStream_delimiter.set(this, void 0);
        _TextDelimiterStream_inspectIndex.set(this, 0);
        _TextDelimiterStream_matchIndex.set(this, 0);
        _TextDelimiterStream_delimLPS.set(this, void 0);
        _TextDelimiterStream_disp.set(this, void 0);
        __classPrivateFieldSet(this, _TextDelimiterStream_delimiter, delimiter, "f");
        __classPrivateFieldSet(this, _TextDelimiterStream_delimLPS, createLPS(new TextEncoder().encode(delimiter)), "f");
        __classPrivateFieldSet(this, _TextDelimiterStream_disp, options?.disposition ?? "discard", "f");
    }
}
_TextDelimiterStream_buf = new WeakMap(), _TextDelimiterStream_delimiter = new WeakMap(), _TextDelimiterStream_inspectIndex = new WeakMap(), _TextDelimiterStream_matchIndex = new WeakMap(), _TextDelimiterStream_delimLPS = new WeakMap(), _TextDelimiterStream_disp = new WeakMap(), _TextDelimiterStream_instances = new WeakSet(), _TextDelimiterStream_handle = function _TextDelimiterStream_handle(chunk, controller) {
    var _a, _b, _c;
    __classPrivateFieldSet(this, _TextDelimiterStream_buf, __classPrivateFieldGet(this, _TextDelimiterStream_buf, "f") + chunk, "f");
    let localIndex = 0;
    while (__classPrivateFieldGet(this, _TextDelimiterStream_inspectIndex, "f") < __classPrivateFieldGet(this, _TextDelimiterStream_buf, "f").length) {
        if (chunk[localIndex] === __classPrivateFieldGet(this, _TextDelimiterStream_delimiter, "f")[__classPrivateFieldGet(this, _TextDelimiterStream_matchIndex, "f")]) {
            __classPrivateFieldSet(this, _TextDelimiterStream_inspectIndex, (_a = __classPrivateFieldGet(this, _TextDelimiterStream_inspectIndex, "f"), _a++, _a), "f");
            localIndex++;
            __classPrivateFieldSet(this, _TextDelimiterStream_matchIndex, (_b = __classPrivateFieldGet(this, _TextDelimiterStream_matchIndex, "f"), _b++, _b), "f");
            if (__classPrivateFieldGet(this, _TextDelimiterStream_matchIndex, "f") === __classPrivateFieldGet(this, _TextDelimiterStream_delimiter, "f").length) {
                // Full match
                const start = __classPrivateFieldGet(this, _TextDelimiterStream_inspectIndex, "f") - __classPrivateFieldGet(this, _TextDelimiterStream_delimiter, "f").length;
                const end = __classPrivateFieldGet(this, _TextDelimiterStream_disp, "f") === "suffix" ? __classPrivateFieldGet(this, _TextDelimiterStream_inspectIndex, "f") : start;
                const copy = __classPrivateFieldGet(this, _TextDelimiterStream_buf, "f").slice(0, end);
                controller.enqueue(copy);
                const shift = __classPrivateFieldGet(this, _TextDelimiterStream_disp, "f") === "prefix" ? start : __classPrivateFieldGet(this, _TextDelimiterStream_inspectIndex, "f");
                __classPrivateFieldSet(this, _TextDelimiterStream_buf, __classPrivateFieldGet(this, _TextDelimiterStream_buf, "f").slice(shift), "f");
                __classPrivateFieldSet(this, _TextDelimiterStream_inspectIndex, __classPrivateFieldGet(this, _TextDelimiterStream_disp, "f") === "prefix"
                    ? __classPrivateFieldGet(this, _TextDelimiterStream_delimiter, "f").length
                    : 0, "f");
                __classPrivateFieldSet(this, _TextDelimiterStream_matchIndex, 0, "f");
            }
        }
        else {
            if (__classPrivateFieldGet(this, _TextDelimiterStream_matchIndex, "f") === 0) {
                __classPrivateFieldSet(this, _TextDelimiterStream_inspectIndex, (_c = __classPrivateFieldGet(this, _TextDelimiterStream_inspectIndex, "f"), _c++, _c), "f");
                localIndex++;
            }
            else {
                __classPrivateFieldSet(this, _TextDelimiterStream_matchIndex, __classPrivateFieldGet(this, _TextDelimiterStream_delimLPS, "f")[__classPrivateFieldGet(this, _TextDelimiterStream_matchIndex, "f") - 1], "f");
            }
        }
    }
};
