/// <reference types="node" />
import * as dntShim from "./_dnt.shims.js";
import type { Listener, Server, ServerRequest } from "./types";
export type IncomingMessage = {
    headers: Record<string, string>;
    method: string | null;
    socket: {
        address(): {
            addr: null | {
                address: string;
            };
        };
    };
    url: string | null;
    on(method: "data", listener: (chunk: Uint8Array) => void): void;
    on(method: "error", listener: (err: Error) => void): void;
    on(method: "end", listener: () => void): void;
};
export type ServerResponse = {
    destroy(error?: Error): void;
    end(callback?: () => void): void;
    setHeader(key: string, value: string): void;
    write(chunk: unknown, callback?: (err: Error | null) => void): void;
    writeHead(status: number, statusText?: string): void;
};
export declare class NodeRequest implements ServerRequest {
    #private;
    get remoteAddr(): string | undefined;
    get headers(): dntShim.Headers;
    get method(): string;
    get url(): string;
    constructor(request: IncomingMessage, response: ServerResponse);
    error(reason?: any): void;
    getBody(): {
        body: dntShim.ReadableStream<Uint8Array> | null;
        readBody(): Promise<Uint8Array>;
    };
    respond(response: dntShim.Response): Promise<void>;
}
export declare class HttpServer implements Server<NodeRequest> {
    #private;
    constructor(_app: unknown, options: dntShim.Deno.ListenOptions | dntShim.Deno.ListenTlsOptions);
    close(): void;
    listen(): Listener;
    [Symbol.asyncIterator](): AsyncIterableIterator<NodeRequest>;
}
