// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
// deno-lint-ignore-file no-explicit-any
/**
 * A collection of utility APIs which can make testing of an oak application
 * easier.
 *
 * @module
 */
import * as dntShim from "./_dnt.shims.js";
import { accepts, createHttpError, SecureCookieMap, } from "./deps.js";
import { Response } from "./response.js";
/** Creates a mock of `Application`. */
export function createMockApp(state = {}) {
    const app = {
        state,
        use() {
            return app;
        },
        [Symbol.for("Deno.customInspect")]() {
            return "MockApplication {}";
        },
        [Symbol.for("nodejs.util.inspect.custom")](depth, options, inspect) {
            if (depth < 0) {
                return options.stylize(`[MockApplication]`, "special");
            }
            const newOptions = Object.assign({}, options, {
                depth: options.depth === null ? null : options.depth - 1,
            });
            return `${options.stylize("MockApplication", "special")} ${inspect({}, newOptions)}`;
        },
    };
    return app;
}
/** Allows external parties to modify the context state. */
export const mockContextState = {
    /** Adjusts the return value of the `acceptedEncodings` in the context's
     * `request` object. */
    encodingsAccepted: "identity",
};
/** Create a mock of `Context` or `RouterContext`. */
export function createMockContext({ ip = "127.0.0.1", method = "GET", params, path = "/", state, app = createMockApp(state), headers: requestHeaders, } = {}) {
    function createMockRequest() {
        const headers = new dntShim.Headers(requestHeaders);
        return {
            accepts(...types) {
                if (!headers.has("Accept")) {
                    return;
                }
                if (types.length) {
                    return accepts({ headers }, ...types);
                }
                return accepts({ headers });
            },
            acceptsEncodings() {
                return mockContextState.encodingsAccepted;
            },
            headers,
            ip,
            method,
            path,
            search: undefined,
            searchParams: new URLSearchParams(),
            url: new URL(path, "http://localhost/"),
        };
    }
    const request = createMockRequest();
    const response = new Response(request);
    const cookies = new SecureCookieMap(request, { response });
    return {
        app,
        params,
        request,
        cookies,
        response,
        state: Object.assign({}, app.state),
        assert(condition, errorStatus = 500, message, props) {
            if (condition) {
                return;
            }
            const err = createHttpError(errorStatus, message);
            if (props) {
                Object.assign(err, props);
            }
            throw err;
        },
        throw(errorStatus, message, props) {
            const err = createHttpError(errorStatus, message);
            if (props) {
                Object.assign(err, props);
            }
            throw err;
        },
        [Symbol.for("Deno.customInspect")]() {
            return `MockContext {}`;
        },
        [Symbol.for("nodejs.util.inspect.custom")](depth, options, inspect) {
            if (depth < 0) {
                return options.stylize(`[MockContext]`, "special");
            }
            const newOptions = Object.assign({}, options, {
                depth: options.depth === null ? null : options.depth - 1,
            });
            return `${options.stylize("MockContext", "special")} ${inspect({}, newOptions)}`;
        },
    };
}
/** Creates a mock `next()` function which can be used when calling
 * middleware. */
export function createMockNext() {
    return async function next() { };
}
