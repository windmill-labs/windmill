// Copyright 2018-2023 the oak authors. All rights reserved. MIT license.
/**
 * A middleware framework for handling HTTP with Deno.
 *
 * oak works well on both Deno CLI and Deno deploy, and is inspired by
 * [koa](https://koajs.com/). It works well with both the Deno CLI and
 * [Deno Deploy](https://deno.com/deploy).
 *
 * ### Example server
 *
 * A minimal router server which responds with content on `/`. With Deno CLI
 * this will listen on port 8080 and on Deploy, this will simply serve requests
 * received on the application.
 *
 * ```ts
 * import { Application, Router } from "https://deno.land/x/oak/mod.ts";
 *
 * const router = new Router();
 * router.get("/", (ctx) => {
 *   ctx.response.body = `<!DOCTYPE html>
 *     <html>
 *       <head><title>Hello oak!</title><head>
 *       <body>
 *         <h1>Hello oak!</h1>
 *       </body>
 *     </html>
 *   `;
 * });
 *
 * const app = new Application();
 * app.use(router.routes());
 * app.use(router.allowedMethods());
 *
 * app.listen({ port: 8080 });
 * ```
 *
 * @module
 */
export { Application } from "./application.js";
export { Context } from "./context.js";
export * as helpers from "./helpers.js";
export * as etag from "./etag.js";
export { HttpServer as HttpServerNative } from "./http_server_node.js";
export { proxy } from "./middleware/proxy.js";
export { compose as composeMiddleware } from "./middleware.js";
export { FormDataReader } from "./multipart.js";
export { ifRange, MultiPartStream, parseRange } from "./range.js";
export { Request } from "./request.js";
export { REDIRECT_BACK, Response } from "./response.js";
export { Router } from "./router.js";
export { send } from "./send.js";
/** Utilities for making testing oak servers easier. */
export * as testing from "./testing.js";
// Re-exported from `std/http`
export { createHttpError, errors as httpErrors, HttpError, isErrorStatus, isHttpError, isRedirectStatus, SecureCookieMap as Cookies, ServerSentEvent, Status, STATUS_TEXT, } from "./deps.js";
