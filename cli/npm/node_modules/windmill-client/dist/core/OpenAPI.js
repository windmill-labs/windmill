"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenAPI = exports.Interceptors = void 0;
const getEnv = (key) => {
    var _a, _b, _c, _d, _e;
    if (typeof window === "undefined") {
        if (typeof process !== "undefined") {
            return (_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a[key];
        }
        // node
        return (_c = (_b = globalThis === null || globalThis === void 0 ? void 0 : globalThis.process) === null || _b === void 0 ? void 0 : _b.env) === null || _c === void 0 ? void 0 : _c[key];
    }
    // browser
    return (_e = (_d = window === null || window === void 0 ? void 0 : window.process) === null || _d === void 0 ? void 0 : _d.env) === null || _e === void 0 ? void 0 : _e[key];
};
const baseUrl = (_b = (_a = getEnv("BASE_INTERNAL_URL")) !== null && _a !== void 0 ? _a : getEnv("BASE_URL")) !== null && _b !== void 0 ? _b : "http://localhost:8000";
const baseUrlApi = (baseUrl !== null && baseUrl !== void 0 ? baseUrl : '') + "/api";
class Interceptors {
    constructor() {
        this._fns = [];
    }
    eject(fn) {
        const index = this._fns.indexOf(fn);
        if (index !== -1) {
            this._fns = [...this._fns.slice(0, index), ...this._fns.slice(index + 1)];
        }
    }
    use(fn) {
        this._fns = [...this._fns, fn];
    }
}
exports.Interceptors = Interceptors;
exports.OpenAPI = {
    BASE: baseUrlApi,
    CREDENTIALS: 'include',
    ENCODE_PATH: undefined,
    HEADERS: undefined,
    PASSWORD: undefined,
    TOKEN: getEnv("WM_TOKEN"),
    USERNAME: undefined,
    VERSION: '1.364.0',
    WITH_CREDENTIALS: true,
    interceptors: {
        request: new Interceptors(),
        response: new Interceptors(),
    },
};
