{"version":3,"file":"run.js","sources":["../run.ts"],"sourcesContent":["/**\n * Runs a script in another thread and abort at any time.\n * @module\n */\nimport chan from \"./chan.ts\";\nimport { isPlainObject } from \"./object.ts\";\nimport { fromErrorEvent, fromObject } from \"./error.ts\";\nimport { cwd, toFileUrl } from \"./path.ts\";\nimport { isNode, isBun, isBrowserWindow } from \"./env.ts\";\nimport { sanitizeModuleId } from \"./parallel/module.ts\";\nimport { handleChannelMessage, isChannelMessage } from \"./parallel/channel.ts\";\nimport { getMaxParallelism, createWorker, isCallResponse, wrapArgs, unwrapReturnValue, } from \"./parallel/threads.ts\";\nimport parallel from \"./parallel.ts\";\nimport { unrefTimer } from \"./runtime.ts\";\nimport { asyncTask } from \"./async.ts\";\nconst workerPools = new Map();\nlet gcTimer;\n// The worker consumer queue is nothing but a callback list, once a worker is\n// available, the runner pop a consumer and run the callback, which will retry\n// gaining the worker and retry the task.\nconst workerConsumerQueue = [];\n/**\n * Runs the given `script` in a worker thread and abort the task at any time.\n *\n * This function is similar to {@link parallel}(), many features and\n * restrictions applicable to `parallel()` are also applicable to `run()`,\n * except the following:\n *\n * 1. The `script` can only be a filename, and is relative to the current\n *   working directory (or the current URL) if not absolute.\n * 2. Only one task is allow to run at a time for one worker thread, set\n *   {@link run.maxWorkers} to allow more tasks to be run at the same time if\n *   needed.\n * 3. By default, the worker thread is dropped after the task settles, set\n *   `keepAlive` option in order to reuse it.\n * 4. This function is not intended to be used in the browser, because it takes\n *   a bare filename as argument, which will not be transformed to a proper URL\n *   if the program is to be bundled.\n *\n * @example\n * ```ts\n * // result\n * import run from \"@ayonli/jsext/run\";\n *\n * const job1 = await run(\"examples/worker.mjs\", [\"World\"]);\n * console.log(await job1.result()); // Hello, World\n * ```\n *\n * @example\n * ```ts\n * // iterate\n * import run from \"@ayonli/jsext/run\";\n *\n * const job2 = await run<string, [string[]]>(\n *     \"examples/worker.mjs\",\n *     [[\"foo\", \"bar\"]],\n *     { fn: \"sequence\" }\n * );\n * for await (const word of job2.iterate()) {\n *     console.log(word);\n * }\n * // output:\n * // foo\n * // bar\n * ```\n *\n * @example\n * ```ts\n * // abort\n * import run from \"@ayonli/jsext/run\";\n * import _try from \"@ayonli/jsext/try\";\n *\n * const job3 = await run<string, [string]>(\"examples/worker.mjs\", [\"foobar\"], {\n *    fn: \"takeTooLong\",\n * });\n * await job3.abort();\n * const [err, res] = await _try(job3.result());\n * console.assert(err === null);\n * console.assert(res === undefined);\n * ```\n */\nasync function run(script, args, options) {\n    var _a;\n    if (!isNode && typeof Worker !== \"function\") {\n        throw new Error(\"Unsupported runtime\");\n    }\n    const maxWorkers = run.maxWorkers || parallel.maxWorkers || await getMaxParallelism;\n    const fn = (options === null || options === void 0 ? void 0 : options.fn) || \"default\";\n    let modId = sanitizeModuleId(script);\n    let baseUrl = undefined;\n    if (isBrowserWindow) {\n        baseUrl = location.href;\n    }\n    else {\n        try {\n            baseUrl = toFileUrl(cwd()) + \"/\"; // must ends with `/`\n        }\n        catch ( // `cwd()` may fail in unsupported environments or being rejected\n        _b) { // `cwd()` may fail in unsupported environments or being rejected\n            baseUrl = \"\";\n        }\n    }\n    if (baseUrl) {\n        modId = new URL(modId, baseUrl).href;\n    }\n    const req = {\n        type: \"call\",\n        module: modId,\n        fn,\n        args: args !== null && args !== void 0 ? args : [],\n    };\n    const adapter = (options === null || options === void 0 ? void 0 : options.adapter) || \"worker_threads\";\n    const workerPool = (_a = workerPools.get(adapter)) !== null && _a !== void 0 ? _a : workerPools.set(adapter, []).get(adapter);\n    let poolRecord = workerPool.find(item => !item.busy);\n    if (poolRecord) {\n        poolRecord.busy = true;\n        poolRecord.lastAccess = Date.now();\n    }\n    else if (workerPool.length < maxWorkers) {\n        // Fill the worker pool regardless the current call should keep-alive\n        // or not, this will make sure that the total number of workers will not\n        // exceed the `run.maxWorkers`. If the the call doesn't keep-alive the\n        // worker, it will be cleaned after the call.\n        workerPool.push(poolRecord = {\n            getWorker: createWorker({ parallel, adapter }),\n            adapter,\n            busy: true,\n            lastAccess: Date.now(),\n        });\n        if (!gcTimer) {\n            gcTimer = setInterval(() => {\n                workerPools.forEach((workerPool, adapter) => {\n                    // GC: clean long-time unused workers\n                    const now = Date.now();\n                    const idealItems = [];\n                    workerPools.set(adapter, workerPool.filter(item => {\n                        const ideal = !item.busy\n                            && (now - item.lastAccess) >= 10000;\n                        if (ideal) {\n                            idealItems.push(item);\n                        }\n                        return !ideal;\n                    }));\n                    idealItems.forEach(async (item) => {\n                        const { worker } = await item.getWorker;\n                        if (typeof worker[\"terminate\"] === \"function\") {\n                            await worker\n                                .terminate();\n                        }\n                        else {\n                            worker.kill();\n                        }\n                    });\n                });\n            }, 1000);\n            unrefTimer(gcTimer);\n        }\n    }\n    else {\n        // Put the current call in the consumer queue if there are no workers\n        // available, once an existing call finishes, the queue will pop the its\n        // head consumer and retry.\n        return new Promise((resolve) => {\n            workerConsumerQueue.push(resolve);\n        }).then(() => run(modId, args, options));\n    }\n    let error = null;\n    let result;\n    let promise;\n    let channel = undefined;\n    let workerId;\n    let release;\n    let terminate = () => Promise.resolve(void 0);\n    const timeout = (options === null || options === void 0 ? void 0 : options.timeout) ? setTimeout(async () => {\n        const err = new Error(`operation timeout after ${options.timeout}ms`);\n        error = err;\n        await terminate();\n        handleClose(err, true);\n    }, options.timeout) : null;\n    if (timeout) {\n        unrefTimer(timeout);\n    }\n    const handleMessage = async (msg) => {\n        var _a, _b;\n        if (isChannelMessage(msg)) {\n            await handleChannelMessage(msg);\n        }\n        else if (isCallResponse(msg)) {\n            timeout && clearTimeout(timeout);\n            if (msg.type === \"return\" || msg.type === \"error\") {\n                if (msg.type === \"error\") {\n                    const err = isPlainObject(msg.error)\n                        ? ((_a = fromObject(msg.error)) !== null && _a !== void 0 ? _a : msg.error)\n                        : msg.error;\n                    if (err instanceof Error &&\n                        (err.message.includes(\"not be cloned\")\n                            || ((_b = err.stack) === null || _b === void 0 ? void 0 : _b.includes(\"not be cloned\")) // Node.js v16-\n                            || err.message.includes(\"Do not know how to serialize\") // JSON error\n                        )) {\n                        Object.defineProperty(err, \"stack\", {\n                            configurable: true,\n                            enumerable: false,\n                            writable: true,\n                            value: (err.stack ? err.stack + \"\\n    \" : \"\")\n                                + `at ${fn} (${modId})`,\n                        });\n                    }\n                    error = err;\n                }\n                else {\n                    result = { value: unwrapReturnValue(msg.value) };\n                }\n                (options === null || options === void 0 ? void 0 : options.keepAlive) || await terminate();\n                handleClose(null, !(options === null || options === void 0 ? void 0 : options.keepAlive));\n            }\n            else if (msg.type === \"yield\") {\n                const value = unwrapReturnValue(msg.value);\n                if (msg.done) {\n                    // The final message of yield event is the return value.\n                    handleMessage({\n                        type: \"return\",\n                        value,\n                    });\n                }\n                else {\n                    channel === null || channel === void 0 ? void 0 : channel.send(value);\n                }\n            }\n        }\n    };\n    const handleClose = (err, terminated = false) => {\n        var _a, _b, _c;\n        timeout && clearTimeout(timeout);\n        if (!terminated) {\n            // Release before resolve.\n            release === null || release === void 0 ? void 0 : release();\n            if (workerConsumerQueue.length) {\n                // Queued consumer now has chance to gain the worker.\n                (_a = workerConsumerQueue.shift()) === null || _a === void 0 ? void 0 : _a();\n            }\n        }\n        else if (poolRecord) {\n            // Clean the pool before resolve.\n            // The `workerPool` of this key in the pool map may have been\n            // modified by other routines, we need to retrieve the newest value.\n            const remainItems = (_b = workerPools.get(adapter)) === null || _b === void 0 ? void 0 : _b.filter(record => record !== poolRecord);\n            if (remainItems === null || remainItems === void 0 ? void 0 : remainItems.length) {\n                workerPools.set(adapter, remainItems);\n            }\n            else {\n                workerPools.delete(adapter);\n            }\n            if (workerConsumerQueue.length) {\n                // Queued consumer now has chance to create new worker.\n                (_c = workerConsumerQueue.shift()) === null || _c === void 0 ? void 0 : _c();\n            }\n        }\n        if (err) {\n            error !== null && error !== void 0 ? error : (error = err);\n        }\n        if (error) {\n            if (promise) {\n                promise.reject(error);\n                if (channel) {\n                    channel.close();\n                }\n            }\n            else if (channel) {\n                if (error instanceof Error) {\n                    channel.close(error);\n                }\n                else if (typeof error === \"string\") {\n                    channel.close(new Error(error));\n                }\n                else {\n                    // @ts-ignore\n                    channel.close(new Error(\"unknown error\", { cause: error }));\n                }\n            }\n        }\n        else {\n            result !== null && result !== void 0 ? result : (result = { value: void 0 });\n            if (promise) {\n                promise.resolve(result.value);\n            }\n            if (channel) {\n                channel.close();\n            }\n        }\n    };\n    const safeRemoteCall = async (worker, req, transferable = []) => {\n        try {\n            if (typeof worker[\"postMessage\"] === \"function\") {\n                worker.postMessage(req, transferable);\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    worker.send(req, err => {\n                        err ? reject(err) : resolve();\n                    });\n                });\n            }\n        }\n        catch (err) {\n            if (typeof worker[\"unref\"] === \"function\") {\n                worker.unref();\n            }\n            error = err;\n            (options === null || options === void 0 ? void 0 : options.keepAlive) || await terminate();\n            handleClose(null, !(options === null || options === void 0 ? void 0 : options.keepAlive));\n            throw err;\n        }\n    };\n    if (isNode || isBun) {\n        if (adapter === \"child_process\") {\n            const record = await poolRecord.getWorker;\n            const worker = record.worker;\n            workerId = record.workerId;\n            worker.ref(); // prevent premature exit in the main thread\n            worker.on(\"message\", handleMessage);\n            worker.once(\"exit\", (code, signal) => {\n                if (!error && !result) {\n                    handleClose(new Error(`worker exited (${code !== null && code !== void 0 ? code : signal})`), true);\n                }\n            });\n            release = () => {\n                // allow the main thread to exit if the event loop is empty\n                worker.unref();\n                // Remove the event listener so that later calls will not mess\n                // up.\n                worker.off(\"message\", handleMessage);\n                worker.removeAllListeners(\"exit\");\n                poolRecord && (poolRecord.busy = false);\n            };\n            terminate = () => Promise.resolve(void worker.kill(1));\n            if (error) {\n                // The worker take too long to start and timeout error already\n                // thrown.\n                await terminate();\n                throw error;\n            }\n            const { args } = wrapArgs(req.args, Promise.resolve(worker));\n            req.args = args;\n            await safeRemoteCall(worker, req);\n        }\n        else if (isNode) {\n            const record = await poolRecord.getWorker;\n            const worker = record.worker;\n            const handleErrorEvent = (err) => {\n                if (!error && !result) {\n                    // In Node.js, worker will exit once erred.\n                    handleClose(err, true);\n                }\n            };\n            workerId = record.workerId;\n            worker.ref();\n            worker.on(\"message\", handleMessage);\n            worker.once(\"error\", handleErrorEvent);\n            release = () => {\n                worker.unref();\n                worker.off(\"message\", handleMessage);\n                worker.off(\"error\", handleErrorEvent);\n                poolRecord && (poolRecord.busy = false);\n            };\n            terminate = async () => void (await worker.terminate());\n            if (error) {\n                await terminate();\n                throw error;\n            }\n            const { args, transferable, } = wrapArgs(req.args, Promise.resolve(worker));\n            req.args = args;\n            await safeRemoteCall(worker, req, transferable);\n        }\n        else { // isBun\n            const record = await poolRecord.getWorker;\n            const worker = record.worker;\n            const handleCloseEvent = ((ev) => {\n                if (!error && !result) {\n                    handleClose(new Error(ev.reason + \" (\" + ev.code + \")\"), true);\n                }\n            });\n            workerId = record.workerId;\n            worker.ref();\n            worker.onmessage = (ev) => handleMessage(ev.data);\n            worker.onerror = () => void worker.terminate(); // terminate once erred\n            worker.addEventListener(\"close\", handleCloseEvent);\n            release = () => {\n                worker.unref();\n                worker.onmessage = null;\n                // @ts-ignore\n                worker.onerror = null;\n                worker.removeEventListener(\"close\", handleCloseEvent);\n                poolRecord && (poolRecord.busy = false);\n            };\n            terminate = () => Promise.resolve(worker.terminate());\n            if (error) {\n                await terminate();\n                throw error;\n            }\n            const { args, transferable, } = wrapArgs(req.args, Promise.resolve(worker));\n            req.args = args;\n            await safeRemoteCall(worker, req, transferable);\n        }\n    }\n    else {\n        const record = await poolRecord.getWorker;\n        const worker = record.worker;\n        workerId = record.workerId;\n        worker.onmessage = (ev) => handleMessage(ev.data);\n        worker.onerror = (ev) => {\n            var _a;\n            if (!error && !result) {\n                worker.terminate(); // ensure termination\n                handleClose((_a = fromErrorEvent(ev)) !== null && _a !== void 0 ? _a : new Error(\"worker exited\"), true);\n            }\n        };\n        release = () => {\n            worker.onmessage = null;\n            // @ts-ignore\n            worker.onerror = null;\n            poolRecord && (poolRecord.busy = false);\n        };\n        terminate = () => Promise.resolve(worker.terminate());\n        if (error) {\n            await terminate();\n            throw error;\n        }\n        const { args, transferable, } = wrapArgs(req.args, Promise.resolve(worker));\n        req.args = args;\n        await safeRemoteCall(worker, req, transferable);\n    }\n    return {\n        workerId,\n        async abort(reason = undefined) {\n            timeout && clearTimeout(timeout);\n            if (reason) {\n                error = reason;\n            }\n            else {\n                result = { value: void 0 };\n            }\n            await terminate();\n            handleClose(null, true);\n        },\n        async result() {\n            const task = asyncTask();\n            if (error) {\n                task.reject(error);\n            }\n            else if (result) {\n                task.resolve(result.value);\n            }\n            else {\n                promise = task;\n            }\n            return await task;\n        },\n        iterate() {\n            if (promise) {\n                throw new Error(\"result() has been called\");\n            }\n            else if (result) {\n                throw new TypeError(\"the response is not iterable\");\n            }\n            channel = chan(Infinity);\n            return {\n                [Symbol.asyncIterator]: channel[Symbol.asyncIterator].bind(channel),\n            };\n        },\n    };\n}\n(function (run) {\n    /**\n     * The maximum number of workers allowed to exist at the same time.\n     * If not set, use the same setting as {@link parallel.maxWorkers}.\n     */\n    run.maxWorkers = undefined;\n    /** @deprecated set {@link parallel.workerEntry} instead */\n    run.workerEntry = undefined;\n})(run || (run = {}));\n// backward compatibility\nObject.defineProperties(run, {\n    workerEntry: {\n        set(v) {\n            parallel.workerEntry = v;\n        },\n        get() {\n            return parallel.workerEntry;\n        },\n    },\n});\nexport default run;\n//# sourceMappingURL=run.js.map"],"names":["isNode","parallel","getMaxParallelism","sanitizeModuleId","isBrowserWindow","toFileUrl","cwd","createWorker","unrefTimer","error","isChannelMessage","handleChannelMessage","isCallResponse","isPlainObject","fromObject","unwrapReturnValue","isBun","wrapArgs","fromErrorEvent","asyncTask","chan"],"mappings":"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"}