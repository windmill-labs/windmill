{"version":3,"file":"util.js","sources":["../../path/util.ts"],"sourcesContent":["import { includesSlice, startsWith as _startsWith, endsWith as _endsWith, equals as _equals, } from \"../array.ts\";\nimport { trim, trimEnd } from \"../string.ts\";\nexport function isNotQuery(str) {\n    return str[0] !== \"?\" && str[0] !== \"#\";\n}\nexport function isVolume(path, strict = false) {\n    return strict ? /^[a-zA-Z]:$/.test(path) : /^[a-zA-Z]:(\\\\)?$/.test(path);\n}\n/**\n * Checks if the given `path` is a Windows specific path.\n * @experimental\n *\n * @example\n * ```ts\n * import { isWindowsPath } from \"@ayonli/jsext/path\";\n *\n * console.assert(isWindowsPath(\"C:\\\\Windows\\\\System32\"));\n * console.assert(isWindowsPath(\"c:\\\\Windows\\\\System32\")); // case-insensitive on volume\n * console.assert(isWindowsPath(\"D:/Program Files\")); // forward slash is also valid\n * console.assert(isWindowsPath(\"E:\")); // volume without path is also valid\n * ```\n */\nexport function isWindowsPath(path) {\n    return /^[a-zA-Z]:/.test(path) && path.slice(1, 4) !== \"://\";\n}\n/**\n * Checks if the given `path` is a Posix specific path.\n * @experimental\n *\n * @example\n * ```ts\n * import { isPosixPath } from \"@ayonli/jsext/path\";\n *\n * console.assert(isPosixPath(\"/usr/bin\"));\n * ```\n */\nexport function isPosixPath(path) {\n    return /^\\//.test(path);\n}\n/**\n * Checks if the given `path` is a file system path.\n * @experimental\n *\n * @example\n * ```ts\n * import { isFsPath } from \"@ayonli/jsext/path\";\n *\n * console.assert(isFsPath(\"/usr/bin\"));\n * console.assert(isFsPath(\"C:\\\\Windows\\\\System32\"));\n * console.assert(isFsPath(\"./foo/bar\"));\n * console.assert(isFsPath(\"../foo/bar\"));\n * ```\n */\nexport function isFsPath(path) {\n    return /^(\\.[\\/\\\\]|\\.\\.[\\/\\\\]|[a-zA-Z]:|\\/)/.test(path);\n}\n/**\n * Checks if the given string is a URL, whether standard or non-standard.\n * @experimental\n *\n * @example\n * ```ts\n * import { isUrl } from \"@ayonli/jsext/path\";\n *\n * console.assert(isUrl(\"http://example.com\"));\n * console.assert(isUrl(\"https://example.com?foo=bar#baz\"));\n * console.assert(isUrl(\"ftp://example.com\")); // ftp url\n * console.assert(isUrl(\"file:///C:/Windows/System32\")); // file url\n * console.assert(isUrl(\"file://localhost/C:/Windows/System32\")); // file url with hostname\n * console.assert(isUrl(\"file:///usr/bin\"));\n * ```\n */\nexport function isUrl(str) {\n    return /^[a-z](([a-z\\-]+)?:\\/\\/\\S+|[a-z\\-]+:\\/\\/$)/i.test(str) || isFileUrl(str);\n}\n/**\n * Checks if the given string is a file URL, whether with or without `//`.\n * @experimental\n *\n * @example\n * ```ts\n * import { isFileUrl } from \"@ayonli/jsext/path\";\n *\n * console.assert(isFileUrl(\"file:///C:/Windows/System32\"));\n * console.assert(isFileUrl(\"file://localhost/C:/Windows/System32\"));\n * console.assert(isFileUrl(\"file:///usr/bin\"));\n * console.assert(isFileUrl(\"file:/usr/bin\"));\n * console.assert(isFileUrl(\"file:///usr/bin?foo=bar\"));\n * ```\n */\nexport function isFileUrl(str) {\n    return /^file:((\\/\\/|\\/)\\S+|\\/?$)/i.test(str);\n}\nexport function isFileProtocol(path) {\n    return /^file:(\\/\\/)?$/i.test(path);\n}\n/**\n * Checks if the given `path` is an absolute path.\n * @experimental\n *\n * @example\n * ```ts\n * import { isAbsolute } from \"@ayonli/jsext/path\";\n *\n * console.assert(isAbsolute(\"/usr/bin\"));\n * console.assert(isAbsolute(\"C:\\\\Windows\\\\System32\"));\n * console.assert(isAbsolute(\"http://example.com\"));\n * console.assert(isAbsolute(\"file:///C:/Windows/System32\"));\n * console.assert(isAbsolute(\"file://localhost/C:/Windows/System32?foo=bar#baz\"));\n * ```\n */\nexport function isAbsolute(path) {\n    return isPosixPath(path) || isWindowsPath(path) || isUrl(path);\n}\n/**\n * Splits the `path` into well-formed segments.\n * @experimental\n *\n * @example\n * ```ts\n * import { split } from \"@ayonli/jsext/path\";\n *\n * console.log(split(\"/usr/bin\")); // [\"/\", \"usr\", \"bin\"]\n * console.log(split(\"C:\\\\Windows\\\\System32\")); // [\"C:\\\\\", \"Windows\", \"System32\"]\n * console.log(split(\"file:///user/bin\")); // [\"file:///\", \"usr\", \"bin\"]\n *\n * console.log(split(\"http://example.com/foo/bar?foo=bar#baz\"));\n * // [\"http://example.com\", \"foo\", \"bar\", \"?foo=bar\", \"#baz\"]\n * ```\n */\nexport function split(path) {\n    if (!path) {\n        return [];\n    }\n    else if (isUrl(path)) {\n        const { protocol, host, pathname, search, hash } = new URL(path);\n        let origin = protocol + \"//\" + host;\n        if (isFileProtocol(origin)) {\n            origin += \"/\";\n        }\n        if (pathname === \"/\") {\n            if (search && hash) {\n                return [origin, search, hash];\n            }\n            else if (search) {\n                return [origin, search];\n            }\n            else if (hash) {\n                return [origin, hash];\n            }\n            else {\n                return [origin];\n            }\n        }\n        else {\n            const segments = trim(decodeURI(pathname), \"/\").split(/[/\\\\]+/);\n            if (search && hash) {\n                return [origin, ...segments, search, hash];\n            }\n            else if (search) {\n                return [origin, ...segments, search];\n            }\n            else if (hash) {\n                return [origin, ...segments, hash];\n            }\n            else {\n                return [origin, ...segments];\n            }\n        }\n    }\n    else if (isWindowsPath(path)) {\n        const [_, volume, ...segments] = split(\"file:///\" + path.replace(/[/\\\\]+/g, \"/\"));\n        return [volume + \"\\\\\", ...segments];\n    }\n    else if (isPosixPath(path)) {\n        const [_, ...segments] = split(\"file://\" + path.replace(/[/\\\\]+/g, \"/\"));\n        return [\"/\", ...segments];\n    }\n    else { // relative path\n        path = path.replace(/[/\\\\]+/g, \"/\");\n        const [_path, query] = path.split(\"?\");\n        if (query) {\n            const segments = _path ? trimEnd(_path, \"/\").split(\"/\") : [];\n            const [search, hash] = query.split(\"#\");\n            if (hash) {\n                return [...segments, \"?\" + search, \"#\" + hash];\n            }\n            else {\n                return [...segments, \"?\" + search];\n            }\n        }\n        else {\n            const [pathname, hash] = path.split(\"#\");\n            const segments = pathname ? trimEnd(pathname, \"/\").split(\"/\") : [];\n            if (hash) {\n                return [...segments, \"#\" + hash];\n            }\n            else {\n                return segments;\n            }\n        }\n    }\n}\nfunction stripFileProtocol(path) {\n    return path\n        .replace(/^file:\\/\\/(localhost)?\\/?([a-z]:)/i, \"$2\")\n        .replace(/^file:\\/?([a-z]:)/i, \"$1\")\n        .replace(/^file:\\/\\/(localhost)?\\//i, \"/\")\n        .replace(/^file:\\//i, \"/\");\n}\nfunction extractSegmentsForComparison(path, sub, options = {}) {\n    if (options.caseInsensitive) {\n        path = path.toLowerCase();\n        sub = sub.toLowerCase();\n    }\n    if (options.ignoreFileProtocol) {\n        path = stripFileProtocol(path);\n        sub = stripFileProtocol(sub);\n    }\n    const paths = split(path).filter(isNotQuery);\n    const subs = split(sub).filter(isNotQuery);\n    if (paths.length < subs.length) {\n        return { result: false, paths: [], subs: [] };\n    }\n    if (!options.caseInsensitive) {\n        paths.forEach((segment, i) => {\n            if (isVolume(segment)) {\n                // Windows volume is always case-insensitive\n                paths[i] = segment.toLowerCase();\n            }\n        });\n        subs.forEach((segment, i) => {\n            if (isVolume(segment)) {\n                // Windows volume is always case-insensitive\n                subs[i] = segment.toLowerCase();\n            }\n        });\n    }\n    if (!subs.length) {\n        return { result: true, paths, subs };\n    }\n    return { result: undefined, paths, subs };\n}\n/**\n * Checks if the `path` contains the given `sub` path.\n *\n * This function doesn't check the path string directly, instead, it checks the\n * path segments.\n\n * This function is ignorant about the path separator, the query string and the\n * hash string (if present). And is case-insensitive on Windows volume symbol\n * by default.\n *\n * @experimental\n *\n * @example\n * ```ts\n * import { contains } from \"@ayonli/jsext/path\";\n *\n * console.assert(contains(\"/usr/bin\", \"/usr\"));\n * console.assert(contains(\"C:\\\\Windows\\\\System32\", \"Windows\\\\System32\"));\n * console.assert(contains(\"http://example.com/foo/bar\", \"foo\"));\n * console.assert(contains(\"file:///C:/Windows/System32\", \"C:/Windows/System32\"));\n *\n * // To be noted, the origin portion of a URL is considered as a whole segment.\n * console.assert(!contains(\"http://example.com/foo/bar\", \"example.com\"));\n * console.assert(contains(\"http://example.com/foo/b\", \"http://example.com\"));\n * ```\n */\nexport function contains(path, sub, options = {}) {\n    const { result, paths, subs } = extractSegmentsForComparison(path, sub, options);\n    if (result !== undefined) {\n        return result;\n    }\n    return includesSlice(paths, subs);\n}\n/**\n * Checks if the `path` starts with the given `sub` path.\n *\n * This function doesn't check the path string directly, instead, it checks the\n * path segments.\n *\n * This function is ignorant about the path separator, the query string and the\n * hash string (if present). And is case-insensitive on Windows volume symbol\n * by default.\n * @experimental\n *\n * @example\n * ```ts\n * import { startsWith } from \"@ayonli/jsext/path\";\n *\n * console.assert(startsWith(\"/usr/bin\", \"/usr\"));\n * console.assert(startsWith(\"C:\\\\Windows\\\\System32\", \"c:/Windows\"));\n * console.assert(startsWith(\"http://example.com/foo/bar\", \"http://example.com\"));\n * console.assert(startsWith(\"file:///C:/Windows/System32\", \"file:///c:/Windows\"));\n *\n * // To be noted, the origin portion of a URL is considered as a whole segment.\n * console.assert(!startsWith(\"http://example.com/foo/bar\", \"example.com\"));\n * console.assert(startsWith(\"http://example.com/foo/b\", \"http://example.com\"));\n *\n * // ignore file protocol\n * console.assert(startsWith(\"file:///C:/Windows/System32\", \"C:/Windows/System32\", {\n *     ignoreFileProtocol: true,\n * }));\n * ```\n */\nexport function startsWith(path, sub, options = {}) {\n    const { result, paths, subs } = extractSegmentsForComparison(path, sub, options);\n    if (result !== undefined)\n        return result;\n    return _startsWith(paths, subs);\n}\n/**\n * Checks if the `path` ends with the given `sub` path.\n *\n * This function doesn't check the path string directly, instead, it checks the\n * path segments.\n *\n * This function is ignorant about the path separator, the query string and the\n * hash string (if present). And is case-insensitive on Windows volume symbol\n * by default.\n * @experimental\n *\n * @example\n * ```ts\n * import { endsWith } from \"@ayonli/jsext/path\";\n *\n * console.assert(endsWith(\"/usr/bin\", \"bin\"));\n * console.assert(endsWith(\"C:\\\\Windows\\\\System32\", \"System32\"));\n * console.assert(endsWith(\"http://example.com/foo/bar\", \"bar\"));\n * console.assert(endsWith(\"file:///C:/Windows/System32\", \"System32\"));\n *\n * // To be noted, an absolute sub path has its own root.\n * console.assert(!endsWith(\"/usr/bin\", \"/bin\"));\n * ```\n */\nexport function endsWith(path, sub, options = {}) {\n    const { result, paths, subs } = extractSegmentsForComparison(path, sub, options);\n    if (result !== undefined)\n        return result;\n    return _endsWith(paths, subs);\n}\n/**\n * Checks if the `path1` and `path2` describe the same path.\n *\n * This function doesn't check the path string directly, instead, it checks the\n * path segments.\n *\n * This function is ignorant about the path separator, the query string and the\n * hash string (if present). And is case-insensitive on Windows volume symbol\n * by default.\n * @experimental\n *\n * @example\n * ```ts\n * import { equals } from \"@ayonli/jsext/path\";\n *\n * console.assert(equals(\"/usr/bin\", \"/usr/bin\"));\n * console.assert(equals(\"C:\\\\Windows\\\\System32\", \"c:/Windows/System32\"));\n * console.assert(equals(\"http://example.com/foo/bar?foo=bar\", \"http://example.com/foo/bar\"));\n * console.assert(equals(\"file://localhost/C:/Windows/System32\", \"file:///c:/Windows/System32\"));\n *\n * // ignore file protocol\n * console.assert(equals(\"file:///C:/Windows/System32\", \"C:\\\\Windows\\\\System32\", {\n *     ignoreFileProtocol: true,\n * }));\n * ```\n */\nexport function equals(path1, path2, options = {}) {\n    const { result, paths, subs } = extractSegmentsForComparison(path1, path2, options);\n    if (result === false || paths.length !== subs.length)\n        return false;\n    return _equals(paths, subs);\n}\n//# sourceMappingURL=util.js.map"],"names":["trim","trimEnd","includesSlice","_startsWith","_endsWith","_equals"],"mappings":"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"}