import type { CopyOptions, GetDirOptions, GetFileOptions, LinkOptions, MkdirOptions, ReadDirOptions, ReadFileOptions, RemoveOptions, StatOptions, WriteFileOptions } from "../fs.ts";
import type { FileSystemOptions, FileInfo, DirEntry, DirTree } from "../fs/types.ts";
export type { CopyOptions, GetDirOptions, GetFileOptions, LinkOptions, MkdirOptions, ReadDirOptions, ReadFileOptions, RemoveOptions, StatOptions, WriteFileOptions, };
export type { FileSystemOptions, FileInfo, DirEntry, DirTree };
export declare const EOL: "\n" | "\r\n";
export declare function getDirHandle(path: string, options?: GetDirOptions): Promise<FileSystemDirectoryHandle>;
export declare function getFileHandle(path: string, options?: GetFileOptions): Promise<FileSystemFileHandle>;
export declare function exists(path: string, options?: FileSystemOptions): Promise<boolean>;
export declare function stat(target: string | FileSystemFileHandle | FileSystemDirectoryHandle, options?: StatOptions): Promise<FileInfo>;
export declare function mkdir(path: string, options?: MkdirOptions): Promise<void>;
export declare function ensureDir(path: string, options?: Omit<MkdirOptions, "recursive">): Promise<void>;
export declare function readDir(target: string | FileSystemDirectoryHandle, options?: ReadDirOptions): AsyncIterableIterator<DirEntry>;
export declare function readTree(target: string | FileSystemDirectoryHandle, options?: FileSystemOptions): Promise<DirTree>;
export declare function readFile(target: string | FileSystemFileHandle, options?: ReadFileOptions): Promise<Uint8Array>;
export declare function readFileAsText(target: string | FileSystemFileHandle, options?: ReadFileOptions): Promise<string>;
export declare function readFileAsFile(target: string | FileSystemFileHandle, options?: ReadFileOptions): Promise<File>;
export declare function writeFile(target: string | FileSystemFileHandle, data: string | ArrayBuffer | ArrayBufferView | ReadableStream<Uint8Array> | Blob, options?: WriteFileOptions): Promise<void>;
export declare function writeLines(target: string | FileSystemFileHandle, lines: string[], options?: WriteFileOptions): Promise<void>;
export declare function truncate(target: string | FileSystemFileHandle, size?: number, options?: FileSystemOptions): Promise<void>;
export declare function remove(path: string, options?: RemoveOptions): Promise<void>;
export declare function rename(oldPath: string, newPath: string, options?: FileSystemOptions): Promise<void>;
export declare function copy(src: string, dest: string, options?: CopyOptions): Promise<void>;
export declare function copy(src: FileSystemFileHandle, dest: FileSystemFileHandle | FileSystemDirectoryHandle): Promise<void>;
export declare function copy(src: FileSystemDirectoryHandle, dest: FileSystemDirectoryHandle, options?: Pick<CopyOptions, "recursive">): Promise<void>;
export declare function link(src: string, dest: string, options?: LinkOptions): Promise<void>;
export declare function readLink(path: string): Promise<string>;
export declare function chmod(path: string, mode: number): Promise<void>;
export declare function chown(path: string, uid: number, gid: number): Promise<void>;
export declare function utimes(path: string, atime: number | Date, mtime: number | Date): Promise<void>;
export declare function createReadableStream(target: string | FileSystemFileHandle, options?: FileSystemOptions): ReadableStream<Uint8Array>;
export declare function createWritableStream(target: string | FileSystemFileHandle, options?: Omit<WriteFileOptions, "signal">): WritableStream<Uint8Array>;
