{"version":3,"file":"example.js","sources":["../example.ts"],"sourcesContent":["/**\n * Writes unit tests as if writing examples, inspired by Golang.\n * @module\n * @deprecated It turns out that this module isn't really helpful, and has\n * compatibility issues with Bun, **tsx** and browsers, it will be removed in\n * the future.\n */\nimport { isDeno, isNodeLike } from \"./env.ts\";\n/**\n * Inspired by Golang's **Example as Test** design, creates a function that\n * carries example code with `// output:` comments, when the returned function\n * is called, it will automatically check if the actual output matches the one\n * declared in the comment.\n *\n * The example function receives a customized `console` object which will be\n * used to log outputs instead of using the built-in `console`.\n *\n * **NOTE:**\n * This function is used to simplify the process of writing tests, currently,\n * it does not work in Bun, **tsx** and browsers, because Bun hasn't implement\n * the `Console` constructor and removes comments during runtime, **tsx** also\n * remove comments, and the function depends on Node.js built-in modules.\n *\n * @example\n * ```ts\n * import example from \"@ayonli/jsext/example\";\n *\n * it(\"should output as expected\", example(console => {\n *     console.log(\"Hello, World!\");\n *     // output:\n *     // Hello, World!\n * }));\n * ```\n *\n * @deprecated It turns out that this function isn't really helpful, and has\n * compatibility issues with Bun, **tsx** and browsers, it will be removed in\n * the future.\n */\nexport default function example(fn, options = undefined) {\n    const call = {};\n    Error.captureStackTrace(call, example);\n    return async function (...args) {\n        const fnStr = fn.toString();\n        let lines = fnStr.split(\"\\n\").slice(1, -1);\n        let offset = lines.findIndex(line => {\n            return line.trim().toLowerCase() === \"// output:\";\n        });\n        if (offset === -1) {\n            // no output is detected, skip the function\n            return;\n        }\n        else {\n            offset += 1;\n            lines = lines.slice(offset);\n        }\n        if (lines.findIndex(line => {\n            return line.trim().toLowerCase() === \"// output:\";\n        }) !== -1) {\n            throw new Error(\"there can only be one output comment in the example\");\n        }\n        let expected = [];\n        for (let line of lines) {\n            line = line.trimStart();\n            if (line.startsWith(\"//\")) {\n                if (line[2] && line[2] !== \" \") {\n                    throw new Error(\"the output comment must start with '// '\");\n                }\n                expected.push(line.slice(3));\n            }\n            else {\n                throw new Error(\"the output comment must be at the end of the example\");\n            }\n        }\n        // remove empty tailing lines\n        const _expected = [...expected];\n        expected = [];\n        for (let i = _expected.length - 1; i >= 0; i--) {\n            if (_expected[i] !== \"\") {\n                expected.push(_expected[i]);\n            }\n        }\n        expected.reverse();\n        const assert = await import(\"node:assert\");\n        const { Writable } = await import(\"node:stream\");\n        const { Console } = await import(\"node:console\");\n        const logs = [];\n        const decoder = new TextDecoder();\n        const stdout = new Writable({\n            write(chunk, _, callback) {\n                logs.push(chunk);\n                // const str = decoder.decode(chunk);\n                // const lines = str.split(\"\\n\");\n                // lines.forEach((line, i) => {\n                //     if (line || i !== lines.length - 1) {\n                //         logs.push(line);\n                //     }\n                // });\n                callback();\n            },\n        });\n        const _console = new Console(stdout);\n        const returns = fn.call(this, _console, ...args);\n        const handleResult = async () => {\n            var _a;\n            const actual = logs.map(chunk => decoder.decode(chunk))\n                .join(\"\\n\")\n                .replace(/[\\n]+$/, \"\");\n            const _expected = expected.join(\"\\n\");\n            try {\n                // @ts-ignore\n                assert.ok(actual === _expected, `\\nexpected:\\n${_expected}\\n\\ngot:\\n${actual}`);\n                if (!(options === null || options === void 0 ? void 0 : options.suppress)) {\n                    for (const chunk of logs) {\n                        if (isDeno) {\n                            await Deno.stdout.write(chunk);\n                        }\n                        else if (isNodeLike) {\n                            await new Promise(resolve => {\n                                process.stdout.write(chunk, () => resolve());\n                            });\n                        }\n                    }\n                }\n            }\n            catch (err) {\n                Object.defineProperty(err, \"stack\", {\n                    configurable: true,\n                    writable: true,\n                    enumerable: false,\n                    value: err.stack\n                        + \"\\n\" + ((_a = call.stack) === null || _a === void 0 ? void 0 : _a.split(\"\\n\").slice(1).join(\"\\n\")),\n                });\n                throw err;\n            }\n        };\n        if (typeof (returns === null || returns === void 0 ? void 0 : returns.then) === \"function\") {\n            await Promise.resolve(returns);\n        }\n        await new Promise(resolve => stdout.end(() => resolve()));\n        await handleResult();\n    };\n}\n//# sourceMappingURL=example.js.map"],"names":[],"mappings":"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"}